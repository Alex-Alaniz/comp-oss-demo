name: Unit Tests

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write # Needed for uploading test results

on:
  pull_request: # Runs BEFORE merge during PR review
    branches:
      - main # Feature branches -> main
      - release # main -> release (production)
    paths:
      - 'apps/**'
      - 'packages/**'
      - '!**/*.md'
  push: # Also runs AFTER merge to main/release
    branches:
      - main
      - release
  workflow_dispatch: # Allow manual triggering

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: self-hosted
    timeout-minutes: 10

    strategy:
      matrix:
        app: [app, framework-editor, portal, trust]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/db
          bunx prisma generate

      - name: Run unit tests for ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}
          if [ -f "vitest.config.mts" ] || [ -f "vitest.config.ts" ]; then
            bun run test --run --reporter=json --reporter=default --outputFile=test-results.json
          else
            echo "No vitest config found, skipping tests for ${{ matrix.app }}"
          fi
        env:
          CI: true
          AUTH_SECRET: test-auth-secret-for-ci
          BETTER_AUTH_URL: http://localhost:3000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.app }}
          path: apps/${{ matrix.app }}/test-results.json
          if-no-files-found: ignore

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-results
          path: apps/app/coverage/
          retention-days: 7

      - name: Post test results to PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let testSummary = '## ❌ Unit Tests Failed\n\n';

            // Try to read test output from previous step
            testSummary += '### Test Output\n';
            testSummary += 'Unit tests failed. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n';

            testSummary += '### Common Issues\n';
            testSummary += '- **Import errors**: Check that all imports are correct\n';
            testSummary += '- **Type errors**: Ensure TypeScript types are properly defined\n';
            testSummary += '- **Missing mocks**: Verify that external dependencies are properly mocked\n\n';

            testSummary += '💡 **Tip**: Run `bun test` locally to debug the failing tests.\n';

            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Unit Tests Failed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testSummary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testSummary
              });
            }
