name: Quick Tests

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    branches: [main, release]

env:
  NODE_ENV: test

jobs:
  quick-test:
    runs-on: self-hosted
    strategy:
      matrix:
        app: [app]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Prisma client
        run: |
          cd packages/db
          bunx prisma generate

      - name: Run database migrations
        run: |
          cd packages/db
          bunx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run quick tests
        run: |
          cd apps/app
          bunx vitest run src/middleware.test.ts src/lib/__tests__/
        env:
          CI: true
          MOCK_REDIS: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci
          AUTH_SECRET: test-secret-for-ci
          BETTER_AUTH_URL: http://localhost:3000
          # Additional env vars that might be needed
          UPSTASH_REDIS_REST_URL: https://dummy.upstash.io
          UPSTASH_REDIS_REST_TOKEN: dummy-token
          RESEND_API_KEY: dummy-resend-key
          TRIGGER_SECRET_KEY: dummy-trigger-key
          STRIPE_SECRET_KEY: sk_test_dummy_key_for_ci_builds
          STRIPE_WEBHOOK_SECRET: whsec_test_dummy_webhook_secret

      - name: Post test results to PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            let testSummary = '## ❌ Quick Tests Failed\n\n';
            testSummary += 'The quick smoke tests have failed. These are basic tests that should always pass.\n\n';

            testSummary += '### Failed Tests\n';
            testSummary += '- Middleware tests\n';
            testSummary += '- Core library tests\n\n';

            testSummary += 'Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n';

            testSummary += '💡 **Tip**: Run `bun test` locally to debug the failing tests.\n';

            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Quick Tests Failed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testSummary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testSummary
              });
            }
