version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - curl -fsSL https://bun.sh/install | bash

  build:
    commands:
      - echo "=== BUILD ENVIRONMENT DEBUG ==="
      - echo "DATABASE_URL exists:" $(test -n "$DATABASE_URL" && echo "YES" || echo "NO")
      - echo "DATABASE_URL length:" ${#DATABASE_URL}
      - echo "DATABASE_URL (masked):" $(echo "$DATABASE_URL" | sed 's/:[^@]*@/:***@/')
      - echo "NODE_ENV:" $NODE_ENV
      - cd apps/app

      - echo "=== INSTALLING DEPENDENCIES ==="
      - export PATH="/root/.bun/bin:$PATH"
      - export PGSSLMODE=require
      - export NEXT_TELEMETRY_DISABLED=1
      - SKIP_ENV_VALIDATION=true bun install --frozen-lockfile

      - echo "=== GENERATING PRISMA CLIENT ==="
      - cd ../../packages/db
      - bun x prisma generate
      - cd ../../apps/app

      - echo "=== TYPE CHECKING ==="
      - echo "Running TypeScript type checking..."
      - bun run typecheck
      - echo "✅ Type checking passed"

      - echo "=== RUNNING DATABASE MIGRATIONS ==="
      - echo "Testing database connectivity..."
      - echo "DATABASE_URL endpoint:" $(echo "$DATABASE_URL" | sed 's/.*@\([^:]*\):.*/\1/')
      - nslookup $(echo "$DATABASE_URL" | sed 's/.*@\([^:]*\):.*/\1/') || echo "DNS lookup failed"
      - echo "Testing TCP connectivity to database..."
      - timeout 10 bash -c "</dev/tcp/$(echo "$DATABASE_URL" | sed 's/.*@\([^:]*\):.*/\1/')/5432" && echo "✅ TCP connection successful" || echo "❌ TCP connection failed"
      - echo "Checking security groups and network..."
      - curl -s http://169.254.169.254/latest/meta-data/local-ipv4 || echo "Metadata service not accessible (expected in VPC mode)"
      - echo "Running migrations before build..."
      - NODE_TLS_REJECT_UNAUTHORIZED=0 bun run apply-migrations
      - echo "✅ Database migrations completed"

      - echo "=== BUILDING NEXT.JS ON CODEBUILD HOST (WITH MIGRATED DATABASE) ==="
      - echo "Running Next.js build with database access for SSG..."
      - NODE_TLS_REJECT_UNAUTHORIZED=0 bun run build
      - echo "✅ Next.js build completed with database access"

      - echo "=== PREPARING STANDALONE BUILD FILES ==="
      - echo "Next.js standalone build requires manual copying of static files..."
      - cp -r public .next/standalone/ || echo "No public folder found"
      - cp -r .next/static .next/standalone/.next/ || echo "No static folder found"
      - echo "Copying Prisma client to standalone build..."
      - mkdir -p .next/standalone/node_modules/.prisma
      - 'mkdir -p ".next/standalone/node_modules/@prisma"'
      - cp -r ../../packages/db/node_modules/.prisma/client .next/standalone/node_modules/.prisma/ || echo "Trying local .prisma client..."
      - cp -r node_modules/.prisma/client .next/standalone/node_modules/.prisma/ || echo "Warning .prisma client not found"
      - cp -r "../../packages/db/node_modules/@prisma/client" ".next/standalone/node_modules/@prisma/" || echo "Trying local @prisma/client..."
      - cp -r "node_modules/@prisma/client" ".next/standalone/node_modules/@prisma/" || echo "Warning @prisma/client not found"
      - echo "✅ Standalone files prepared"

      - echo "=== VERIFYING BUILD ARTIFACTS ==="
      - echo "Checking if required files exist..."
      - ls -la .next/standalone/ || echo "❌ .next/standalone/ not found"
      - ls -la .next/standalone/.next/static/ || echo "❌ .next/standalone/.next/static/ not found"
      - ls -la .next/standalone/public/ || echo "❌ .next/standalone/public/ not found"
      - ls -la .next/standalone/server.js || echo "❌ server.js not found"

      - echo "=== BUILDING DOCKER RUNTIME IMAGE WITH PRE-BUILT ARTIFACTS ==="
      - echo "Creating runtime-only Docker image with build artifacts..."
      - echo "# Use Node.js Alpine for smaller runtime image" > Dockerfile.runtime
      - echo "FROM node:18-alpine AS runtime" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "WORKDIR /app" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "ENV NODE_ENV=production" >> Dockerfile.runtime
      - echo "ENV NEXT_TELEMETRY_DISABLED=1" >> Dockerfile.runtime
      - echo "ENV PORT=3000" >> Dockerfile.runtime
      - echo "ENV HOSTNAME=\"0.0.0.0\"" >> Dockerfile.runtime
      - echo "ENV NODE_TLS_REJECT_UNAUTHORIZED=0" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "# Copy the complete standalone build from CodeBuild" >> Dockerfile.runtime
      - echo "COPY .next/standalone ./" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "# Create non-root user for security" >> Dockerfile.runtime
      - echo "RUN addgroup -g 1001 -S nodejs && \\" >> Dockerfile.runtime
      - echo "    adduser -S nextjs -u 1001 && \\" >> Dockerfile.runtime
      - echo "    chown -R nextjs:nodejs /app" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "USER nextjs" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "EXPOSE 3000" >> Dockerfile.runtime
      - echo "" >> Dockerfile.runtime
      - echo "# Use node to run the standalone server.js" >> Dockerfile.runtime
      - echo "CMD [\"node\", \"server.js\"]" >> Dockerfile.runtime
      - docker build -f Dockerfile.runtime -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Updating ECS service to deploy new image..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment || (echo "❌ Failed to update ECS service" && exit 1)
      - echo "Writing image definitions file..."
      - 'printf "[{\"name\":\"%s-app\",\"imageUri\":\"%s\"}]" $IMAGE_REPO_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

artifacts:
  files:
    - imagedefinitions.json
  name: app-build
