version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - curl -fsSL https://bun.sh/install | bash

  build:
    commands:
      # Environment setup
      - export PATH="/root/.bun/bin:$PATH"
      - export PGSSLMODE=require
      - export NEXT_TELEMETRY_DISABLED=1
      - export UV_THREADPOOL_SIZE=36
      - export NODE_OPTIONS="--max-old-space-size=65536"

      # Install dependencies
      - echo "Installing dependencies..."
      - SKIP_ENV_VALIDATION=true bun install --frozen-lockfile --concurrent 36 || SKIP_ENV_VALIDATION=true bun install --concurrent 36

      # Generate Prisma client
      - echo "Generating Prisma client..."
      - bun x prisma generate --schema=packages/db/prisma/schema.prisma
      - cd packages/db && bun x prisma generate && cd ../../

      # Validate environment variables
      - echo "Validating environment variables..."
      - '[ -n "$AUTH_SECRET" ] || { echo "❌ AUTH_SECRET is not set"; exit 1; }'
      - '[ -n "$RESEND_API_KEY" ] || { echo "❌ RESEND_API_KEY is not set"; exit 1; }'
      - '[ -n "$REVALIDATION_SECRET" ] || { echo "❌ REVALIDATION_SECRET is not set"; exit 1; }'
      - '[ -n "$NEXT_PUBLIC_PORTAL_URL" ] || { echo "❌ NEXT_PUBLIC_PORTAL_URL is not set"; exit 1; }'

      # Run database migrations
      - echo "Running database migrations..."
      - cd apps/app
      - NODE_TLS_REJECT_UNAUTHORIZED=0 bun run apply-migrations
      - cd ../../

      # Type check
      - echo "Type checking..."
      - cd apps/app && bun run typecheck && cd ../../

      # Build Next.js app
      - echo "Building Next.js application..."
      - cd apps/app
      - NODE_TLS_REJECT_UNAUTHORIZED=0 bun run build

      # Prepare standalone build
      - echo "Preparing standalone build..."
      - echo "DEBUG - Checking what Next.js built..."
      - ls -la .next/
      - ls -la .next/standalone/ || echo "No standalone directory"
      - echo "DEBUG - Checking if static files exist..."
      - ls -la .next/static/ || echo "No static directory found"
      - echo "DEBUG - Copying static files to standalone..."
      - cp -r public .next/standalone/ || echo "No public folder"
      - mkdir -p .next/standalone/.next/static
      - if [ -d ".next/static" ]; then cp -r .next/static/* .next/standalone/.next/static/; else echo "No .next/static directory"; fi
      - echo "DEBUG - Final verification..."
      - ls -la .next/standalone/ || echo "Standalone empty"
      - find .next/standalone -name "*.css" | head -3 || echo "No CSS files found"
      - find .next/standalone -name "*.js" | head -3 || echo "No JS files found"

      # Copy Prisma client
      - echo "Copying Prisma client..."
      - mkdir -p .next/standalone/node_modules/.prisma .next/standalone/node_modules/@prisma
      - if [ -d "../../node_modules/.prisma/client" ]; then
        cp -r ../../node_modules/.prisma/client .next/standalone/node_modules/.prisma/;
        elif [ -d "node_modules/.prisma/client" ]; then
        cp -r node_modules/.prisma/client .next/standalone/node_modules/.prisma/;
        fi
      - if [ -d "../../node_modules/@prisma/client" ]; then
        cp -r "../../node_modules/@prisma/client" ".next/standalone/node_modules/@prisma/";
        elif [ -d "node_modules/@prisma/client" ]; then
        cp -r "node_modules/@prisma/client" ".next/standalone/node_modules/@prisma/";
        fi

      # Build Docker image
      - echo "Building Docker image..."
      - docker build --build-arg BUILDKIT_INLINE_CACHE=1 -f Dockerfile -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Updating ECS service..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      - 'printf "[{\"name\":\"%s-app\",\"imageUri\":\"%s\"}]" $IMAGE_REPO_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

cache:
  paths:
    - 'node_modules/**/*'
    - 'packages/db/node_modules/**/*'
    - '/root/.bun/install/cache/**/*'
    - '.next/cache/**/*'
    - 'bun.lock'

artifacts:
  files:
    - imagedefinitions.json
  name: app-build
