model Artifact {
  // Metadata
  id   String       @id @default(dbgenerated("generate_prefixed_cuid('art'::text)"))
  type ArtifactType

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  controls       Control[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  evidenceId     String?
  evidence       Evidence?    @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  policyId       String?
  policy         Policy?      @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([organizationId, evidenceId, policyId])
}

enum ArtifactType {
  policy
  evidence
  procedure
  training
}

model User {
  id            String    @id @default(dbgenerated("generate_prefixed_cuid('usr'::text)"))
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  accounts           Account[]
  auditLog           AuditLog[]
  integrationResults IntegrationResult[]
  invitations        Invitation[]
  members            Member[]
  sessions           Session[]

  @@unique([email])
}

model EmployeeTrainingVideoCompletion {
  id          String    @id @default(dbgenerated("generate_prefixed_cuid('evc'::text)"))
  completedAt DateTime?
  videoId     String

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, videoId])
  @@index([memberId])
}

model Session {
  id                   String   @id @default(dbgenerated("generate_prefixed_cuid('ses'::text)"))
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id @default(dbgenerated("generate_prefixed_cuid('acc'::text)"))
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String   @id @default(dbgenerated("generate_prefixed_cuid('ver'::text)"))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Member {
  id             String       @id @default(dbgenerated("generate_prefixed_cuid('mem'::text)"))
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role
  createdAt      DateTime     @default(now())

  department                      Departments                       @default(none)
  isActive                        Boolean                           @default(true)
  EmployeeTrainingVideoCompletion EmployeeTrainingVideoCompletion[]
  Evidence                        Evidence[]
  Policy                          Policy[]
  Risk                            Risk[]
  Task                            Task[]
  Vendor                          Vendor[]
  comments                        Comment[]
}

model Invitation {
  id             String       @id @default(dbgenerated("generate_prefixed_cuid('inv'::text)"))
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           Role?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
}

enum Role {
  owner
  admin
  auditor
  employee
}

model Comment {
  id        String   @id @default(dbgenerated("generate_prefixed_cuid('cmt'::text)"))
  content   String
  entityId  String
  createdAt DateTime @default(now())

  // Relationships
  authorId       String
  author         Member       @relation(fields: [authorId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([entityId])
}

model Control {
  // Metadata
  id          String @id @default(dbgenerated("generate_prefixed_cuid('ctl'::text)"))
  name        String
  description String

  // Review dates
  lastReviewDate DateTime?
  nextReviewDate DateTime?

  // Relationships
  frameworkInstances FrameworkInstance[]
  organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  artifacts          Artifact[]
  requirementsMapped RequirementMap[]

  @@index([organizationId])
}

model Evidence {
  // Metadata
  id             String          @id @default(dbgenerated("generate_prefixed_cuid('evd'::text)"))
  name           String
  description    String
  isNotRelevant  Boolean         @default(false)
  additionalUrls String[]
  fileUrls       String[]
  frequency      Frequency?
  department     Departments     @default(none)
  status         EvidenceStatus? @default(draft)

  // Dates
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastPublishedAt DateTime?

  // Relationships
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  artifacts      Artifact[]

  @@index([organizationId])
}

enum EvidenceStatus {
  draft
  published
  not_relevant
}

model FrameworkInstance {
  // Metadata
  id             String      @id @default(dbgenerated("generate_prefixed_cuid('frm'::text)"))
  organizationId String
  frameworkId    FrameworkId

  // Relationships
  controls           Control[]
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requirementsMapped RequirementMap[]

  @@unique([organizationId, frameworkId])
}

enum FrameworkId {
  soc2
}

model Integration {
  id             String              @id @default(dbgenerated("generate_prefixed_cuid('int'::text)"))
  name           String              @unique
  integrationId  String
  settings       Json
  userSettings   Json
  organizationId String
  lastRunAt      DateTime?
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  results        IntegrationResult[]

  @@index([organizationId])
}

model IntegrationResult {
  id             String    @id @default(dbgenerated("generate_prefixed_cuid('itr'::text)"))
  title          String?
  description    String?
  remediation    String?
  status         String?
  severity       String?
  resultDetails  Json?
  completedAt    DateTime? @default(now())
  integrationId  String
  organizationId String
  assignedUserId String?

  assignedUser User?       @relation(fields: [assignedUserId], references: [id], onDelete: Cascade)
  integration  Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model Organization {
  id               String   @id @default(dbgenerated("generate_prefixed_cuid('org'::text)"))
  name             String
  slug             String   @unique
  logo             String?
  createdAt        DateTime
  metadata         String?
  stripeCustomerId String?

  apiKeys            ApiKey[]
  artifacts          Artifact[]
  auditLog           AuditLog[]
  controls           Control[]
  evidence           Evidence[]
  frameworkInstances FrameworkInstance[]
  integrations       Integration[]
  invitations        Invitation[]
  members            Member[]
  policy             Policy[]
  risk               Risk[]
  vendors            Vendor[]
  tasks              Task[]
  comments           Comment[]

  @@index([slug])
}

model Policy {
  id               String       @id @default(dbgenerated("generate_prefixed_cuid('pol'::text)"))
  name             String
  description      String?
  status           PolicyStatus @default(draft)
  content          Json[]
  frequency        Frequency?
  department       Departments?
  isRequiredToSign Boolean      @default(false)
  signedBy         String[]     @default([])
  reviewDate       DateTime?
  isArchived       Boolean      @default(false)

  // Dates
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastArchivedAt  DateTime?
  lastPublishedAt DateTime?

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id])
  artifacts      Artifact[]

  @@index([organizationId])
}

enum PolicyStatus {
  draft
  published
  needs_review
}

model RequirementMap {
  id            String        @id @default(dbgenerated("generate_prefixed_cuid('req'::text)"))
  requirementId RequirementId

  controlId           String
  control             Control           @relation(fields: [controlId], references: [id], onDelete: Cascade)
  frameworkInstanceId String
  frameworkInstance   FrameworkInstance @relation(fields: [frameworkInstanceId], references: [id], onDelete: Cascade)

  @@unique([controlId, frameworkInstanceId, requirementId])
  @@index([requirementId, frameworkInstanceId])
}

// Ensure these map to @comp/data requirements object
enum RequirementId {
  soc2_CC1
  soc2_CC2
  soc2_CC3
  soc2_CC4
  soc2_CC5
  soc2_CC6
  soc2_CC7
  soc2_CC8
  soc2_CC9
  soc2_A1
  soc2_C1
  soc2_PI1
  soc2_P1
}

model Risk {
  // Metadata
  id                           String            @id @default(dbgenerated("generate_prefixed_cuid('rsk'::text)"))
  title                        String
  description                  String
  category                     RiskCategory
  department                   Departments?
  status                       RiskStatus        @default(open)
  likelihood                   Likelihood        @default(very_unlikely)
  impact                       Impact            @default(insignificant)
  residualLikelihood           Likelihood        @default(very_unlikely)
  residualImpact               Impact            @default(insignificant)
  treatmentStrategyDescription String?
  treatmentStrategy            RiskTreatmentType @default(accept)

  // Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id])

  @@index([organizationId])
  @@index([category])
  @@index([status])
}

enum RiskTreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "prismaSchemaFolder"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  output          = "../../generated/client"
  version         = "6.5.0"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model ApiKey {
  id         String    @id @default(dbgenerated("generate_prefixed_cuid('apk'::text)"))
  name       String
  key        String    @unique
  salt       String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  isActive   Boolean   @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([key])
}

model AuditLog {
  id             String   @id @default(dbgenerated("generate_prefixed_cuid('aud'::text)"))
  timestamp      DateTime @default(now())
  userId         String
  organizationId String
  data           Json

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum Frequency {
  monthly
  quarterly
  yearly
}

enum Likelihood {
  very_unlikely
  unlikely
  possible
  likely
  very_likely
}

enum Impact {
  insignificant
  minor
  moderate
  major
  severe
}

model Task {
  // Metadata
  id          String     @id @default(dbgenerated("generate_prefixed_cuid('tsk'::text)"))
  title       String
  description String
  status      TaskStatus @default(open)
  relatedId   String
  relatedType TaskType

  // Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dueDate   DateTime

  // Relationships
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([relatedId])
  @@index([relatedId, organizationId])
}

enum TaskStatus {
  open
  closed
}

enum TaskType {
  vendor
  risk
}

model Vendor {
  id                  String          @id @default(dbgenerated("generate_prefixed_cuid('vnd'::text)"))
  name                String
  description         String
  category            VendorCategory  @default(other)
  status              VendorStatus    @default(not_assessed)
  inherentProbability Likelihood      @default(very_unlikely)
  inherentImpact      Impact          @default(insignificant)
  residualProbability Likelihood      @default(very_unlikely)
  residualImpact      Impact          @default(insignificant)
  contacts            VendorContact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([assigneeId])
  @@index([category])
}

model VendorContact {
  id        String   @id @default(dbgenerated("generate_prefixed_cuid('vct'::text)"))
  vendorId  String
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
}

enum VendorCategory {
  cloud
  infrastructure
  software_as_a_service
  finance
  marketing
  sales
  hr
  other
}

enum VendorStatus {
  not_assessed
  in_progress
  assessed
}
