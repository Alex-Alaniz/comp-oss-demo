
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Artifact
 * 
 */
export type Artifact = $Result.DefaultSelection<Prisma.$ArtifactPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EmployeeTrainingVideoCompletion
 * 
 */
export type EmployeeTrainingVideoCompletion = $Result.DefaultSelection<Prisma.$EmployeeTrainingVideoCompletionPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Control
 * 
 */
export type Control = $Result.DefaultSelection<Prisma.$ControlPayload>
/**
 * Model Evidence
 * 
 */
export type Evidence = $Result.DefaultSelection<Prisma.$EvidencePayload>
/**
 * Model FrameworkInstance
 * 
 */
export type FrameworkInstance = $Result.DefaultSelection<Prisma.$FrameworkInstancePayload>
/**
 * Model Integration
 * 
 */
export type Integration = $Result.DefaultSelection<Prisma.$IntegrationPayload>
/**
 * Model IntegrationResult
 * 
 */
export type IntegrationResult = $Result.DefaultSelection<Prisma.$IntegrationResultPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Policy
 * 
 */
export type Policy = $Result.DefaultSelection<Prisma.$PolicyPayload>
/**
 * Model RequirementMap
 * 
 */
export type RequirementMap = $Result.DefaultSelection<Prisma.$RequirementMapPayload>
/**
 * Model Risk
 * 
 */
export type Risk = $Result.DefaultSelection<Prisma.$RiskPayload>
/**
 * Model ApiKey
 * 
 */
export type ApiKey = $Result.DefaultSelection<Prisma.$ApiKeyPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model VendorContact
 * 
 */
export type VendorContact = $Result.DefaultSelection<Prisma.$VendorContactPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ArtifactType: {
  policy: 'policy',
  evidence: 'evidence',
  procedure: 'procedure',
  training: 'training'
};

export type ArtifactType = (typeof ArtifactType)[keyof typeof ArtifactType]


export const Role: {
  owner: 'owner',
  admin: 'admin',
  auditor: 'auditor',
  employee: 'employee'
};

export type Role = (typeof Role)[keyof typeof Role]


export const EvidenceStatus: {
  draft: 'draft',
  published: 'published',
  not_relevant: 'not_relevant'
};

export type EvidenceStatus = (typeof EvidenceStatus)[keyof typeof EvidenceStatus]


export const FrameworkId: {
  soc2: 'soc2'
};

export type FrameworkId = (typeof FrameworkId)[keyof typeof FrameworkId]


export const PolicyStatus: {
  draft: 'draft',
  published: 'published',
  needs_review: 'needs_review'
};

export type PolicyStatus = (typeof PolicyStatus)[keyof typeof PolicyStatus]


export const RequirementId: {
  soc2_CC1: 'soc2_CC1',
  soc2_CC2: 'soc2_CC2',
  soc2_CC3: 'soc2_CC3',
  soc2_CC4: 'soc2_CC4',
  soc2_CC5: 'soc2_CC5',
  soc2_CC6: 'soc2_CC6',
  soc2_CC7: 'soc2_CC7',
  soc2_CC8: 'soc2_CC8',
  soc2_CC9: 'soc2_CC9',
  soc2_A1: 'soc2_A1',
  soc2_C1: 'soc2_C1',
  soc2_PI1: 'soc2_PI1',
  soc2_P1: 'soc2_P1'
};

export type RequirementId = (typeof RequirementId)[keyof typeof RequirementId]


export const RiskTreatmentType: {
  accept: 'accept',
  avoid: 'avoid',
  mitigate: 'mitigate',
  transfer: 'transfer'
};

export type RiskTreatmentType = (typeof RiskTreatmentType)[keyof typeof RiskTreatmentType]


export const RiskCategory: {
  customer: 'customer',
  governance: 'governance',
  operations: 'operations',
  other: 'other',
  people: 'people',
  regulatory: 'regulatory',
  reporting: 'reporting',
  resilience: 'resilience',
  technology: 'technology',
  vendor_management: 'vendor_management'
};

export type RiskCategory = (typeof RiskCategory)[keyof typeof RiskCategory]


export const RiskStatus: {
  open: 'open',
  pending: 'pending',
  closed: 'closed',
  archived: 'archived'
};

export type RiskStatus = (typeof RiskStatus)[keyof typeof RiskStatus]


export const Departments: {
  none: 'none',
  admin: 'admin',
  gov: 'gov',
  hr: 'hr',
  it: 'it',
  itsm: 'itsm',
  qms: 'qms'
};

export type Departments = (typeof Departments)[keyof typeof Departments]


export const Frequency: {
  monthly: 'monthly',
  quarterly: 'quarterly',
  yearly: 'yearly'
};

export type Frequency = (typeof Frequency)[keyof typeof Frequency]


export const Likelihood: {
  very_unlikely: 'very_unlikely',
  unlikely: 'unlikely',
  possible: 'possible',
  likely: 'likely',
  very_likely: 'very_likely'
};

export type Likelihood = (typeof Likelihood)[keyof typeof Likelihood]


export const Impact: {
  insignificant: 'insignificant',
  minor: 'minor',
  moderate: 'moderate',
  major: 'major',
  severe: 'severe'
};

export type Impact = (typeof Impact)[keyof typeof Impact]


export const TaskStatus: {
  open: 'open',
  closed: 'closed'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const TaskType: {
  vendor: 'vendor',
  risk: 'risk'
};

export type TaskType = (typeof TaskType)[keyof typeof TaskType]


export const VendorCategory: {
  cloud: 'cloud',
  infrastructure: 'infrastructure',
  software_as_a_service: 'software_as_a_service',
  finance: 'finance',
  marketing: 'marketing',
  sales: 'sales',
  hr: 'hr',
  other: 'other'
};

export type VendorCategory = (typeof VendorCategory)[keyof typeof VendorCategory]


export const VendorStatus: {
  not_assessed: 'not_assessed',
  in_progress: 'in_progress',
  assessed: 'assessed'
};

export type VendorStatus = (typeof VendorStatus)[keyof typeof VendorStatus]

}

export type ArtifactType = $Enums.ArtifactType

export const ArtifactType: typeof $Enums.ArtifactType

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type EvidenceStatus = $Enums.EvidenceStatus

export const EvidenceStatus: typeof $Enums.EvidenceStatus

export type FrameworkId = $Enums.FrameworkId

export const FrameworkId: typeof $Enums.FrameworkId

export type PolicyStatus = $Enums.PolicyStatus

export const PolicyStatus: typeof $Enums.PolicyStatus

export type RequirementId = $Enums.RequirementId

export const RequirementId: typeof $Enums.RequirementId

export type RiskTreatmentType = $Enums.RiskTreatmentType

export const RiskTreatmentType: typeof $Enums.RiskTreatmentType

export type RiskCategory = $Enums.RiskCategory

export const RiskCategory: typeof $Enums.RiskCategory

export type RiskStatus = $Enums.RiskStatus

export const RiskStatus: typeof $Enums.RiskStatus

export type Departments = $Enums.Departments

export const Departments: typeof $Enums.Departments

export type Frequency = $Enums.Frequency

export const Frequency: typeof $Enums.Frequency

export type Likelihood = $Enums.Likelihood

export const Likelihood: typeof $Enums.Likelihood

export type Impact = $Enums.Impact

export const Impact: typeof $Enums.Impact

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type TaskType = $Enums.TaskType

export const TaskType: typeof $Enums.TaskType

export type VendorCategory = $Enums.VendorCategory

export const VendorCategory: typeof $Enums.VendorCategory

export type VendorStatus = $Enums.VendorStatus

export const VendorStatus: typeof $Enums.VendorStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Artifacts
 * const artifacts = await prisma.artifact.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Artifacts
   * const artifacts = await prisma.artifact.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.artifact`: Exposes CRUD operations for the **Artifact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artifacts
    * const artifacts = await prisma.artifact.findMany()
    * ```
    */
  get artifact(): Prisma.ArtifactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employeeTrainingVideoCompletion`: Exposes CRUD operations for the **EmployeeTrainingVideoCompletion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeTrainingVideoCompletions
    * const employeeTrainingVideoCompletions = await prisma.employeeTrainingVideoCompletion.findMany()
    * ```
    */
  get employeeTrainingVideoCompletion(): Prisma.EmployeeTrainingVideoCompletionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.control`: Exposes CRUD operations for the **Control** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Controls
    * const controls = await prisma.control.findMany()
    * ```
    */
  get control(): Prisma.ControlDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.evidence`: Exposes CRUD operations for the **Evidence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evidences
    * const evidences = await prisma.evidence.findMany()
    * ```
    */
  get evidence(): Prisma.EvidenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frameworkInstance`: Exposes CRUD operations for the **FrameworkInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrameworkInstances
    * const frameworkInstances = await prisma.frameworkInstance.findMany()
    * ```
    */
  get frameworkInstance(): Prisma.FrameworkInstanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integration.findMany()
    * ```
    */
  get integration(): Prisma.IntegrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.integrationResult`: Exposes CRUD operations for the **IntegrationResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationResults
    * const integrationResults = await prisma.integrationResult.findMany()
    * ```
    */
  get integrationResult(): Prisma.IntegrationResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.policy`: Exposes CRUD operations for the **Policy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Policies
    * const policies = await prisma.policy.findMany()
    * ```
    */
  get policy(): Prisma.PolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requirementMap`: Exposes CRUD operations for the **RequirementMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequirementMaps
    * const requirementMaps = await prisma.requirementMap.findMany()
    * ```
    */
  get requirementMap(): Prisma.RequirementMapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.risk`: Exposes CRUD operations for the **Risk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Risks
    * const risks = await prisma.risk.findMany()
    * ```
    */
  get risk(): Prisma.RiskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendorContact`: Exposes CRUD operations for the **VendorContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VendorContacts
    * const vendorContacts = await prisma.vendorContact.findMany()
    * ```
    */
  get vendorContact(): Prisma.VendorContactDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Artifact: 'Artifact',
    User: 'User',
    EmployeeTrainingVideoCompletion: 'EmployeeTrainingVideoCompletion',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Member: 'Member',
    Invitation: 'Invitation',
    Comment: 'Comment',
    Control: 'Control',
    Evidence: 'Evidence',
    FrameworkInstance: 'FrameworkInstance',
    Integration: 'Integration',
    IntegrationResult: 'IntegrationResult',
    Organization: 'Organization',
    Policy: 'Policy',
    RequirementMap: 'RequirementMap',
    Risk: 'Risk',
    ApiKey: 'ApiKey',
    AuditLog: 'AuditLog',
    Task: 'Task',
    Vendor: 'Vendor',
    VendorContact: 'VendorContact'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "artifact" | "user" | "employeeTrainingVideoCompletion" | "session" | "account" | "verification" | "member" | "invitation" | "comment" | "control" | "evidence" | "frameworkInstance" | "integration" | "integrationResult" | "organization" | "policy" | "requirementMap" | "risk" | "apiKey" | "auditLog" | "task" | "vendor" | "vendorContact"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Artifact: {
        payload: Prisma.$ArtifactPayload<ExtArgs>
        fields: Prisma.ArtifactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtifactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtifactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          findFirst: {
            args: Prisma.ArtifactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtifactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          findMany: {
            args: Prisma.ArtifactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>[]
          }
          create: {
            args: Prisma.ArtifactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          createMany: {
            args: Prisma.ArtifactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtifactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>[]
          }
          delete: {
            args: Prisma.ArtifactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          update: {
            args: Prisma.ArtifactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          deleteMany: {
            args: Prisma.ArtifactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArtifactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ArtifactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>[]
          }
          upsert: {
            args: Prisma.ArtifactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtifactPayload>
          }
          aggregate: {
            args: Prisma.ArtifactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtifact>
          }
          groupBy: {
            args: Prisma.ArtifactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtifactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtifactCountArgs<ExtArgs>
            result: $Utils.Optional<ArtifactCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EmployeeTrainingVideoCompletion: {
        payload: Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>
        fields: Prisma.EmployeeTrainingVideoCompletionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeTrainingVideoCompletionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeTrainingVideoCompletionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          findFirst: {
            args: Prisma.EmployeeTrainingVideoCompletionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeTrainingVideoCompletionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          findMany: {
            args: Prisma.EmployeeTrainingVideoCompletionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>[]
          }
          create: {
            args: Prisma.EmployeeTrainingVideoCompletionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          createMany: {
            args: Prisma.EmployeeTrainingVideoCompletionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeTrainingVideoCompletionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>[]
          }
          delete: {
            args: Prisma.EmployeeTrainingVideoCompletionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          update: {
            args: Prisma.EmployeeTrainingVideoCompletionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeTrainingVideoCompletionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeTrainingVideoCompletionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeTrainingVideoCompletionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>[]
          }
          upsert: {
            args: Prisma.EmployeeTrainingVideoCompletionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTrainingVideoCompletionPayload>
          }
          aggregate: {
            args: Prisma.EmployeeTrainingVideoCompletionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeTrainingVideoCompletion>
          }
          groupBy: {
            args: Prisma.EmployeeTrainingVideoCompletionGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTrainingVideoCompletionGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeTrainingVideoCompletionCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTrainingVideoCompletionCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Control: {
        payload: Prisma.$ControlPayload<ExtArgs>
        fields: Prisma.ControlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ControlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ControlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          findFirst: {
            args: Prisma.ControlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ControlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          findMany: {
            args: Prisma.ControlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>[]
          }
          create: {
            args: Prisma.ControlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          createMany: {
            args: Prisma.ControlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ControlCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>[]
          }
          delete: {
            args: Prisma.ControlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          update: {
            args: Prisma.ControlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          deleteMany: {
            args: Prisma.ControlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ControlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ControlUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>[]
          }
          upsert: {
            args: Prisma.ControlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          aggregate: {
            args: Prisma.ControlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControl>
          }
          groupBy: {
            args: Prisma.ControlGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlGroupByOutputType>[]
          }
          count: {
            args: Prisma.ControlCountArgs<ExtArgs>
            result: $Utils.Optional<ControlCountAggregateOutputType> | number
          }
        }
      }
      Evidence: {
        payload: Prisma.$EvidencePayload<ExtArgs>
        fields: Prisma.EvidenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EvidenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EvidenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          findFirst: {
            args: Prisma.EvidenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EvidenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          findMany: {
            args: Prisma.EvidenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>[]
          }
          create: {
            args: Prisma.EvidenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          createMany: {
            args: Prisma.EvidenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EvidenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>[]
          }
          delete: {
            args: Prisma.EvidenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          update: {
            args: Prisma.EvidenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          deleteMany: {
            args: Prisma.EvidenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EvidenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EvidenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>[]
          }
          upsert: {
            args: Prisma.EvidenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvidencePayload>
          }
          aggregate: {
            args: Prisma.EvidenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvidence>
          }
          groupBy: {
            args: Prisma.EvidenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<EvidenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.EvidenceCountArgs<ExtArgs>
            result: $Utils.Optional<EvidenceCountAggregateOutputType> | number
          }
        }
      }
      FrameworkInstance: {
        payload: Prisma.$FrameworkInstancePayload<ExtArgs>
        fields: Prisma.FrameworkInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrameworkInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrameworkInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          findFirst: {
            args: Prisma.FrameworkInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrameworkInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          findMany: {
            args: Prisma.FrameworkInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>[]
          }
          create: {
            args: Prisma.FrameworkInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          createMany: {
            args: Prisma.FrameworkInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrameworkInstanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>[]
          }
          delete: {
            args: Prisma.FrameworkInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          update: {
            args: Prisma.FrameworkInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          deleteMany: {
            args: Prisma.FrameworkInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrameworkInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FrameworkInstanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>[]
          }
          upsert: {
            args: Prisma.FrameworkInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameworkInstancePayload>
          }
          aggregate: {
            args: Prisma.FrameworkInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrameworkInstance>
          }
          groupBy: {
            args: Prisma.FrameworkInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrameworkInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrameworkInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<FrameworkInstanceCountAggregateOutputType> | number
          }
        }
      }
      Integration: {
        payload: Prisma.$IntegrationPayload<ExtArgs>
        fields: Prisma.IntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findFirst: {
            args: Prisma.IntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findMany: {
            args: Prisma.IntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          create: {
            args: Prisma.IntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          createMany: {
            args: Prisma.IntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          delete: {
            args: Prisma.IntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          update: {
            args: Prisma.IntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IntegrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          upsert: {
            args: Prisma.IntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          aggregate: {
            args: Prisma.IntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegration>
          }
          groupBy: {
            args: Prisma.IntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationCountAggregateOutputType> | number
          }
        }
      }
      IntegrationResult: {
        payload: Prisma.$IntegrationResultPayload<ExtArgs>
        fields: Prisma.IntegrationResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          findFirst: {
            args: Prisma.IntegrationResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          findMany: {
            args: Prisma.IntegrationResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>[]
          }
          create: {
            args: Prisma.IntegrationResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          createMany: {
            args: Prisma.IntegrationResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>[]
          }
          delete: {
            args: Prisma.IntegrationResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          update: {
            args: Prisma.IntegrationResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IntegrationResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>[]
          }
          upsert: {
            args: Prisma.IntegrationResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationResultPayload>
          }
          aggregate: {
            args: Prisma.IntegrationResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationResult>
          }
          groupBy: {
            args: Prisma.IntegrationResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationResultCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationResultCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Policy: {
        payload: Prisma.$PolicyPayload<ExtArgs>
        fields: Prisma.PolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          findFirst: {
            args: Prisma.PolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          findMany: {
            args: Prisma.PolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>[]
          }
          create: {
            args: Prisma.PolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          createMany: {
            args: Prisma.PolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>[]
          }
          delete: {
            args: Prisma.PolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          update: {
            args: Prisma.PolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          deleteMany: {
            args: Prisma.PolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>[]
          }
          upsert: {
            args: Prisma.PolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          aggregate: {
            args: Prisma.PolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePolicy>
          }
          groupBy: {
            args: Prisma.PolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PolicyCountArgs<ExtArgs>
            result: $Utils.Optional<PolicyCountAggregateOutputType> | number
          }
        }
      }
      RequirementMap: {
        payload: Prisma.$RequirementMapPayload<ExtArgs>
        fields: Prisma.RequirementMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequirementMapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequirementMapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          findFirst: {
            args: Prisma.RequirementMapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequirementMapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          findMany: {
            args: Prisma.RequirementMapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>[]
          }
          create: {
            args: Prisma.RequirementMapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          createMany: {
            args: Prisma.RequirementMapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequirementMapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>[]
          }
          delete: {
            args: Prisma.RequirementMapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          update: {
            args: Prisma.RequirementMapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          deleteMany: {
            args: Prisma.RequirementMapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequirementMapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequirementMapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>[]
          }
          upsert: {
            args: Prisma.RequirementMapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequirementMapPayload>
          }
          aggregate: {
            args: Prisma.RequirementMapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequirementMap>
          }
          groupBy: {
            args: Prisma.RequirementMapGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequirementMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequirementMapCountArgs<ExtArgs>
            result: $Utils.Optional<RequirementMapCountAggregateOutputType> | number
          }
        }
      }
      Risk: {
        payload: Prisma.$RiskPayload<ExtArgs>
        fields: Prisma.RiskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RiskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RiskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          findFirst: {
            args: Prisma.RiskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RiskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          findMany: {
            args: Prisma.RiskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>[]
          }
          create: {
            args: Prisma.RiskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          createMany: {
            args: Prisma.RiskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RiskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>[]
          }
          delete: {
            args: Prisma.RiskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          update: {
            args: Prisma.RiskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          deleteMany: {
            args: Prisma.RiskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RiskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RiskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>[]
          }
          upsert: {
            args: Prisma.RiskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskPayload>
          }
          aggregate: {
            args: Prisma.RiskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRisk>
          }
          groupBy: {
            args: Prisma.RiskGroupByArgs<ExtArgs>
            result: $Utils.Optional<RiskGroupByOutputType>[]
          }
          count: {
            args: Prisma.RiskCountArgs<ExtArgs>
            result: $Utils.Optional<RiskCountAggregateOutputType> | number
          }
        }
      }
      ApiKey: {
        payload: Prisma.$ApiKeyPayload<ExtArgs>
        fields: Prisma.ApiKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findFirst: {
            args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findMany: {
            args: Prisma.ApiKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          create: {
            args: Prisma.ApiKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          createMany: {
            args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          delete: {
            args: Prisma.ApiKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          update: {
            args: Prisma.ApiKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApiKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          upsert: {
            args: Prisma.ApiKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          aggregate: {
            args: Prisma.ApiKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKey>
          }
          groupBy: {
            args: Prisma.ApiKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      VendorContact: {
        payload: Prisma.$VendorContactPayload<ExtArgs>
        fields: Prisma.VendorContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          findFirst: {
            args: Prisma.VendorContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          findMany: {
            args: Prisma.VendorContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>[]
          }
          create: {
            args: Prisma.VendorContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          createMany: {
            args: Prisma.VendorContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>[]
          }
          delete: {
            args: Prisma.VendorContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          update: {
            args: Prisma.VendorContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          deleteMany: {
            args: Prisma.VendorContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>[]
          }
          upsert: {
            args: Prisma.VendorContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorContactPayload>
          }
          aggregate: {
            args: Prisma.VendorContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendorContact>
          }
          groupBy: {
            args: Prisma.VendorContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorContactCountArgs<ExtArgs>
            result: $Utils.Optional<VendorContactCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    artifact?: ArtifactOmit
    user?: UserOmit
    employeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    member?: MemberOmit
    invitation?: InvitationOmit
    comment?: CommentOmit
    control?: ControlOmit
    evidence?: EvidenceOmit
    frameworkInstance?: FrameworkInstanceOmit
    integration?: IntegrationOmit
    integrationResult?: IntegrationResultOmit
    organization?: OrganizationOmit
    policy?: PolicyOmit
    requirementMap?: RequirementMapOmit
    risk?: RiskOmit
    apiKey?: ApiKeyOmit
    auditLog?: AuditLogOmit
    task?: TaskOmit
    vendor?: VendorOmit
    vendorContact?: VendorContactOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArtifactCountOutputType
   */

  export type ArtifactCountOutputType = {
    controls: number
  }

  export type ArtifactCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controls?: boolean | ArtifactCountOutputTypeCountControlsArgs
  }

  // Custom InputTypes
  /**
   * ArtifactCountOutputType without action
   */
  export type ArtifactCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtifactCountOutputType
     */
    select?: ArtifactCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtifactCountOutputType without action
   */
  export type ArtifactCountOutputTypeCountControlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    auditLog: number
    integrationResults: number
    invitations: number
    members: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    auditLog?: boolean | UserCountOutputTypeCountAuditLogArgs
    integrationResults?: boolean | UserCountOutputTypeCountIntegrationResultsArgs
    invitations?: boolean | UserCountOutputTypeCountInvitationsArgs
    members?: boolean | UserCountOutputTypeCountMembersArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIntegrationResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    EmployeeTrainingVideoCompletion: number
    Evidence: number
    Policy: number
    Risk: number
    Task: number
    Vendor: number
    comments: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EmployeeTrainingVideoCompletion?: boolean | MemberCountOutputTypeCountEmployeeTrainingVideoCompletionArgs
    Evidence?: boolean | MemberCountOutputTypeCountEvidenceArgs
    Policy?: boolean | MemberCountOutputTypeCountPolicyArgs
    Risk?: boolean | MemberCountOutputTypeCountRiskArgs
    Task?: boolean | MemberCountOutputTypeCountTaskArgs
    Vendor?: boolean | MemberCountOutputTypeCountVendorArgs
    comments?: boolean | MemberCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountEmployeeTrainingVideoCompletionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTrainingVideoCompletionWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountEvidenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvidenceWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPolicyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountRiskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountVendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ControlCountOutputType
   */

  export type ControlCountOutputType = {
    frameworkInstances: number
    artifacts: number
    requirementsMapped: number
  }

  export type ControlCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    frameworkInstances?: boolean | ControlCountOutputTypeCountFrameworkInstancesArgs
    artifacts?: boolean | ControlCountOutputTypeCountArtifactsArgs
    requirementsMapped?: boolean | ControlCountOutputTypeCountRequirementsMappedArgs
  }

  // Custom InputTypes
  /**
   * ControlCountOutputType without action
   */
  export type ControlCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlCountOutputType
     */
    select?: ControlCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ControlCountOutputType without action
   */
  export type ControlCountOutputTypeCountFrameworkInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrameworkInstanceWhereInput
  }

  /**
   * ControlCountOutputType without action
   */
  export type ControlCountOutputTypeCountArtifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtifactWhereInput
  }

  /**
   * ControlCountOutputType without action
   */
  export type ControlCountOutputTypeCountRequirementsMappedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequirementMapWhereInput
  }


  /**
   * Count Type EvidenceCountOutputType
   */

  export type EvidenceCountOutputType = {
    artifacts: number
  }

  export type EvidenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artifacts?: boolean | EvidenceCountOutputTypeCountArtifactsArgs
  }

  // Custom InputTypes
  /**
   * EvidenceCountOutputType without action
   */
  export type EvidenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EvidenceCountOutputType
     */
    select?: EvidenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EvidenceCountOutputType without action
   */
  export type EvidenceCountOutputTypeCountArtifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtifactWhereInput
  }


  /**
   * Count Type FrameworkInstanceCountOutputType
   */

  export type FrameworkInstanceCountOutputType = {
    controls: number
    requirementsMapped: number
  }

  export type FrameworkInstanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controls?: boolean | FrameworkInstanceCountOutputTypeCountControlsArgs
    requirementsMapped?: boolean | FrameworkInstanceCountOutputTypeCountRequirementsMappedArgs
  }

  // Custom InputTypes
  /**
   * FrameworkInstanceCountOutputType without action
   */
  export type FrameworkInstanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstanceCountOutputType
     */
    select?: FrameworkInstanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FrameworkInstanceCountOutputType without action
   */
  export type FrameworkInstanceCountOutputTypeCountControlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
  }

  /**
   * FrameworkInstanceCountOutputType without action
   */
  export type FrameworkInstanceCountOutputTypeCountRequirementsMappedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequirementMapWhereInput
  }


  /**
   * Count Type IntegrationCountOutputType
   */

  export type IntegrationCountOutputType = {
    results: number
  }

  export type IntegrationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    results?: boolean | IntegrationCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationCountOutputType
     */
    select?: IntegrationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationResultWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    apiKeys: number
    artifacts: number
    auditLog: number
    controls: number
    evidence: number
    frameworkInstances: number
    integrations: number
    invitations: number
    members: number
    policy: number
    risk: number
    vendors: number
    tasks: number
    comments: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apiKeys?: boolean | OrganizationCountOutputTypeCountApiKeysArgs
    artifacts?: boolean | OrganizationCountOutputTypeCountArtifactsArgs
    auditLog?: boolean | OrganizationCountOutputTypeCountAuditLogArgs
    controls?: boolean | OrganizationCountOutputTypeCountControlsArgs
    evidence?: boolean | OrganizationCountOutputTypeCountEvidenceArgs
    frameworkInstances?: boolean | OrganizationCountOutputTypeCountFrameworkInstancesArgs
    integrations?: boolean | OrganizationCountOutputTypeCountIntegrationsArgs
    invitations?: boolean | OrganizationCountOutputTypeCountInvitationsArgs
    members?: boolean | OrganizationCountOutputTypeCountMembersArgs
    policy?: boolean | OrganizationCountOutputTypeCountPolicyArgs
    risk?: boolean | OrganizationCountOutputTypeCountRiskArgs
    vendors?: boolean | OrganizationCountOutputTypeCountVendorsArgs
    tasks?: boolean | OrganizationCountOutputTypeCountTasksArgs
    comments?: boolean | OrganizationCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountApiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountArtifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtifactWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountControlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountEvidenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvidenceWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountFrameworkInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrameworkInstanceWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountPolicyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountRiskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type PolicyCountOutputType
   */

  export type PolicyCountOutputType = {
    artifacts: number
  }

  export type PolicyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artifacts?: boolean | PolicyCountOutputTypeCountArtifactsArgs
  }

  // Custom InputTypes
  /**
   * PolicyCountOutputType without action
   */
  export type PolicyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyCountOutputType
     */
    select?: PolicyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PolicyCountOutputType without action
   */
  export type PolicyCountOutputTypeCountArtifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtifactWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    contacts: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | VendorCountOutputTypeCountContactsArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorContactWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Artifact
   */

  export type AggregateArtifact = {
    _count: ArtifactCountAggregateOutputType | null
    _min: ArtifactMinAggregateOutputType | null
    _max: ArtifactMaxAggregateOutputType | null
  }

  export type ArtifactMinAggregateOutputType = {
    id: string | null
    type: $Enums.ArtifactType | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    evidenceId: string | null
    policyId: string | null
  }

  export type ArtifactMaxAggregateOutputType = {
    id: string | null
    type: $Enums.ArtifactType | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    evidenceId: string | null
    policyId: string | null
  }

  export type ArtifactCountAggregateOutputType = {
    id: number
    type: number
    createdAt: number
    updatedAt: number
    organizationId: number
    evidenceId: number
    policyId: number
    _all: number
  }


  export type ArtifactMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    evidenceId?: true
    policyId?: true
  }

  export type ArtifactMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    evidenceId?: true
    policyId?: true
  }

  export type ArtifactCountAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    evidenceId?: true
    policyId?: true
    _all?: true
  }

  export type ArtifactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artifact to aggregate.
     */
    where?: ArtifactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artifacts to fetch.
     */
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtifactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artifacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artifacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artifacts
    **/
    _count?: true | ArtifactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtifactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtifactMaxAggregateInputType
  }

  export type GetArtifactAggregateType<T extends ArtifactAggregateArgs> = {
        [P in keyof T & keyof AggregateArtifact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtifact[P]>
      : GetScalarType<T[P], AggregateArtifact[P]>
  }




  export type ArtifactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtifactWhereInput
    orderBy?: ArtifactOrderByWithAggregationInput | ArtifactOrderByWithAggregationInput[]
    by: ArtifactScalarFieldEnum[] | ArtifactScalarFieldEnum
    having?: ArtifactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtifactCountAggregateInputType | true
    _min?: ArtifactMinAggregateInputType
    _max?: ArtifactMaxAggregateInputType
  }

  export type ArtifactGroupByOutputType = {
    id: string
    type: $Enums.ArtifactType
    createdAt: Date
    updatedAt: Date
    organizationId: string
    evidenceId: string | null
    policyId: string | null
    _count: ArtifactCountAggregateOutputType | null
    _min: ArtifactMinAggregateOutputType | null
    _max: ArtifactMaxAggregateOutputType | null
  }

  type GetArtifactGroupByPayload<T extends ArtifactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtifactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtifactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtifactGroupByOutputType[P]>
            : GetScalarType<T[P], ArtifactGroupByOutputType[P]>
        }
      >
    >


  export type ArtifactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    evidenceId?: boolean
    policyId?: boolean
    controls?: boolean | Artifact$controlsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
    _count?: boolean | ArtifactCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artifact"]>

  export type ArtifactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    evidenceId?: boolean
    policyId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
  }, ExtArgs["result"]["artifact"]>

  export type ArtifactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    evidenceId?: boolean
    policyId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
  }, ExtArgs["result"]["artifact"]>

  export type ArtifactSelectScalar = {
    id?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    evidenceId?: boolean
    policyId?: boolean
  }

  export type ArtifactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "createdAt" | "updatedAt" | "organizationId" | "evidenceId" | "policyId", ExtArgs["result"]["artifact"]>
  export type ArtifactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controls?: boolean | Artifact$controlsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
    _count?: boolean | ArtifactCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtifactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
  }
  export type ArtifactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    evidence?: boolean | Artifact$evidenceArgs<ExtArgs>
    policy?: boolean | Artifact$policyArgs<ExtArgs>
  }

  export type $ArtifactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Artifact"
    objects: {
      controls: Prisma.$ControlPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      evidence: Prisma.$EvidencePayload<ExtArgs> | null
      policy: Prisma.$PolicyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.ArtifactType
      createdAt: Date
      updatedAt: Date
      organizationId: string
      evidenceId: string | null
      policyId: string | null
    }, ExtArgs["result"]["artifact"]>
    composites: {}
  }

  type ArtifactGetPayload<S extends boolean | null | undefined | ArtifactDefaultArgs> = $Result.GetResult<Prisma.$ArtifactPayload, S>

  type ArtifactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArtifactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtifactCountAggregateInputType | true
    }

  export interface ArtifactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artifact'], meta: { name: 'Artifact' } }
    /**
     * Find zero or one Artifact that matches the filter.
     * @param {ArtifactFindUniqueArgs} args - Arguments to find a Artifact
     * @example
     * // Get one Artifact
     * const artifact = await prisma.artifact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArtifactFindUniqueArgs>(args: SelectSubset<T, ArtifactFindUniqueArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Artifact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArtifactFindUniqueOrThrowArgs} args - Arguments to find a Artifact
     * @example
     * // Get one Artifact
     * const artifact = await prisma.artifact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArtifactFindUniqueOrThrowArgs>(args: SelectSubset<T, ArtifactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artifact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactFindFirstArgs} args - Arguments to find a Artifact
     * @example
     * // Get one Artifact
     * const artifact = await prisma.artifact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArtifactFindFirstArgs>(args?: SelectSubset<T, ArtifactFindFirstArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artifact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactFindFirstOrThrowArgs} args - Arguments to find a Artifact
     * @example
     * // Get one Artifact
     * const artifact = await prisma.artifact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArtifactFindFirstOrThrowArgs>(args?: SelectSubset<T, ArtifactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Artifacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artifacts
     * const artifacts = await prisma.artifact.findMany()
     * 
     * // Get first 10 Artifacts
     * const artifacts = await prisma.artifact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artifactWithIdOnly = await prisma.artifact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArtifactFindManyArgs>(args?: SelectSubset<T, ArtifactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Artifact.
     * @param {ArtifactCreateArgs} args - Arguments to create a Artifact.
     * @example
     * // Create one Artifact
     * const Artifact = await prisma.artifact.create({
     *   data: {
     *     // ... data to create a Artifact
     *   }
     * })
     * 
     */
    create<T extends ArtifactCreateArgs>(args: SelectSubset<T, ArtifactCreateArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Artifacts.
     * @param {ArtifactCreateManyArgs} args - Arguments to create many Artifacts.
     * @example
     * // Create many Artifacts
     * const artifact = await prisma.artifact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArtifactCreateManyArgs>(args?: SelectSubset<T, ArtifactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Artifacts and returns the data saved in the database.
     * @param {ArtifactCreateManyAndReturnArgs} args - Arguments to create many Artifacts.
     * @example
     * // Create many Artifacts
     * const artifact = await prisma.artifact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Artifacts and only return the `id`
     * const artifactWithIdOnly = await prisma.artifact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArtifactCreateManyAndReturnArgs>(args?: SelectSubset<T, ArtifactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Artifact.
     * @param {ArtifactDeleteArgs} args - Arguments to delete one Artifact.
     * @example
     * // Delete one Artifact
     * const Artifact = await prisma.artifact.delete({
     *   where: {
     *     // ... filter to delete one Artifact
     *   }
     * })
     * 
     */
    delete<T extends ArtifactDeleteArgs>(args: SelectSubset<T, ArtifactDeleteArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Artifact.
     * @param {ArtifactUpdateArgs} args - Arguments to update one Artifact.
     * @example
     * // Update one Artifact
     * const artifact = await prisma.artifact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArtifactUpdateArgs>(args: SelectSubset<T, ArtifactUpdateArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Artifacts.
     * @param {ArtifactDeleteManyArgs} args - Arguments to filter Artifacts to delete.
     * @example
     * // Delete a few Artifacts
     * const { count } = await prisma.artifact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArtifactDeleteManyArgs>(args?: SelectSubset<T, ArtifactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artifacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artifacts
     * const artifact = await prisma.artifact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArtifactUpdateManyArgs>(args: SelectSubset<T, ArtifactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artifacts and returns the data updated in the database.
     * @param {ArtifactUpdateManyAndReturnArgs} args - Arguments to update many Artifacts.
     * @example
     * // Update many Artifacts
     * const artifact = await prisma.artifact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Artifacts and only return the `id`
     * const artifactWithIdOnly = await prisma.artifact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ArtifactUpdateManyAndReturnArgs>(args: SelectSubset<T, ArtifactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Artifact.
     * @param {ArtifactUpsertArgs} args - Arguments to update or create a Artifact.
     * @example
     * // Update or create a Artifact
     * const artifact = await prisma.artifact.upsert({
     *   create: {
     *     // ... data to create a Artifact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artifact we want to update
     *   }
     * })
     */
    upsert<T extends ArtifactUpsertArgs>(args: SelectSubset<T, ArtifactUpsertArgs<ExtArgs>>): Prisma__ArtifactClient<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Artifacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactCountArgs} args - Arguments to filter Artifacts to count.
     * @example
     * // Count the number of Artifacts
     * const count = await prisma.artifact.count({
     *   where: {
     *     // ... the filter for the Artifacts we want to count
     *   }
     * })
    **/
    count<T extends ArtifactCountArgs>(
      args?: Subset<T, ArtifactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtifactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artifact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtifactAggregateArgs>(args: Subset<T, ArtifactAggregateArgs>): Prisma.PrismaPromise<GetArtifactAggregateType<T>>

    /**
     * Group by Artifact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtifactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtifactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtifactGroupByArgs['orderBy'] }
        : { orderBy?: ArtifactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtifactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtifactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artifact model
   */
  readonly fields: ArtifactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artifact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtifactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controls<T extends Artifact$controlsArgs<ExtArgs> = {}>(args?: Subset<T, Artifact$controlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    evidence<T extends Artifact$evidenceArgs<ExtArgs> = {}>(args?: Subset<T, Artifact$evidenceArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    policy<T extends Artifact$policyArgs<ExtArgs> = {}>(args?: Subset<T, Artifact$policyArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Artifact model
   */
  interface ArtifactFieldRefs {
    readonly id: FieldRef<"Artifact", 'String'>
    readonly type: FieldRef<"Artifact", 'ArtifactType'>
    readonly createdAt: FieldRef<"Artifact", 'DateTime'>
    readonly updatedAt: FieldRef<"Artifact", 'DateTime'>
    readonly organizationId: FieldRef<"Artifact", 'String'>
    readonly evidenceId: FieldRef<"Artifact", 'String'>
    readonly policyId: FieldRef<"Artifact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Artifact findUnique
   */
  export type ArtifactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter, which Artifact to fetch.
     */
    where: ArtifactWhereUniqueInput
  }

  /**
   * Artifact findUniqueOrThrow
   */
  export type ArtifactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter, which Artifact to fetch.
     */
    where: ArtifactWhereUniqueInput
  }

  /**
   * Artifact findFirst
   */
  export type ArtifactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter, which Artifact to fetch.
     */
    where?: ArtifactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artifacts to fetch.
     */
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artifacts.
     */
    cursor?: ArtifactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artifacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artifacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artifacts.
     */
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Artifact findFirstOrThrow
   */
  export type ArtifactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter, which Artifact to fetch.
     */
    where?: ArtifactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artifacts to fetch.
     */
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artifacts.
     */
    cursor?: ArtifactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artifacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artifacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artifacts.
     */
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Artifact findMany
   */
  export type ArtifactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter, which Artifacts to fetch.
     */
    where?: ArtifactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artifacts to fetch.
     */
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artifacts.
     */
    cursor?: ArtifactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artifacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artifacts.
     */
    skip?: number
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Artifact create
   */
  export type ArtifactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * The data needed to create a Artifact.
     */
    data: XOR<ArtifactCreateInput, ArtifactUncheckedCreateInput>
  }

  /**
   * Artifact createMany
   */
  export type ArtifactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artifacts.
     */
    data: ArtifactCreateManyInput | ArtifactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Artifact createManyAndReturn
   */
  export type ArtifactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * The data used to create many Artifacts.
     */
    data: ArtifactCreateManyInput | ArtifactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Artifact update
   */
  export type ArtifactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * The data needed to update a Artifact.
     */
    data: XOR<ArtifactUpdateInput, ArtifactUncheckedUpdateInput>
    /**
     * Choose, which Artifact to update.
     */
    where: ArtifactWhereUniqueInput
  }

  /**
   * Artifact updateMany
   */
  export type ArtifactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artifacts.
     */
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyInput>
    /**
     * Filter which Artifacts to update
     */
    where?: ArtifactWhereInput
    /**
     * Limit how many Artifacts to update.
     */
    limit?: number
  }

  /**
   * Artifact updateManyAndReturn
   */
  export type ArtifactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * The data used to update Artifacts.
     */
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyInput>
    /**
     * Filter which Artifacts to update
     */
    where?: ArtifactWhereInput
    /**
     * Limit how many Artifacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Artifact upsert
   */
  export type ArtifactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * The filter to search for the Artifact to update in case it exists.
     */
    where: ArtifactWhereUniqueInput
    /**
     * In case the Artifact found by the `where` argument doesn't exist, create a new Artifact with this data.
     */
    create: XOR<ArtifactCreateInput, ArtifactUncheckedCreateInput>
    /**
     * In case the Artifact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtifactUpdateInput, ArtifactUncheckedUpdateInput>
  }

  /**
   * Artifact delete
   */
  export type ArtifactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    /**
     * Filter which Artifact to delete.
     */
    where: ArtifactWhereUniqueInput
  }

  /**
   * Artifact deleteMany
   */
  export type ArtifactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artifacts to delete
     */
    where?: ArtifactWhereInput
    /**
     * Limit how many Artifacts to delete.
     */
    limit?: number
  }

  /**
   * Artifact.controls
   */
  export type Artifact$controlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    cursor?: ControlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Artifact.evidence
   */
  export type Artifact$evidenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    where?: EvidenceWhereInput
  }

  /**
   * Artifact.policy
   */
  export type Artifact$policyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    where?: PolicyWhereInput
  }

  /**
   * Artifact without action
   */
  export type ArtifactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    auditLog?: boolean | User$auditLogArgs<ExtArgs>
    integrationResults?: boolean | User$integrationResultsArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    members?: boolean | User$membersArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "lastLogin", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    auditLog?: boolean | User$auditLogArgs<ExtArgs>
    integrationResults?: boolean | User$integrationResultsArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    members?: boolean | User$membersArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      auditLog: Prisma.$AuditLogPayload<ExtArgs>[]
      integrationResults: Prisma.$IntegrationResultPayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      members: Prisma.$MemberPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLog<T extends User$auditLogArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    integrationResults<T extends User$integrationResultsArgs<ExtArgs> = {}>(args?: Subset<T, User$integrationResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends User$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends User$membersArgs<ExtArgs> = {}>(args?: Subset<T, User$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.auditLog
   */
  export type User$auditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.integrationResults
   */
  export type User$integrationResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    where?: IntegrationResultWhereInput
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    cursor?: IntegrationResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationResultScalarFieldEnum | IntegrationResultScalarFieldEnum[]
  }

  /**
   * User.invitations
   */
  export type User$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * User.members
   */
  export type User$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeTrainingVideoCompletion
   */

  export type AggregateEmployeeTrainingVideoCompletion = {
    _count: EmployeeTrainingVideoCompletionCountAggregateOutputType | null
    _min: EmployeeTrainingVideoCompletionMinAggregateOutputType | null
    _max: EmployeeTrainingVideoCompletionMaxAggregateOutputType | null
  }

  export type EmployeeTrainingVideoCompletionMinAggregateOutputType = {
    id: string | null
    completedAt: Date | null
    videoId: string | null
    memberId: string | null
  }

  export type EmployeeTrainingVideoCompletionMaxAggregateOutputType = {
    id: string | null
    completedAt: Date | null
    videoId: string | null
    memberId: string | null
  }

  export type EmployeeTrainingVideoCompletionCountAggregateOutputType = {
    id: number
    completedAt: number
    videoId: number
    memberId: number
    _all: number
  }


  export type EmployeeTrainingVideoCompletionMinAggregateInputType = {
    id?: true
    completedAt?: true
    videoId?: true
    memberId?: true
  }

  export type EmployeeTrainingVideoCompletionMaxAggregateInputType = {
    id?: true
    completedAt?: true
    videoId?: true
    memberId?: true
  }

  export type EmployeeTrainingVideoCompletionCountAggregateInputType = {
    id?: true
    completedAt?: true
    videoId?: true
    memberId?: true
    _all?: true
  }

  export type EmployeeTrainingVideoCompletionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTrainingVideoCompletion to aggregate.
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingVideoCompletions to fetch.
     */
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithRelationInput | EmployeeTrainingVideoCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeTrainingVideoCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingVideoCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingVideoCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeTrainingVideoCompletions
    **/
    _count?: true | EmployeeTrainingVideoCompletionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeTrainingVideoCompletionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeTrainingVideoCompletionMaxAggregateInputType
  }

  export type GetEmployeeTrainingVideoCompletionAggregateType<T extends EmployeeTrainingVideoCompletionAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeTrainingVideoCompletion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeTrainingVideoCompletion[P]>
      : GetScalarType<T[P], AggregateEmployeeTrainingVideoCompletion[P]>
  }




  export type EmployeeTrainingVideoCompletionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTrainingVideoCompletionWhereInput
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithAggregationInput | EmployeeTrainingVideoCompletionOrderByWithAggregationInput[]
    by: EmployeeTrainingVideoCompletionScalarFieldEnum[] | EmployeeTrainingVideoCompletionScalarFieldEnum
    having?: EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeTrainingVideoCompletionCountAggregateInputType | true
    _min?: EmployeeTrainingVideoCompletionMinAggregateInputType
    _max?: EmployeeTrainingVideoCompletionMaxAggregateInputType
  }

  export type EmployeeTrainingVideoCompletionGroupByOutputType = {
    id: string
    completedAt: Date | null
    videoId: string
    memberId: string
    _count: EmployeeTrainingVideoCompletionCountAggregateOutputType | null
    _min: EmployeeTrainingVideoCompletionMinAggregateOutputType | null
    _max: EmployeeTrainingVideoCompletionMaxAggregateOutputType | null
  }

  type GetEmployeeTrainingVideoCompletionGroupByPayload<T extends EmployeeTrainingVideoCompletionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeTrainingVideoCompletionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeTrainingVideoCompletionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeTrainingVideoCompletionGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeTrainingVideoCompletionGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeTrainingVideoCompletionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    completedAt?: boolean
    videoId?: boolean
    memberId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingVideoCompletion"]>

  export type EmployeeTrainingVideoCompletionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    completedAt?: boolean
    videoId?: boolean
    memberId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingVideoCompletion"]>

  export type EmployeeTrainingVideoCompletionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    completedAt?: boolean
    videoId?: boolean
    memberId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeTrainingVideoCompletion"]>

  export type EmployeeTrainingVideoCompletionSelectScalar = {
    id?: boolean
    completedAt?: boolean
    videoId?: boolean
    memberId?: boolean
  }

  export type EmployeeTrainingVideoCompletionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "completedAt" | "videoId" | "memberId", ExtArgs["result"]["employeeTrainingVideoCompletion"]>
  export type EmployeeTrainingVideoCompletionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type EmployeeTrainingVideoCompletionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type EmployeeTrainingVideoCompletionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $EmployeeTrainingVideoCompletionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeTrainingVideoCompletion"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      completedAt: Date | null
      videoId: string
      memberId: string
    }, ExtArgs["result"]["employeeTrainingVideoCompletion"]>
    composites: {}
  }

  type EmployeeTrainingVideoCompletionGetPayload<S extends boolean | null | undefined | EmployeeTrainingVideoCompletionDefaultArgs> = $Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload, S>

  type EmployeeTrainingVideoCompletionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeTrainingVideoCompletionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeTrainingVideoCompletionCountAggregateInputType | true
    }

  export interface EmployeeTrainingVideoCompletionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeTrainingVideoCompletion'], meta: { name: 'EmployeeTrainingVideoCompletion' } }
    /**
     * Find zero or one EmployeeTrainingVideoCompletion that matches the filter.
     * @param {EmployeeTrainingVideoCompletionFindUniqueArgs} args - Arguments to find a EmployeeTrainingVideoCompletion
     * @example
     * // Get one EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeTrainingVideoCompletionFindUniqueArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionFindUniqueArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmployeeTrainingVideoCompletion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeTrainingVideoCompletionFindUniqueOrThrowArgs} args - Arguments to find a EmployeeTrainingVideoCompletion
     * @example
     * // Get one EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeTrainingVideoCompletionFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTrainingVideoCompletion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionFindFirstArgs} args - Arguments to find a EmployeeTrainingVideoCompletion
     * @example
     * // Get one EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeTrainingVideoCompletionFindFirstArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionFindFirstArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmployeeTrainingVideoCompletion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionFindFirstOrThrowArgs} args - Arguments to find a EmployeeTrainingVideoCompletion
     * @example
     * // Get one EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeTrainingVideoCompletionFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmployeeTrainingVideoCompletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletions = await prisma.employeeTrainingVideoCompletion.findMany()
     * 
     * // Get first 10 EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletions = await prisma.employeeTrainingVideoCompletion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeTrainingVideoCompletionWithIdOnly = await prisma.employeeTrainingVideoCompletion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeTrainingVideoCompletionFindManyArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmployeeTrainingVideoCompletion.
     * @param {EmployeeTrainingVideoCompletionCreateArgs} args - Arguments to create a EmployeeTrainingVideoCompletion.
     * @example
     * // Create one EmployeeTrainingVideoCompletion
     * const EmployeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.create({
     *   data: {
     *     // ... data to create a EmployeeTrainingVideoCompletion
     *   }
     * })
     * 
     */
    create<T extends EmployeeTrainingVideoCompletionCreateArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionCreateArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmployeeTrainingVideoCompletions.
     * @param {EmployeeTrainingVideoCompletionCreateManyArgs} args - Arguments to create many EmployeeTrainingVideoCompletions.
     * @example
     * // Create many EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeTrainingVideoCompletionCreateManyArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmployeeTrainingVideoCompletions and returns the data saved in the database.
     * @param {EmployeeTrainingVideoCompletionCreateManyAndReturnArgs} args - Arguments to create many EmployeeTrainingVideoCompletions.
     * @example
     * // Create many EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmployeeTrainingVideoCompletions and only return the `id`
     * const employeeTrainingVideoCompletionWithIdOnly = await prisma.employeeTrainingVideoCompletion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeTrainingVideoCompletionCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmployeeTrainingVideoCompletion.
     * @param {EmployeeTrainingVideoCompletionDeleteArgs} args - Arguments to delete one EmployeeTrainingVideoCompletion.
     * @example
     * // Delete one EmployeeTrainingVideoCompletion
     * const EmployeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.delete({
     *   where: {
     *     // ... filter to delete one EmployeeTrainingVideoCompletion
     *   }
     * })
     * 
     */
    delete<T extends EmployeeTrainingVideoCompletionDeleteArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionDeleteArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmployeeTrainingVideoCompletion.
     * @param {EmployeeTrainingVideoCompletionUpdateArgs} args - Arguments to update one EmployeeTrainingVideoCompletion.
     * @example
     * // Update one EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeTrainingVideoCompletionUpdateArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionUpdateArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmployeeTrainingVideoCompletions.
     * @param {EmployeeTrainingVideoCompletionDeleteManyArgs} args - Arguments to filter EmployeeTrainingVideoCompletions to delete.
     * @example
     * // Delete a few EmployeeTrainingVideoCompletions
     * const { count } = await prisma.employeeTrainingVideoCompletion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeTrainingVideoCompletionDeleteManyArgs>(args?: SelectSubset<T, EmployeeTrainingVideoCompletionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTrainingVideoCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeTrainingVideoCompletionUpdateManyArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTrainingVideoCompletions and returns the data updated in the database.
     * @param {EmployeeTrainingVideoCompletionUpdateManyAndReturnArgs} args - Arguments to update many EmployeeTrainingVideoCompletions.
     * @example
     * // Update many EmployeeTrainingVideoCompletions
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmployeeTrainingVideoCompletions and only return the `id`
     * const employeeTrainingVideoCompletionWithIdOnly = await prisma.employeeTrainingVideoCompletion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeTrainingVideoCompletionUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmployeeTrainingVideoCompletion.
     * @param {EmployeeTrainingVideoCompletionUpsertArgs} args - Arguments to update or create a EmployeeTrainingVideoCompletion.
     * @example
     * // Update or create a EmployeeTrainingVideoCompletion
     * const employeeTrainingVideoCompletion = await prisma.employeeTrainingVideoCompletion.upsert({
     *   create: {
     *     // ... data to create a EmployeeTrainingVideoCompletion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeTrainingVideoCompletion we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeTrainingVideoCompletionUpsertArgs>(args: SelectSubset<T, EmployeeTrainingVideoCompletionUpsertArgs<ExtArgs>>): Prisma__EmployeeTrainingVideoCompletionClient<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmployeeTrainingVideoCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionCountArgs} args - Arguments to filter EmployeeTrainingVideoCompletions to count.
     * @example
     * // Count the number of EmployeeTrainingVideoCompletions
     * const count = await prisma.employeeTrainingVideoCompletion.count({
     *   where: {
     *     // ... the filter for the EmployeeTrainingVideoCompletions we want to count
     *   }
     * })
    **/
    count<T extends EmployeeTrainingVideoCompletionCountArgs>(
      args?: Subset<T, EmployeeTrainingVideoCompletionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeTrainingVideoCompletionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeTrainingVideoCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeTrainingVideoCompletionAggregateArgs>(args: Subset<T, EmployeeTrainingVideoCompletionAggregateArgs>): Prisma.PrismaPromise<GetEmployeeTrainingVideoCompletionAggregateType<T>>

    /**
     * Group by EmployeeTrainingVideoCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTrainingVideoCompletionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeTrainingVideoCompletionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeTrainingVideoCompletionGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeTrainingVideoCompletionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeTrainingVideoCompletionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeTrainingVideoCompletionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeTrainingVideoCompletion model
   */
  readonly fields: EmployeeTrainingVideoCompletionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeTrainingVideoCompletion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeTrainingVideoCompletionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeTrainingVideoCompletion model
   */
  interface EmployeeTrainingVideoCompletionFieldRefs {
    readonly id: FieldRef<"EmployeeTrainingVideoCompletion", 'String'>
    readonly completedAt: FieldRef<"EmployeeTrainingVideoCompletion", 'DateTime'>
    readonly videoId: FieldRef<"EmployeeTrainingVideoCompletion", 'String'>
    readonly memberId: FieldRef<"EmployeeTrainingVideoCompletion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeTrainingVideoCompletion findUnique
   */
  export type EmployeeTrainingVideoCompletionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingVideoCompletion to fetch.
     */
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
  }

  /**
   * EmployeeTrainingVideoCompletion findUniqueOrThrow
   */
  export type EmployeeTrainingVideoCompletionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingVideoCompletion to fetch.
     */
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
  }

  /**
   * EmployeeTrainingVideoCompletion findFirst
   */
  export type EmployeeTrainingVideoCompletionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingVideoCompletion to fetch.
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingVideoCompletions to fetch.
     */
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithRelationInput | EmployeeTrainingVideoCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTrainingVideoCompletions.
     */
    cursor?: EmployeeTrainingVideoCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingVideoCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingVideoCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTrainingVideoCompletions.
     */
    distinct?: EmployeeTrainingVideoCompletionScalarFieldEnum | EmployeeTrainingVideoCompletionScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingVideoCompletion findFirstOrThrow
   */
  export type EmployeeTrainingVideoCompletionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingVideoCompletion to fetch.
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingVideoCompletions to fetch.
     */
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithRelationInput | EmployeeTrainingVideoCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTrainingVideoCompletions.
     */
    cursor?: EmployeeTrainingVideoCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingVideoCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingVideoCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTrainingVideoCompletions.
     */
    distinct?: EmployeeTrainingVideoCompletionScalarFieldEnum | EmployeeTrainingVideoCompletionScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingVideoCompletion findMany
   */
  export type EmployeeTrainingVideoCompletionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeTrainingVideoCompletions to fetch.
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTrainingVideoCompletions to fetch.
     */
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithRelationInput | EmployeeTrainingVideoCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeTrainingVideoCompletions.
     */
    cursor?: EmployeeTrainingVideoCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTrainingVideoCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTrainingVideoCompletions.
     */
    skip?: number
    distinct?: EmployeeTrainingVideoCompletionScalarFieldEnum | EmployeeTrainingVideoCompletionScalarFieldEnum[]
  }

  /**
   * EmployeeTrainingVideoCompletion create
   */
  export type EmployeeTrainingVideoCompletionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeTrainingVideoCompletion.
     */
    data: XOR<EmployeeTrainingVideoCompletionCreateInput, EmployeeTrainingVideoCompletionUncheckedCreateInput>
  }

  /**
   * EmployeeTrainingVideoCompletion createMany
   */
  export type EmployeeTrainingVideoCompletionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeTrainingVideoCompletions.
     */
    data: EmployeeTrainingVideoCompletionCreateManyInput | EmployeeTrainingVideoCompletionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeTrainingVideoCompletion createManyAndReturn
   */
  export type EmployeeTrainingVideoCompletionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * The data used to create many EmployeeTrainingVideoCompletions.
     */
    data: EmployeeTrainingVideoCompletionCreateManyInput | EmployeeTrainingVideoCompletionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTrainingVideoCompletion update
   */
  export type EmployeeTrainingVideoCompletionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeTrainingVideoCompletion.
     */
    data: XOR<EmployeeTrainingVideoCompletionUpdateInput, EmployeeTrainingVideoCompletionUncheckedUpdateInput>
    /**
     * Choose, which EmployeeTrainingVideoCompletion to update.
     */
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
  }

  /**
   * EmployeeTrainingVideoCompletion updateMany
   */
  export type EmployeeTrainingVideoCompletionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeTrainingVideoCompletions.
     */
    data: XOR<EmployeeTrainingVideoCompletionUpdateManyMutationInput, EmployeeTrainingVideoCompletionUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTrainingVideoCompletions to update
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * Limit how many EmployeeTrainingVideoCompletions to update.
     */
    limit?: number
  }

  /**
   * EmployeeTrainingVideoCompletion updateManyAndReturn
   */
  export type EmployeeTrainingVideoCompletionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * The data used to update EmployeeTrainingVideoCompletions.
     */
    data: XOR<EmployeeTrainingVideoCompletionUpdateManyMutationInput, EmployeeTrainingVideoCompletionUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTrainingVideoCompletions to update
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * Limit how many EmployeeTrainingVideoCompletions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployeeTrainingVideoCompletion upsert
   */
  export type EmployeeTrainingVideoCompletionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeTrainingVideoCompletion to update in case it exists.
     */
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
    /**
     * In case the EmployeeTrainingVideoCompletion found by the `where` argument doesn't exist, create a new EmployeeTrainingVideoCompletion with this data.
     */
    create: XOR<EmployeeTrainingVideoCompletionCreateInput, EmployeeTrainingVideoCompletionUncheckedCreateInput>
    /**
     * In case the EmployeeTrainingVideoCompletion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeTrainingVideoCompletionUpdateInput, EmployeeTrainingVideoCompletionUncheckedUpdateInput>
  }

  /**
   * EmployeeTrainingVideoCompletion delete
   */
  export type EmployeeTrainingVideoCompletionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    /**
     * Filter which EmployeeTrainingVideoCompletion to delete.
     */
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
  }

  /**
   * EmployeeTrainingVideoCompletion deleteMany
   */
  export type EmployeeTrainingVideoCompletionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTrainingVideoCompletions to delete
     */
    where?: EmployeeTrainingVideoCompletionWhereInput
    /**
     * Limit how many EmployeeTrainingVideoCompletions to delete.
     */
    limit?: number
  }

  /**
   * EmployeeTrainingVideoCompletion without action
   */
  export type EmployeeTrainingVideoCompletionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    activeOrganizationId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    activeOrganizationId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    activeOrganizationId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    activeOrganizationId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    activeOrganizationId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    activeOrganizationId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    activeOrganizationId: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    activeOrganizationId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "activeOrganizationId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
      activeOrganizationId: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly activeOrganizationId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    department: $Enums.Departments | null
    isActive: boolean | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    department: $Enums.Departments | null
    isActive: boolean | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    role: number
    createdAt: number
    department: number
    isActive: number
    _all: number
  }


  export type MemberMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    department?: true
    isActive?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    department?: true
    isActive?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    department?: true
    isActive?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt: Date
    department: $Enums.Departments
    isActive: boolean
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    department?: boolean
    isActive?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    EmployeeTrainingVideoCompletion?: boolean | Member$EmployeeTrainingVideoCompletionArgs<ExtArgs>
    Evidence?: boolean | Member$EvidenceArgs<ExtArgs>
    Policy?: boolean | Member$PolicyArgs<ExtArgs>
    Risk?: boolean | Member$RiskArgs<ExtArgs>
    Task?: boolean | Member$TaskArgs<ExtArgs>
    Vendor?: boolean | Member$VendorArgs<ExtArgs>
    comments?: boolean | Member$commentsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    department?: boolean
    isActive?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    department?: boolean
    isActive?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    department?: boolean
    isActive?: boolean
  }

  export type MemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "role" | "createdAt" | "department" | "isActive", ExtArgs["result"]["member"]>
  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    EmployeeTrainingVideoCompletion?: boolean | Member$EmployeeTrainingVideoCompletionArgs<ExtArgs>
    Evidence?: boolean | Member$EvidenceArgs<ExtArgs>
    Policy?: boolean | Member$PolicyArgs<ExtArgs>
    Risk?: boolean | Member$RiskArgs<ExtArgs>
    Task?: boolean | Member$TaskArgs<ExtArgs>
    Vendor?: boolean | Member$VendorArgs<ExtArgs>
    comments?: boolean | Member$commentsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      EmployeeTrainingVideoCompletion: Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>[]
      Evidence: Prisma.$EvidencePayload<ExtArgs>[]
      Policy: Prisma.$PolicyPayload<ExtArgs>[]
      Risk: Prisma.$RiskPayload<ExtArgs>[]
      Task: Prisma.$TaskPayload<ExtArgs>[]
      Vendor: Prisma.$VendorPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      role: $Enums.Role
      createdAt: Date
      department: $Enums.Departments
      isActive: boolean
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members and returns the data updated in the database.
     * @param {MemberUpdateManyAndReturnArgs} args - Arguments to update many Members.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    EmployeeTrainingVideoCompletion<T extends Member$EmployeeTrainingVideoCompletionArgs<ExtArgs> = {}>(args?: Subset<T, Member$EmployeeTrainingVideoCompletionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTrainingVideoCompletionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Evidence<T extends Member$EvidenceArgs<ExtArgs> = {}>(args?: Subset<T, Member$EvidenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Policy<T extends Member$PolicyArgs<ExtArgs> = {}>(args?: Subset<T, Member$PolicyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Risk<T extends Member$RiskArgs<ExtArgs> = {}>(args?: Subset<T, Member$RiskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Task<T extends Member$TaskArgs<ExtArgs> = {}>(args?: Subset<T, Member$TaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Vendor<T extends Member$VendorArgs<ExtArgs> = {}>(args?: Subset<T, Member$VendorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Member$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Member$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'String'>
    readonly organizationId: FieldRef<"Member", 'String'>
    readonly userId: FieldRef<"Member", 'String'>
    readonly role: FieldRef<"Member", 'Role'>
    readonly createdAt: FieldRef<"Member", 'DateTime'>
    readonly department: FieldRef<"Member", 'Departments'>
    readonly isActive: FieldRef<"Member", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member updateManyAndReturn
   */
  export type MemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to delete.
     */
    limit?: number
  }

  /**
   * Member.EmployeeTrainingVideoCompletion
   */
  export type Member$EmployeeTrainingVideoCompletionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTrainingVideoCompletion
     */
    select?: EmployeeTrainingVideoCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmployeeTrainingVideoCompletion
     */
    omit?: EmployeeTrainingVideoCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeTrainingVideoCompletionInclude<ExtArgs> | null
    where?: EmployeeTrainingVideoCompletionWhereInput
    orderBy?: EmployeeTrainingVideoCompletionOrderByWithRelationInput | EmployeeTrainingVideoCompletionOrderByWithRelationInput[]
    cursor?: EmployeeTrainingVideoCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeTrainingVideoCompletionScalarFieldEnum | EmployeeTrainingVideoCompletionScalarFieldEnum[]
  }

  /**
   * Member.Evidence
   */
  export type Member$EvidenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    where?: EvidenceWhereInput
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    cursor?: EvidenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EvidenceScalarFieldEnum | EvidenceScalarFieldEnum[]
  }

  /**
   * Member.Policy
   */
  export type Member$PolicyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    where?: PolicyWhereInput
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    cursor?: PolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }

  /**
   * Member.Risk
   */
  export type Member$RiskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    where?: RiskWhereInput
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    cursor?: RiskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RiskScalarFieldEnum | RiskScalarFieldEnum[]
  }

  /**
   * Member.Task
   */
  export type Member$TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Member.Vendor
   */
  export type Member$VendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    cursor?: VendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Member.comments
   */
  export type Member$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    role: $Enums.Role | null
    status: string | null
    expiresAt: Date | null
    inviterId: string | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    role: $Enums.Role | null
    status: string | null
    expiresAt: Date | null
    inviterId: string | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    organizationId: number
    email: number
    role: number
    status: number
    expiresAt: number
    inviterId: number
    _all: number
  }


  export type InvitationMinAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    id: string
    organizationId: string
    email: string
    role: $Enums.Role | null
    status: string
    expiresAt: Date
    inviterId: string
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectScalar = {
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
  }

  export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "email" | "role" | "status" | "expiresAt" | "inviterId", ExtArgs["result"]["invitation"]>
  export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      email: string
      role: $Enums.Role | null
      status: string
      expiresAt: Date
      inviterId: string
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invitations and returns the data saved in the database.
     * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations and returns the data updated in the database.
     * @param {InvitationUpdateManyAndReturnArgs} args - Arguments to update many Invitations.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, InvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */
  interface InvitationFieldRefs {
    readonly id: FieldRef<"Invitation", 'String'>
    readonly organizationId: FieldRef<"Invitation", 'String'>
    readonly email: FieldRef<"Invitation", 'String'>
    readonly role: FieldRef<"Invitation", 'Role'>
    readonly status: FieldRef<"Invitation", 'String'>
    readonly expiresAt: FieldRef<"Invitation", 'DateTime'>
    readonly inviterId: FieldRef<"Invitation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation createManyAndReturn
   */
  export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
  }

  /**
   * Invitation updateManyAndReturn
   */
  export type InvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to delete.
     */
    limit?: number
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    entityId: string | null
    createdAt: Date | null
    authorId: string | null
    organizationId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    entityId: string | null
    createdAt: Date | null
    authorId: string | null
    organizationId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    entityId: number
    createdAt: number
    authorId: number
    organizationId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    entityId?: true
    createdAt?: true
    authorId?: true
    organizationId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    entityId?: true
    createdAt?: true
    authorId?: true
    organizationId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    entityId?: true
    createdAt?: true
    authorId?: true
    organizationId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    entityId: string
    createdAt: Date
    authorId: string
    organizationId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    entityId?: boolean
    createdAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    entityId?: boolean
    createdAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    entityId?: boolean
    createdAt?: boolean
    authorId?: boolean
    organizationId?: boolean
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    entityId?: boolean
    createdAt?: boolean
    authorId?: boolean
    organizationId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "entityId" | "createdAt" | "authorId" | "organizationId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | MemberDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$MemberPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      entityId: string
      createdAt: Date
      authorId: string
      organizationId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly entityId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly organizationId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Control
   */

  export type AggregateControl = {
    _count: ControlCountAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  export type ControlMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    lastReviewDate: Date | null
    nextReviewDate: Date | null
    organizationId: string | null
  }

  export type ControlMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    lastReviewDate: Date | null
    nextReviewDate: Date | null
    organizationId: string | null
  }

  export type ControlCountAggregateOutputType = {
    id: number
    name: number
    description: number
    lastReviewDate: number
    nextReviewDate: number
    organizationId: number
    _all: number
  }


  export type ControlMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    lastReviewDate?: true
    nextReviewDate?: true
    organizationId?: true
  }

  export type ControlMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    lastReviewDate?: true
    nextReviewDate?: true
    organizationId?: true
  }

  export type ControlCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    lastReviewDate?: true
    nextReviewDate?: true
    organizationId?: true
    _all?: true
  }

  export type ControlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Control to aggregate.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Controls
    **/
    _count?: true | ControlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlMaxAggregateInputType
  }

  export type GetControlAggregateType<T extends ControlAggregateArgs> = {
        [P in keyof T & keyof AggregateControl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControl[P]>
      : GetScalarType<T[P], AggregateControl[P]>
  }




  export type ControlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithAggregationInput | ControlOrderByWithAggregationInput[]
    by: ControlScalarFieldEnum[] | ControlScalarFieldEnum
    having?: ControlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlCountAggregateInputType | true
    _min?: ControlMinAggregateInputType
    _max?: ControlMaxAggregateInputType
  }

  export type ControlGroupByOutputType = {
    id: string
    name: string
    description: string
    lastReviewDate: Date | null
    nextReviewDate: Date | null
    organizationId: string
    _count: ControlCountAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  type GetControlGroupByPayload<T extends ControlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlGroupByOutputType[P]>
            : GetScalarType<T[P], ControlGroupByOutputType[P]>
        }
      >
    >


  export type ControlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    lastReviewDate?: boolean
    nextReviewDate?: boolean
    organizationId?: boolean
    frameworkInstances?: boolean | Control$frameworkInstancesArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    artifacts?: boolean | Control$artifactsArgs<ExtArgs>
    requirementsMapped?: boolean | Control$requirementsMappedArgs<ExtArgs>
    _count?: boolean | ControlCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["control"]>

  export type ControlSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    lastReviewDate?: boolean
    nextReviewDate?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["control"]>

  export type ControlSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    lastReviewDate?: boolean
    nextReviewDate?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["control"]>

  export type ControlSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    lastReviewDate?: boolean
    nextReviewDate?: boolean
    organizationId?: boolean
  }

  export type ControlOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "lastReviewDate" | "nextReviewDate" | "organizationId", ExtArgs["result"]["control"]>
  export type ControlInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    frameworkInstances?: boolean | Control$frameworkInstancesArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    artifacts?: boolean | Control$artifactsArgs<ExtArgs>
    requirementsMapped?: boolean | Control$requirementsMappedArgs<ExtArgs>
    _count?: boolean | ControlCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ControlIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ControlIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ControlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Control"
    objects: {
      frameworkInstances: Prisma.$FrameworkInstancePayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      artifacts: Prisma.$ArtifactPayload<ExtArgs>[]
      requirementsMapped: Prisma.$RequirementMapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      lastReviewDate: Date | null
      nextReviewDate: Date | null
      organizationId: string
    }, ExtArgs["result"]["control"]>
    composites: {}
  }

  type ControlGetPayload<S extends boolean | null | undefined | ControlDefaultArgs> = $Result.GetResult<Prisma.$ControlPayload, S>

  type ControlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ControlFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ControlCountAggregateInputType | true
    }

  export interface ControlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Control'], meta: { name: 'Control' } }
    /**
     * Find zero or one Control that matches the filter.
     * @param {ControlFindUniqueArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ControlFindUniqueArgs>(args: SelectSubset<T, ControlFindUniqueArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Control that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ControlFindUniqueOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ControlFindUniqueOrThrowArgs>(args: SelectSubset<T, ControlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Control that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindFirstArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ControlFindFirstArgs>(args?: SelectSubset<T, ControlFindFirstArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Control that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindFirstOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ControlFindFirstOrThrowArgs>(args?: SelectSubset<T, ControlFindFirstOrThrowArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Controls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Controls
     * const controls = await prisma.control.findMany()
     * 
     * // Get first 10 Controls
     * const controls = await prisma.control.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlWithIdOnly = await prisma.control.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ControlFindManyArgs>(args?: SelectSubset<T, ControlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Control.
     * @param {ControlCreateArgs} args - Arguments to create a Control.
     * @example
     * // Create one Control
     * const Control = await prisma.control.create({
     *   data: {
     *     // ... data to create a Control
     *   }
     * })
     * 
     */
    create<T extends ControlCreateArgs>(args: SelectSubset<T, ControlCreateArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Controls.
     * @param {ControlCreateManyArgs} args - Arguments to create many Controls.
     * @example
     * // Create many Controls
     * const control = await prisma.control.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ControlCreateManyArgs>(args?: SelectSubset<T, ControlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Controls and returns the data saved in the database.
     * @param {ControlCreateManyAndReturnArgs} args - Arguments to create many Controls.
     * @example
     * // Create many Controls
     * const control = await prisma.control.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Controls and only return the `id`
     * const controlWithIdOnly = await prisma.control.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ControlCreateManyAndReturnArgs>(args?: SelectSubset<T, ControlCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Control.
     * @param {ControlDeleteArgs} args - Arguments to delete one Control.
     * @example
     * // Delete one Control
     * const Control = await prisma.control.delete({
     *   where: {
     *     // ... filter to delete one Control
     *   }
     * })
     * 
     */
    delete<T extends ControlDeleteArgs>(args: SelectSubset<T, ControlDeleteArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Control.
     * @param {ControlUpdateArgs} args - Arguments to update one Control.
     * @example
     * // Update one Control
     * const control = await prisma.control.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ControlUpdateArgs>(args: SelectSubset<T, ControlUpdateArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Controls.
     * @param {ControlDeleteManyArgs} args - Arguments to filter Controls to delete.
     * @example
     * // Delete a few Controls
     * const { count } = await prisma.control.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ControlDeleteManyArgs>(args?: SelectSubset<T, ControlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Controls
     * const control = await prisma.control.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ControlUpdateManyArgs>(args: SelectSubset<T, ControlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Controls and returns the data updated in the database.
     * @param {ControlUpdateManyAndReturnArgs} args - Arguments to update many Controls.
     * @example
     * // Update many Controls
     * const control = await prisma.control.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Controls and only return the `id`
     * const controlWithIdOnly = await prisma.control.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ControlUpdateManyAndReturnArgs>(args: SelectSubset<T, ControlUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Control.
     * @param {ControlUpsertArgs} args - Arguments to update or create a Control.
     * @example
     * // Update or create a Control
     * const control = await prisma.control.upsert({
     *   create: {
     *     // ... data to create a Control
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Control we want to update
     *   }
     * })
     */
    upsert<T extends ControlUpsertArgs>(args: SelectSubset<T, ControlUpsertArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlCountArgs} args - Arguments to filter Controls to count.
     * @example
     * // Count the number of Controls
     * const count = await prisma.control.count({
     *   where: {
     *     // ... the filter for the Controls we want to count
     *   }
     * })
    **/
    count<T extends ControlCountArgs>(
      args?: Subset<T, ControlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlAggregateArgs>(args: Subset<T, ControlAggregateArgs>): Prisma.PrismaPromise<GetControlAggregateType<T>>

    /**
     * Group by Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ControlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ControlGroupByArgs['orderBy'] }
        : { orderBy?: ControlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ControlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Control model
   */
  readonly fields: ControlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Control.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ControlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    frameworkInstances<T extends Control$frameworkInstancesArgs<ExtArgs> = {}>(args?: Subset<T, Control$frameworkInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    artifacts<T extends Control$artifactsArgs<ExtArgs> = {}>(args?: Subset<T, Control$artifactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requirementsMapped<T extends Control$requirementsMappedArgs<ExtArgs> = {}>(args?: Subset<T, Control$requirementsMappedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Control model
   */
  interface ControlFieldRefs {
    readonly id: FieldRef<"Control", 'String'>
    readonly name: FieldRef<"Control", 'String'>
    readonly description: FieldRef<"Control", 'String'>
    readonly lastReviewDate: FieldRef<"Control", 'DateTime'>
    readonly nextReviewDate: FieldRef<"Control", 'DateTime'>
    readonly organizationId: FieldRef<"Control", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Control findUnique
   */
  export type ControlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control findUniqueOrThrow
   */
  export type ControlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control findFirst
   */
  export type ControlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control findFirstOrThrow
   */
  export type ControlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control findMany
   */
  export type ControlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Controls to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control create
   */
  export type ControlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The data needed to create a Control.
     */
    data: XOR<ControlCreateInput, ControlUncheckedCreateInput>
  }

  /**
   * Control createMany
   */
  export type ControlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Controls.
     */
    data: ControlCreateManyInput | ControlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Control createManyAndReturn
   */
  export type ControlCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * The data used to create many Controls.
     */
    data: ControlCreateManyInput | ControlCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Control update
   */
  export type ControlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The data needed to update a Control.
     */
    data: XOR<ControlUpdateInput, ControlUncheckedUpdateInput>
    /**
     * Choose, which Control to update.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control updateMany
   */
  export type ControlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Controls.
     */
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyInput>
    /**
     * Filter which Controls to update
     */
    where?: ControlWhereInput
    /**
     * Limit how many Controls to update.
     */
    limit?: number
  }

  /**
   * Control updateManyAndReturn
   */
  export type ControlUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * The data used to update Controls.
     */
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyInput>
    /**
     * Filter which Controls to update
     */
    where?: ControlWhereInput
    /**
     * Limit how many Controls to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Control upsert
   */
  export type ControlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The filter to search for the Control to update in case it exists.
     */
    where: ControlWhereUniqueInput
    /**
     * In case the Control found by the `where` argument doesn't exist, create a new Control with this data.
     */
    create: XOR<ControlCreateInput, ControlUncheckedCreateInput>
    /**
     * In case the Control was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ControlUpdateInput, ControlUncheckedUpdateInput>
  }

  /**
   * Control delete
   */
  export type ControlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter which Control to delete.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control deleteMany
   */
  export type ControlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Controls to delete
     */
    where?: ControlWhereInput
    /**
     * Limit how many Controls to delete.
     */
    limit?: number
  }

  /**
   * Control.frameworkInstances
   */
  export type Control$frameworkInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    where?: FrameworkInstanceWhereInput
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    cursor?: FrameworkInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FrameworkInstanceScalarFieldEnum | FrameworkInstanceScalarFieldEnum[]
  }

  /**
   * Control.artifacts
   */
  export type Control$artifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    where?: ArtifactWhereInput
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    cursor?: ArtifactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Control.requirementsMapped
   */
  export type Control$requirementsMappedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    where?: RequirementMapWhereInput
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    cursor?: RequirementMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequirementMapScalarFieldEnum | RequirementMapScalarFieldEnum[]
  }

  /**
   * Control without action
   */
  export type ControlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
  }


  /**
   * Model Evidence
   */

  export type AggregateEvidence = {
    _count: EvidenceCountAggregateOutputType | null
    _min: EvidenceMinAggregateOutputType | null
    _max: EvidenceMaxAggregateOutputType | null
  }

  export type EvidenceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isNotRelevant: boolean | null
    frequency: $Enums.Frequency | null
    department: $Enums.Departments | null
    status: $Enums.EvidenceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    lastPublishedAt: Date | null
    assigneeId: string | null
    organizationId: string | null
  }

  export type EvidenceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isNotRelevant: boolean | null
    frequency: $Enums.Frequency | null
    department: $Enums.Departments | null
    status: $Enums.EvidenceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    lastPublishedAt: Date | null
    assigneeId: string | null
    organizationId: string | null
  }

  export type EvidenceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isNotRelevant: number
    additionalUrls: number
    fileUrls: number
    frequency: number
    department: number
    status: number
    createdAt: number
    updatedAt: number
    lastPublishedAt: number
    assigneeId: number
    organizationId: number
    _all: number
  }


  export type EvidenceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isNotRelevant?: true
    frequency?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    lastPublishedAt?: true
    assigneeId?: true
    organizationId?: true
  }

  export type EvidenceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isNotRelevant?: true
    frequency?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    lastPublishedAt?: true
    assigneeId?: true
    organizationId?: true
  }

  export type EvidenceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isNotRelevant?: true
    additionalUrls?: true
    fileUrls?: true
    frequency?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    lastPublishedAt?: true
    assigneeId?: true
    organizationId?: true
    _all?: true
  }

  export type EvidenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evidence to aggregate.
     */
    where?: EvidenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evidences to fetch.
     */
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EvidenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evidences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evidences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Evidences
    **/
    _count?: true | EvidenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EvidenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EvidenceMaxAggregateInputType
  }

  export type GetEvidenceAggregateType<T extends EvidenceAggregateArgs> = {
        [P in keyof T & keyof AggregateEvidence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvidence[P]>
      : GetScalarType<T[P], AggregateEvidence[P]>
  }




  export type EvidenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvidenceWhereInput
    orderBy?: EvidenceOrderByWithAggregationInput | EvidenceOrderByWithAggregationInput[]
    by: EvidenceScalarFieldEnum[] | EvidenceScalarFieldEnum
    having?: EvidenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EvidenceCountAggregateInputType | true
    _min?: EvidenceMinAggregateInputType
    _max?: EvidenceMaxAggregateInputType
  }

  export type EvidenceGroupByOutputType = {
    id: string
    name: string
    description: string
    isNotRelevant: boolean
    additionalUrls: string[]
    fileUrls: string[]
    frequency: $Enums.Frequency | null
    department: $Enums.Departments
    status: $Enums.EvidenceStatus | null
    createdAt: Date
    updatedAt: Date
    lastPublishedAt: Date | null
    assigneeId: string | null
    organizationId: string
    _count: EvidenceCountAggregateOutputType | null
    _min: EvidenceMinAggregateOutputType | null
    _max: EvidenceMaxAggregateOutputType | null
  }

  type GetEvidenceGroupByPayload<T extends EvidenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EvidenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EvidenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EvidenceGroupByOutputType[P]>
            : GetScalarType<T[P], EvidenceGroupByOutputType[P]>
        }
      >
    >


  export type EvidenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isNotRelevant?: boolean
    additionalUrls?: boolean
    fileUrls?: boolean
    frequency?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastPublishedAt?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    artifacts?: boolean | Evidence$artifactsArgs<ExtArgs>
    _count?: boolean | EvidenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evidence"]>

  export type EvidenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isNotRelevant?: boolean
    additionalUrls?: boolean
    fileUrls?: boolean
    frequency?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastPublishedAt?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evidence"]>

  export type EvidenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isNotRelevant?: boolean
    additionalUrls?: boolean
    fileUrls?: boolean
    frequency?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastPublishedAt?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evidence"]>

  export type EvidenceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isNotRelevant?: boolean
    additionalUrls?: boolean
    fileUrls?: boolean
    frequency?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastPublishedAt?: boolean
    assigneeId?: boolean
    organizationId?: boolean
  }

  export type EvidenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isNotRelevant" | "additionalUrls" | "fileUrls" | "frequency" | "department" | "status" | "createdAt" | "updatedAt" | "lastPublishedAt" | "assigneeId" | "organizationId", ExtArgs["result"]["evidence"]>
  export type EvidenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    artifacts?: boolean | Evidence$artifactsArgs<ExtArgs>
    _count?: boolean | EvidenceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EvidenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type EvidenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Evidence$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $EvidencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evidence"
    objects: {
      assignee: Prisma.$MemberPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
      artifacts: Prisma.$ArtifactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      isNotRelevant: boolean
      additionalUrls: string[]
      fileUrls: string[]
      frequency: $Enums.Frequency | null
      department: $Enums.Departments
      status: $Enums.EvidenceStatus | null
      createdAt: Date
      updatedAt: Date
      lastPublishedAt: Date | null
      assigneeId: string | null
      organizationId: string
    }, ExtArgs["result"]["evidence"]>
    composites: {}
  }

  type EvidenceGetPayload<S extends boolean | null | undefined | EvidenceDefaultArgs> = $Result.GetResult<Prisma.$EvidencePayload, S>

  type EvidenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EvidenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EvidenceCountAggregateInputType | true
    }

  export interface EvidenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evidence'], meta: { name: 'Evidence' } }
    /**
     * Find zero or one Evidence that matches the filter.
     * @param {EvidenceFindUniqueArgs} args - Arguments to find a Evidence
     * @example
     * // Get one Evidence
     * const evidence = await prisma.evidence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EvidenceFindUniqueArgs>(args: SelectSubset<T, EvidenceFindUniqueArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Evidence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EvidenceFindUniqueOrThrowArgs} args - Arguments to find a Evidence
     * @example
     * // Get one Evidence
     * const evidence = await prisma.evidence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EvidenceFindUniqueOrThrowArgs>(args: SelectSubset<T, EvidenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evidence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceFindFirstArgs} args - Arguments to find a Evidence
     * @example
     * // Get one Evidence
     * const evidence = await prisma.evidence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EvidenceFindFirstArgs>(args?: SelectSubset<T, EvidenceFindFirstArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evidence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceFindFirstOrThrowArgs} args - Arguments to find a Evidence
     * @example
     * // Get one Evidence
     * const evidence = await prisma.evidence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EvidenceFindFirstOrThrowArgs>(args?: SelectSubset<T, EvidenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Evidences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Evidences
     * const evidences = await prisma.evidence.findMany()
     * 
     * // Get first 10 Evidences
     * const evidences = await prisma.evidence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const evidenceWithIdOnly = await prisma.evidence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EvidenceFindManyArgs>(args?: SelectSubset<T, EvidenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Evidence.
     * @param {EvidenceCreateArgs} args - Arguments to create a Evidence.
     * @example
     * // Create one Evidence
     * const Evidence = await prisma.evidence.create({
     *   data: {
     *     // ... data to create a Evidence
     *   }
     * })
     * 
     */
    create<T extends EvidenceCreateArgs>(args: SelectSubset<T, EvidenceCreateArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Evidences.
     * @param {EvidenceCreateManyArgs} args - Arguments to create many Evidences.
     * @example
     * // Create many Evidences
     * const evidence = await prisma.evidence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EvidenceCreateManyArgs>(args?: SelectSubset<T, EvidenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Evidences and returns the data saved in the database.
     * @param {EvidenceCreateManyAndReturnArgs} args - Arguments to create many Evidences.
     * @example
     * // Create many Evidences
     * const evidence = await prisma.evidence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Evidences and only return the `id`
     * const evidenceWithIdOnly = await prisma.evidence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EvidenceCreateManyAndReturnArgs>(args?: SelectSubset<T, EvidenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Evidence.
     * @param {EvidenceDeleteArgs} args - Arguments to delete one Evidence.
     * @example
     * // Delete one Evidence
     * const Evidence = await prisma.evidence.delete({
     *   where: {
     *     // ... filter to delete one Evidence
     *   }
     * })
     * 
     */
    delete<T extends EvidenceDeleteArgs>(args: SelectSubset<T, EvidenceDeleteArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Evidence.
     * @param {EvidenceUpdateArgs} args - Arguments to update one Evidence.
     * @example
     * // Update one Evidence
     * const evidence = await prisma.evidence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EvidenceUpdateArgs>(args: SelectSubset<T, EvidenceUpdateArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Evidences.
     * @param {EvidenceDeleteManyArgs} args - Arguments to filter Evidences to delete.
     * @example
     * // Delete a few Evidences
     * const { count } = await prisma.evidence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EvidenceDeleteManyArgs>(args?: SelectSubset<T, EvidenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evidences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Evidences
     * const evidence = await prisma.evidence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EvidenceUpdateManyArgs>(args: SelectSubset<T, EvidenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evidences and returns the data updated in the database.
     * @param {EvidenceUpdateManyAndReturnArgs} args - Arguments to update many Evidences.
     * @example
     * // Update many Evidences
     * const evidence = await prisma.evidence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Evidences and only return the `id`
     * const evidenceWithIdOnly = await prisma.evidence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EvidenceUpdateManyAndReturnArgs>(args: SelectSubset<T, EvidenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Evidence.
     * @param {EvidenceUpsertArgs} args - Arguments to update or create a Evidence.
     * @example
     * // Update or create a Evidence
     * const evidence = await prisma.evidence.upsert({
     *   create: {
     *     // ... data to create a Evidence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evidence we want to update
     *   }
     * })
     */
    upsert<T extends EvidenceUpsertArgs>(args: SelectSubset<T, EvidenceUpsertArgs<ExtArgs>>): Prisma__EvidenceClient<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Evidences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceCountArgs} args - Arguments to filter Evidences to count.
     * @example
     * // Count the number of Evidences
     * const count = await prisma.evidence.count({
     *   where: {
     *     // ... the filter for the Evidences we want to count
     *   }
     * })
    **/
    count<T extends EvidenceCountArgs>(
      args?: Subset<T, EvidenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EvidenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evidence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EvidenceAggregateArgs>(args: Subset<T, EvidenceAggregateArgs>): Prisma.PrismaPromise<GetEvidenceAggregateType<T>>

    /**
     * Group by Evidence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvidenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EvidenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EvidenceGroupByArgs['orderBy'] }
        : { orderBy?: EvidenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EvidenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvidenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evidence model
   */
  readonly fields: EvidenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evidence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EvidenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignee<T extends Evidence$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Evidence$assigneeArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    artifacts<T extends Evidence$artifactsArgs<ExtArgs> = {}>(args?: Subset<T, Evidence$artifactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Evidence model
   */
  interface EvidenceFieldRefs {
    readonly id: FieldRef<"Evidence", 'String'>
    readonly name: FieldRef<"Evidence", 'String'>
    readonly description: FieldRef<"Evidence", 'String'>
    readonly isNotRelevant: FieldRef<"Evidence", 'Boolean'>
    readonly additionalUrls: FieldRef<"Evidence", 'String[]'>
    readonly fileUrls: FieldRef<"Evidence", 'String[]'>
    readonly frequency: FieldRef<"Evidence", 'Frequency'>
    readonly department: FieldRef<"Evidence", 'Departments'>
    readonly status: FieldRef<"Evidence", 'EvidenceStatus'>
    readonly createdAt: FieldRef<"Evidence", 'DateTime'>
    readonly updatedAt: FieldRef<"Evidence", 'DateTime'>
    readonly lastPublishedAt: FieldRef<"Evidence", 'DateTime'>
    readonly assigneeId: FieldRef<"Evidence", 'String'>
    readonly organizationId: FieldRef<"Evidence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Evidence findUnique
   */
  export type EvidenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter, which Evidence to fetch.
     */
    where: EvidenceWhereUniqueInput
  }

  /**
   * Evidence findUniqueOrThrow
   */
  export type EvidenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter, which Evidence to fetch.
     */
    where: EvidenceWhereUniqueInput
  }

  /**
   * Evidence findFirst
   */
  export type EvidenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter, which Evidence to fetch.
     */
    where?: EvidenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evidences to fetch.
     */
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evidences.
     */
    cursor?: EvidenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evidences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evidences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evidences.
     */
    distinct?: EvidenceScalarFieldEnum | EvidenceScalarFieldEnum[]
  }

  /**
   * Evidence findFirstOrThrow
   */
  export type EvidenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter, which Evidence to fetch.
     */
    where?: EvidenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evidences to fetch.
     */
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evidences.
     */
    cursor?: EvidenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evidences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evidences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evidences.
     */
    distinct?: EvidenceScalarFieldEnum | EvidenceScalarFieldEnum[]
  }

  /**
   * Evidence findMany
   */
  export type EvidenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter, which Evidences to fetch.
     */
    where?: EvidenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evidences to fetch.
     */
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Evidences.
     */
    cursor?: EvidenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evidences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evidences.
     */
    skip?: number
    distinct?: EvidenceScalarFieldEnum | EvidenceScalarFieldEnum[]
  }

  /**
   * Evidence create
   */
  export type EvidenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Evidence.
     */
    data: XOR<EvidenceCreateInput, EvidenceUncheckedCreateInput>
  }

  /**
   * Evidence createMany
   */
  export type EvidenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Evidences.
     */
    data: EvidenceCreateManyInput | EvidenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Evidence createManyAndReturn
   */
  export type EvidenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * The data used to create many Evidences.
     */
    data: EvidenceCreateManyInput | EvidenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evidence update
   */
  export type EvidenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Evidence.
     */
    data: XOR<EvidenceUpdateInput, EvidenceUncheckedUpdateInput>
    /**
     * Choose, which Evidence to update.
     */
    where: EvidenceWhereUniqueInput
  }

  /**
   * Evidence updateMany
   */
  export type EvidenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Evidences.
     */
    data: XOR<EvidenceUpdateManyMutationInput, EvidenceUncheckedUpdateManyInput>
    /**
     * Filter which Evidences to update
     */
    where?: EvidenceWhereInput
    /**
     * Limit how many Evidences to update.
     */
    limit?: number
  }

  /**
   * Evidence updateManyAndReturn
   */
  export type EvidenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * The data used to update Evidences.
     */
    data: XOR<EvidenceUpdateManyMutationInput, EvidenceUncheckedUpdateManyInput>
    /**
     * Filter which Evidences to update
     */
    where?: EvidenceWhereInput
    /**
     * Limit how many Evidences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evidence upsert
   */
  export type EvidenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Evidence to update in case it exists.
     */
    where: EvidenceWhereUniqueInput
    /**
     * In case the Evidence found by the `where` argument doesn't exist, create a new Evidence with this data.
     */
    create: XOR<EvidenceCreateInput, EvidenceUncheckedCreateInput>
    /**
     * In case the Evidence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EvidenceUpdateInput, EvidenceUncheckedUpdateInput>
  }

  /**
   * Evidence delete
   */
  export type EvidenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    /**
     * Filter which Evidence to delete.
     */
    where: EvidenceWhereUniqueInput
  }

  /**
   * Evidence deleteMany
   */
  export type EvidenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evidences to delete
     */
    where?: EvidenceWhereInput
    /**
     * Limit how many Evidences to delete.
     */
    limit?: number
  }

  /**
   * Evidence.assignee
   */
  export type Evidence$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Evidence.artifacts
   */
  export type Evidence$artifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    where?: ArtifactWhereInput
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    cursor?: ArtifactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Evidence without action
   */
  export type EvidenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
  }


  /**
   * Model FrameworkInstance
   */

  export type AggregateFrameworkInstance = {
    _count: FrameworkInstanceCountAggregateOutputType | null
    _min: FrameworkInstanceMinAggregateOutputType | null
    _max: FrameworkInstanceMaxAggregateOutputType | null
  }

  export type FrameworkInstanceMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    frameworkId: $Enums.FrameworkId | null
  }

  export type FrameworkInstanceMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    frameworkId: $Enums.FrameworkId | null
  }

  export type FrameworkInstanceCountAggregateOutputType = {
    id: number
    organizationId: number
    frameworkId: number
    _all: number
  }


  export type FrameworkInstanceMinAggregateInputType = {
    id?: true
    organizationId?: true
    frameworkId?: true
  }

  export type FrameworkInstanceMaxAggregateInputType = {
    id?: true
    organizationId?: true
    frameworkId?: true
  }

  export type FrameworkInstanceCountAggregateInputType = {
    id?: true
    organizationId?: true
    frameworkId?: true
    _all?: true
  }

  export type FrameworkInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrameworkInstance to aggregate.
     */
    where?: FrameworkInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameworkInstances to fetch.
     */
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrameworkInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameworkInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameworkInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrameworkInstances
    **/
    _count?: true | FrameworkInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrameworkInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrameworkInstanceMaxAggregateInputType
  }

  export type GetFrameworkInstanceAggregateType<T extends FrameworkInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateFrameworkInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrameworkInstance[P]>
      : GetScalarType<T[P], AggregateFrameworkInstance[P]>
  }




  export type FrameworkInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrameworkInstanceWhereInput
    orderBy?: FrameworkInstanceOrderByWithAggregationInput | FrameworkInstanceOrderByWithAggregationInput[]
    by: FrameworkInstanceScalarFieldEnum[] | FrameworkInstanceScalarFieldEnum
    having?: FrameworkInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrameworkInstanceCountAggregateInputType | true
    _min?: FrameworkInstanceMinAggregateInputType
    _max?: FrameworkInstanceMaxAggregateInputType
  }

  export type FrameworkInstanceGroupByOutputType = {
    id: string
    organizationId: string
    frameworkId: $Enums.FrameworkId
    _count: FrameworkInstanceCountAggregateOutputType | null
    _min: FrameworkInstanceMinAggregateOutputType | null
    _max: FrameworkInstanceMaxAggregateOutputType | null
  }

  type GetFrameworkInstanceGroupByPayload<T extends FrameworkInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrameworkInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrameworkInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrameworkInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], FrameworkInstanceGroupByOutputType[P]>
        }
      >
    >


  export type FrameworkInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    frameworkId?: boolean
    controls?: boolean | FrameworkInstance$controlsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    requirementsMapped?: boolean | FrameworkInstance$requirementsMappedArgs<ExtArgs>
    _count?: boolean | FrameworkInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frameworkInstance"]>

  export type FrameworkInstanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    frameworkId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frameworkInstance"]>

  export type FrameworkInstanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    frameworkId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frameworkInstance"]>

  export type FrameworkInstanceSelectScalar = {
    id?: boolean
    organizationId?: boolean
    frameworkId?: boolean
  }

  export type FrameworkInstanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "frameworkId", ExtArgs["result"]["frameworkInstance"]>
  export type FrameworkInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controls?: boolean | FrameworkInstance$controlsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    requirementsMapped?: boolean | FrameworkInstance$requirementsMappedArgs<ExtArgs>
    _count?: boolean | FrameworkInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FrameworkInstanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type FrameworkInstanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $FrameworkInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrameworkInstance"
    objects: {
      controls: Prisma.$ControlPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      requirementsMapped: Prisma.$RequirementMapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      frameworkId: $Enums.FrameworkId
    }, ExtArgs["result"]["frameworkInstance"]>
    composites: {}
  }

  type FrameworkInstanceGetPayload<S extends boolean | null | undefined | FrameworkInstanceDefaultArgs> = $Result.GetResult<Prisma.$FrameworkInstancePayload, S>

  type FrameworkInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FrameworkInstanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrameworkInstanceCountAggregateInputType | true
    }

  export interface FrameworkInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrameworkInstance'], meta: { name: 'FrameworkInstance' } }
    /**
     * Find zero or one FrameworkInstance that matches the filter.
     * @param {FrameworkInstanceFindUniqueArgs} args - Arguments to find a FrameworkInstance
     * @example
     * // Get one FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrameworkInstanceFindUniqueArgs>(args: SelectSubset<T, FrameworkInstanceFindUniqueArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FrameworkInstance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FrameworkInstanceFindUniqueOrThrowArgs} args - Arguments to find a FrameworkInstance
     * @example
     * // Get one FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrameworkInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, FrameworkInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrameworkInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceFindFirstArgs} args - Arguments to find a FrameworkInstance
     * @example
     * // Get one FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrameworkInstanceFindFirstArgs>(args?: SelectSubset<T, FrameworkInstanceFindFirstArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrameworkInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceFindFirstOrThrowArgs} args - Arguments to find a FrameworkInstance
     * @example
     * // Get one FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrameworkInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, FrameworkInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FrameworkInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrameworkInstances
     * const frameworkInstances = await prisma.frameworkInstance.findMany()
     * 
     * // Get first 10 FrameworkInstances
     * const frameworkInstances = await prisma.frameworkInstance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frameworkInstanceWithIdOnly = await prisma.frameworkInstance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FrameworkInstanceFindManyArgs>(args?: SelectSubset<T, FrameworkInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FrameworkInstance.
     * @param {FrameworkInstanceCreateArgs} args - Arguments to create a FrameworkInstance.
     * @example
     * // Create one FrameworkInstance
     * const FrameworkInstance = await prisma.frameworkInstance.create({
     *   data: {
     *     // ... data to create a FrameworkInstance
     *   }
     * })
     * 
     */
    create<T extends FrameworkInstanceCreateArgs>(args: SelectSubset<T, FrameworkInstanceCreateArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FrameworkInstances.
     * @param {FrameworkInstanceCreateManyArgs} args - Arguments to create many FrameworkInstances.
     * @example
     * // Create many FrameworkInstances
     * const frameworkInstance = await prisma.frameworkInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrameworkInstanceCreateManyArgs>(args?: SelectSubset<T, FrameworkInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrameworkInstances and returns the data saved in the database.
     * @param {FrameworkInstanceCreateManyAndReturnArgs} args - Arguments to create many FrameworkInstances.
     * @example
     * // Create many FrameworkInstances
     * const frameworkInstance = await prisma.frameworkInstance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrameworkInstances and only return the `id`
     * const frameworkInstanceWithIdOnly = await prisma.frameworkInstance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrameworkInstanceCreateManyAndReturnArgs>(args?: SelectSubset<T, FrameworkInstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FrameworkInstance.
     * @param {FrameworkInstanceDeleteArgs} args - Arguments to delete one FrameworkInstance.
     * @example
     * // Delete one FrameworkInstance
     * const FrameworkInstance = await prisma.frameworkInstance.delete({
     *   where: {
     *     // ... filter to delete one FrameworkInstance
     *   }
     * })
     * 
     */
    delete<T extends FrameworkInstanceDeleteArgs>(args: SelectSubset<T, FrameworkInstanceDeleteArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FrameworkInstance.
     * @param {FrameworkInstanceUpdateArgs} args - Arguments to update one FrameworkInstance.
     * @example
     * // Update one FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrameworkInstanceUpdateArgs>(args: SelectSubset<T, FrameworkInstanceUpdateArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FrameworkInstances.
     * @param {FrameworkInstanceDeleteManyArgs} args - Arguments to filter FrameworkInstances to delete.
     * @example
     * // Delete a few FrameworkInstances
     * const { count } = await prisma.frameworkInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrameworkInstanceDeleteManyArgs>(args?: SelectSubset<T, FrameworkInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrameworkInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrameworkInstances
     * const frameworkInstance = await prisma.frameworkInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrameworkInstanceUpdateManyArgs>(args: SelectSubset<T, FrameworkInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrameworkInstances and returns the data updated in the database.
     * @param {FrameworkInstanceUpdateManyAndReturnArgs} args - Arguments to update many FrameworkInstances.
     * @example
     * // Update many FrameworkInstances
     * const frameworkInstance = await prisma.frameworkInstance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FrameworkInstances and only return the `id`
     * const frameworkInstanceWithIdOnly = await prisma.frameworkInstance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FrameworkInstanceUpdateManyAndReturnArgs>(args: SelectSubset<T, FrameworkInstanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FrameworkInstance.
     * @param {FrameworkInstanceUpsertArgs} args - Arguments to update or create a FrameworkInstance.
     * @example
     * // Update or create a FrameworkInstance
     * const frameworkInstance = await prisma.frameworkInstance.upsert({
     *   create: {
     *     // ... data to create a FrameworkInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrameworkInstance we want to update
     *   }
     * })
     */
    upsert<T extends FrameworkInstanceUpsertArgs>(args: SelectSubset<T, FrameworkInstanceUpsertArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FrameworkInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceCountArgs} args - Arguments to filter FrameworkInstances to count.
     * @example
     * // Count the number of FrameworkInstances
     * const count = await prisma.frameworkInstance.count({
     *   where: {
     *     // ... the filter for the FrameworkInstances we want to count
     *   }
     * })
    **/
    count<T extends FrameworkInstanceCountArgs>(
      args?: Subset<T, FrameworkInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrameworkInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrameworkInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrameworkInstanceAggregateArgs>(args: Subset<T, FrameworkInstanceAggregateArgs>): Prisma.PrismaPromise<GetFrameworkInstanceAggregateType<T>>

    /**
     * Group by FrameworkInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrameworkInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrameworkInstanceGroupByArgs['orderBy'] }
        : { orderBy?: FrameworkInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrameworkInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrameworkInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrameworkInstance model
   */
  readonly fields: FrameworkInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrameworkInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrameworkInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    controls<T extends FrameworkInstance$controlsArgs<ExtArgs> = {}>(args?: Subset<T, FrameworkInstance$controlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requirementsMapped<T extends FrameworkInstance$requirementsMappedArgs<ExtArgs> = {}>(args?: Subset<T, FrameworkInstance$requirementsMappedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrameworkInstance model
   */
  interface FrameworkInstanceFieldRefs {
    readonly id: FieldRef<"FrameworkInstance", 'String'>
    readonly organizationId: FieldRef<"FrameworkInstance", 'String'>
    readonly frameworkId: FieldRef<"FrameworkInstance", 'FrameworkId'>
  }
    

  // Custom InputTypes
  /**
   * FrameworkInstance findUnique
   */
  export type FrameworkInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter, which FrameworkInstance to fetch.
     */
    where: FrameworkInstanceWhereUniqueInput
  }

  /**
   * FrameworkInstance findUniqueOrThrow
   */
  export type FrameworkInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter, which FrameworkInstance to fetch.
     */
    where: FrameworkInstanceWhereUniqueInput
  }

  /**
   * FrameworkInstance findFirst
   */
  export type FrameworkInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter, which FrameworkInstance to fetch.
     */
    where?: FrameworkInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameworkInstances to fetch.
     */
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrameworkInstances.
     */
    cursor?: FrameworkInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameworkInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameworkInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrameworkInstances.
     */
    distinct?: FrameworkInstanceScalarFieldEnum | FrameworkInstanceScalarFieldEnum[]
  }

  /**
   * FrameworkInstance findFirstOrThrow
   */
  export type FrameworkInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter, which FrameworkInstance to fetch.
     */
    where?: FrameworkInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameworkInstances to fetch.
     */
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrameworkInstances.
     */
    cursor?: FrameworkInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameworkInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameworkInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrameworkInstances.
     */
    distinct?: FrameworkInstanceScalarFieldEnum | FrameworkInstanceScalarFieldEnum[]
  }

  /**
   * FrameworkInstance findMany
   */
  export type FrameworkInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter, which FrameworkInstances to fetch.
     */
    where?: FrameworkInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameworkInstances to fetch.
     */
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrameworkInstances.
     */
    cursor?: FrameworkInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameworkInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameworkInstances.
     */
    skip?: number
    distinct?: FrameworkInstanceScalarFieldEnum | FrameworkInstanceScalarFieldEnum[]
  }

  /**
   * FrameworkInstance create
   */
  export type FrameworkInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a FrameworkInstance.
     */
    data: XOR<FrameworkInstanceCreateInput, FrameworkInstanceUncheckedCreateInput>
  }

  /**
   * FrameworkInstance createMany
   */
  export type FrameworkInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrameworkInstances.
     */
    data: FrameworkInstanceCreateManyInput | FrameworkInstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrameworkInstance createManyAndReturn
   */
  export type FrameworkInstanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * The data used to create many FrameworkInstances.
     */
    data: FrameworkInstanceCreateManyInput | FrameworkInstanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrameworkInstance update
   */
  export type FrameworkInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a FrameworkInstance.
     */
    data: XOR<FrameworkInstanceUpdateInput, FrameworkInstanceUncheckedUpdateInput>
    /**
     * Choose, which FrameworkInstance to update.
     */
    where: FrameworkInstanceWhereUniqueInput
  }

  /**
   * FrameworkInstance updateMany
   */
  export type FrameworkInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrameworkInstances.
     */
    data: XOR<FrameworkInstanceUpdateManyMutationInput, FrameworkInstanceUncheckedUpdateManyInput>
    /**
     * Filter which FrameworkInstances to update
     */
    where?: FrameworkInstanceWhereInput
    /**
     * Limit how many FrameworkInstances to update.
     */
    limit?: number
  }

  /**
   * FrameworkInstance updateManyAndReturn
   */
  export type FrameworkInstanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * The data used to update FrameworkInstances.
     */
    data: XOR<FrameworkInstanceUpdateManyMutationInput, FrameworkInstanceUncheckedUpdateManyInput>
    /**
     * Filter which FrameworkInstances to update
     */
    where?: FrameworkInstanceWhereInput
    /**
     * Limit how many FrameworkInstances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrameworkInstance upsert
   */
  export type FrameworkInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the FrameworkInstance to update in case it exists.
     */
    where: FrameworkInstanceWhereUniqueInput
    /**
     * In case the FrameworkInstance found by the `where` argument doesn't exist, create a new FrameworkInstance with this data.
     */
    create: XOR<FrameworkInstanceCreateInput, FrameworkInstanceUncheckedCreateInput>
    /**
     * In case the FrameworkInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrameworkInstanceUpdateInput, FrameworkInstanceUncheckedUpdateInput>
  }

  /**
   * FrameworkInstance delete
   */
  export type FrameworkInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    /**
     * Filter which FrameworkInstance to delete.
     */
    where: FrameworkInstanceWhereUniqueInput
  }

  /**
   * FrameworkInstance deleteMany
   */
  export type FrameworkInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrameworkInstances to delete
     */
    where?: FrameworkInstanceWhereInput
    /**
     * Limit how many FrameworkInstances to delete.
     */
    limit?: number
  }

  /**
   * FrameworkInstance.controls
   */
  export type FrameworkInstance$controlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    cursor?: ControlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * FrameworkInstance.requirementsMapped
   */
  export type FrameworkInstance$requirementsMappedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    where?: RequirementMapWhereInput
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    cursor?: RequirementMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequirementMapScalarFieldEnum | RequirementMapScalarFieldEnum[]
  }

  /**
   * FrameworkInstance without action
   */
  export type FrameworkInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
  }


  /**
   * Model Integration
   */

  export type AggregateIntegration = {
    _count: IntegrationCountAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  export type IntegrationMinAggregateOutputType = {
    id: string | null
    name: string | null
    integrationId: string | null
    organizationId: string | null
    lastRunAt: Date | null
  }

  export type IntegrationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    integrationId: string | null
    organizationId: string | null
    lastRunAt: Date | null
  }

  export type IntegrationCountAggregateOutputType = {
    id: number
    name: number
    integrationId: number
    settings: number
    userSettings: number
    organizationId: number
    lastRunAt: number
    _all: number
  }


  export type IntegrationMinAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    organizationId?: true
    lastRunAt?: true
  }

  export type IntegrationMaxAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    organizationId?: true
    lastRunAt?: true
  }

  export type IntegrationCountAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    settings?: true
    userSettings?: true
    organizationId?: true
    lastRunAt?: true
    _all?: true
  }

  export type IntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integration to aggregate.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Integrations
    **/
    _count?: true | IntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationMaxAggregateInputType
  }

  export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegration[P]>
      : GetScalarType<T[P], AggregateIntegration[P]>
  }




  export type IntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithAggregationInput | IntegrationOrderByWithAggregationInput[]
    by: IntegrationScalarFieldEnum[] | IntegrationScalarFieldEnum
    having?: IntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationCountAggregateInputType | true
    _min?: IntegrationMinAggregateInputType
    _max?: IntegrationMaxAggregateInputType
  }

  export type IntegrationGroupByOutputType = {
    id: string
    name: string
    integrationId: string
    settings: JsonValue
    userSettings: JsonValue
    organizationId: string
    lastRunAt: Date | null
    _count: IntegrationCountAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    integrationId?: boolean
    settings?: boolean
    userSettings?: boolean
    organizationId?: boolean
    lastRunAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    results?: boolean | Integration$resultsArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    integrationId?: boolean
    settings?: boolean
    userSettings?: boolean
    organizationId?: boolean
    lastRunAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    integrationId?: boolean
    settings?: boolean
    userSettings?: boolean
    organizationId?: boolean
    lastRunAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectScalar = {
    id?: boolean
    name?: boolean
    integrationId?: boolean
    settings?: boolean
    userSettings?: boolean
    organizationId?: boolean
    lastRunAt?: boolean
  }

  export type IntegrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "integrationId" | "settings" | "userSettings" | "organizationId" | "lastRunAt", ExtArgs["result"]["integration"]>
  export type IntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    results?: boolean | Integration$resultsArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IntegrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type IntegrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $IntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Integration"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      results: Prisma.$IntegrationResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      integrationId: string
      settings: Prisma.JsonValue
      userSettings: Prisma.JsonValue
      organizationId: string
      lastRunAt: Date | null
    }, ExtArgs["result"]["integration"]>
    composites: {}
  }

  type IntegrationGetPayload<S extends boolean | null | undefined | IntegrationDefaultArgs> = $Result.GetResult<Prisma.$IntegrationPayload, S>

  type IntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntegrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntegrationCountAggregateInputType | true
    }

  export interface IntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Integration'], meta: { name: 'Integration' } }
    /**
     * Find zero or one Integration that matches the filter.
     * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationFindUniqueArgs>(args: SelectSubset<T, IntegrationFindUniqueArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Integration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Integration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationFindFirstArgs>(args?: SelectSubset<T, IntegrationFindFirstArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Integration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrations
     * const integrations = await prisma.integration.findMany()
     * 
     * // Get first 10 Integrations
     * const integrations = await prisma.integration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationFindManyArgs>(args?: SelectSubset<T, IntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Integration.
     * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
     * @example
     * // Create one Integration
     * const Integration = await prisma.integration.create({
     *   data: {
     *     // ... data to create a Integration
     *   }
     * })
     * 
     */
    create<T extends IntegrationCreateArgs>(args: SelectSubset<T, IntegrationCreateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Integrations.
     * @param {IntegrationCreateManyArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationCreateManyArgs>(args?: SelectSubset<T, IntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Integrations and returns the data saved in the database.
     * @param {IntegrationCreateManyAndReturnArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Integrations and only return the `id`
     * const integrationWithIdOnly = await prisma.integration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Integration.
     * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
     * @example
     * // Delete one Integration
     * const Integration = await prisma.integration.delete({
     *   where: {
     *     // ... filter to delete one Integration
     *   }
     * })
     * 
     */
    delete<T extends IntegrationDeleteArgs>(args: SelectSubset<T, IntegrationDeleteArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Integration.
     * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
     * @example
     * // Update one Integration
     * const integration = await prisma.integration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationUpdateArgs>(args: SelectSubset<T, IntegrationUpdateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Integrations.
     * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
     * @example
     * // Delete a few Integrations
     * const { count } = await prisma.integration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationDeleteManyArgs>(args?: SelectSubset<T, IntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationUpdateManyArgs>(args: SelectSubset<T, IntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations and returns the data updated in the database.
     * @param {IntegrationUpdateManyAndReturnArgs} args - Arguments to update many Integrations.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Integrations and only return the `id`
     * const integrationWithIdOnly = await prisma.integration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IntegrationUpdateManyAndReturnArgs>(args: SelectSubset<T, IntegrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Integration.
     * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
     * @example
     * // Update or create a Integration
     * const integration = await prisma.integration.upsert({
     *   create: {
     *     // ... data to create a Integration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integration we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationUpsertArgs>(args: SelectSubset<T, IntegrationUpsertArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
     * @example
     * // Count the number of Integrations
     * const count = await prisma.integration.count({
     *   where: {
     *     // ... the filter for the Integrations we want to count
     *   }
     * })
    **/
    count<T extends IntegrationCountArgs>(
      args?: Subset<T, IntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationAggregateArgs>(args: Subset<T, IntegrationAggregateArgs>): Prisma.PrismaPromise<GetIntegrationAggregateType<T>>

    /**
     * Group by Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Integration model
   */
  readonly fields: IntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Integration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    results<T extends Integration$resultsArgs<ExtArgs> = {}>(args?: Subset<T, Integration$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Integration model
   */
  interface IntegrationFieldRefs {
    readonly id: FieldRef<"Integration", 'String'>
    readonly name: FieldRef<"Integration", 'String'>
    readonly integrationId: FieldRef<"Integration", 'String'>
    readonly settings: FieldRef<"Integration", 'Json'>
    readonly userSettings: FieldRef<"Integration", 'Json'>
    readonly organizationId: FieldRef<"Integration", 'String'>
    readonly lastRunAt: FieldRef<"Integration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Integration findUnique
   */
  export type IntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findUniqueOrThrow
   */
  export type IntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findFirst
   */
  export type IntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findFirstOrThrow
   */
  export type IntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findMany
   */
  export type IntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integrations to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration create
   */
  export type IntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a Integration.
     */
    data: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
  }

  /**
   * Integration createMany
   */
  export type IntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Integration createManyAndReturn
   */
  export type IntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Integration update
   */
  export type IntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a Integration.
     */
    data: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
    /**
     * Choose, which Integration to update.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration updateMany
   */
  export type IntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Integrations.
     */
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to update.
     */
    limit?: number
  }

  /**
   * Integration updateManyAndReturn
   */
  export type IntegrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * The data used to update Integrations.
     */
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Integration upsert
   */
  export type IntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the Integration to update in case it exists.
     */
    where: IntegrationWhereUniqueInput
    /**
     * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
     */
    create: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
    /**
     * In case the Integration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
  }

  /**
   * Integration delete
   */
  export type IntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter which Integration to delete.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration deleteMany
   */
  export type IntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integrations to delete
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to delete.
     */
    limit?: number
  }

  /**
   * Integration.results
   */
  export type Integration$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    where?: IntegrationResultWhereInput
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    cursor?: IntegrationResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationResultScalarFieldEnum | IntegrationResultScalarFieldEnum[]
  }

  /**
   * Integration without action
   */
  export type IntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
  }


  /**
   * Model IntegrationResult
   */

  export type AggregateIntegrationResult = {
    _count: IntegrationResultCountAggregateOutputType | null
    _min: IntegrationResultMinAggregateOutputType | null
    _max: IntegrationResultMaxAggregateOutputType | null
  }

  export type IntegrationResultMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    remediation: string | null
    status: string | null
    severity: string | null
    completedAt: Date | null
    integrationId: string | null
    organizationId: string | null
    assignedUserId: string | null
  }

  export type IntegrationResultMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    remediation: string | null
    status: string | null
    severity: string | null
    completedAt: Date | null
    integrationId: string | null
    organizationId: string | null
    assignedUserId: string | null
  }

  export type IntegrationResultCountAggregateOutputType = {
    id: number
    title: number
    description: number
    remediation: number
    status: number
    severity: number
    resultDetails: number
    completedAt: number
    integrationId: number
    organizationId: number
    assignedUserId: number
    _all: number
  }


  export type IntegrationResultMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    remediation?: true
    status?: true
    severity?: true
    completedAt?: true
    integrationId?: true
    organizationId?: true
    assignedUserId?: true
  }

  export type IntegrationResultMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    remediation?: true
    status?: true
    severity?: true
    completedAt?: true
    integrationId?: true
    organizationId?: true
    assignedUserId?: true
  }

  export type IntegrationResultCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    remediation?: true
    status?: true
    severity?: true
    resultDetails?: true
    completedAt?: true
    integrationId?: true
    organizationId?: true
    assignedUserId?: true
    _all?: true
  }

  export type IntegrationResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationResult to aggregate.
     */
    where?: IntegrationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationResults to fetch.
     */
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationResults
    **/
    _count?: true | IntegrationResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationResultMaxAggregateInputType
  }

  export type GetIntegrationResultAggregateType<T extends IntegrationResultAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationResult[P]>
      : GetScalarType<T[P], AggregateIntegrationResult[P]>
  }




  export type IntegrationResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationResultWhereInput
    orderBy?: IntegrationResultOrderByWithAggregationInput | IntegrationResultOrderByWithAggregationInput[]
    by: IntegrationResultScalarFieldEnum[] | IntegrationResultScalarFieldEnum
    having?: IntegrationResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationResultCountAggregateInputType | true
    _min?: IntegrationResultMinAggregateInputType
    _max?: IntegrationResultMaxAggregateInputType
  }

  export type IntegrationResultGroupByOutputType = {
    id: string
    title: string | null
    description: string | null
    remediation: string | null
    status: string | null
    severity: string | null
    resultDetails: JsonValue | null
    completedAt: Date | null
    integrationId: string
    organizationId: string
    assignedUserId: string | null
    _count: IntegrationResultCountAggregateOutputType | null
    _min: IntegrationResultMinAggregateOutputType | null
    _max: IntegrationResultMaxAggregateOutputType | null
  }

  type GetIntegrationResultGroupByPayload<T extends IntegrationResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationResultGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationResultGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    remediation?: boolean
    status?: boolean
    severity?: boolean
    resultDetails?: boolean
    completedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    assignedUserId?: boolean
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationResult"]>

  export type IntegrationResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    remediation?: boolean
    status?: boolean
    severity?: boolean
    resultDetails?: boolean
    completedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    assignedUserId?: boolean
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationResult"]>

  export type IntegrationResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    remediation?: boolean
    status?: boolean
    severity?: boolean
    resultDetails?: boolean
    completedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    assignedUserId?: boolean
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationResult"]>

  export type IntegrationResultSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    remediation?: boolean
    status?: boolean
    severity?: boolean
    resultDetails?: boolean
    completedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    assignedUserId?: boolean
  }

  export type IntegrationResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "remediation" | "status" | "severity" | "resultDetails" | "completedAt" | "integrationId" | "organizationId" | "assignedUserId", ExtArgs["result"]["integrationResult"]>
  export type IntegrationResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }
  export type IntegrationResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }
  export type IntegrationResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUser?: boolean | IntegrationResult$assignedUserArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }

  export type $IntegrationResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationResult"
    objects: {
      assignedUser: Prisma.$UserPayload<ExtArgs> | null
      integration: Prisma.$IntegrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string | null
      description: string | null
      remediation: string | null
      status: string | null
      severity: string | null
      resultDetails: Prisma.JsonValue | null
      completedAt: Date | null
      integrationId: string
      organizationId: string
      assignedUserId: string | null
    }, ExtArgs["result"]["integrationResult"]>
    composites: {}
  }

  type IntegrationResultGetPayload<S extends boolean | null | undefined | IntegrationResultDefaultArgs> = $Result.GetResult<Prisma.$IntegrationResultPayload, S>

  type IntegrationResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntegrationResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntegrationResultCountAggregateInputType | true
    }

  export interface IntegrationResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationResult'], meta: { name: 'IntegrationResult' } }
    /**
     * Find zero or one IntegrationResult that matches the filter.
     * @param {IntegrationResultFindUniqueArgs} args - Arguments to find a IntegrationResult
     * @example
     * // Get one IntegrationResult
     * const integrationResult = await prisma.integrationResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationResultFindUniqueArgs>(args: SelectSubset<T, IntegrationResultFindUniqueArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IntegrationResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntegrationResultFindUniqueOrThrowArgs} args - Arguments to find a IntegrationResult
     * @example
     * // Get one IntegrationResult
     * const integrationResult = await prisma.integrationResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationResultFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultFindFirstArgs} args - Arguments to find a IntegrationResult
     * @example
     * // Get one IntegrationResult
     * const integrationResult = await prisma.integrationResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationResultFindFirstArgs>(args?: SelectSubset<T, IntegrationResultFindFirstArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultFindFirstOrThrowArgs} args - Arguments to find a IntegrationResult
     * @example
     * // Get one IntegrationResult
     * const integrationResult = await prisma.integrationResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationResultFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IntegrationResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationResults
     * const integrationResults = await prisma.integrationResult.findMany()
     * 
     * // Get first 10 IntegrationResults
     * const integrationResults = await prisma.integrationResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationResultWithIdOnly = await prisma.integrationResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationResultFindManyArgs>(args?: SelectSubset<T, IntegrationResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IntegrationResult.
     * @param {IntegrationResultCreateArgs} args - Arguments to create a IntegrationResult.
     * @example
     * // Create one IntegrationResult
     * const IntegrationResult = await prisma.integrationResult.create({
     *   data: {
     *     // ... data to create a IntegrationResult
     *   }
     * })
     * 
     */
    create<T extends IntegrationResultCreateArgs>(args: SelectSubset<T, IntegrationResultCreateArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IntegrationResults.
     * @param {IntegrationResultCreateManyArgs} args - Arguments to create many IntegrationResults.
     * @example
     * // Create many IntegrationResults
     * const integrationResult = await prisma.integrationResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationResultCreateManyArgs>(args?: SelectSubset<T, IntegrationResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntegrationResults and returns the data saved in the database.
     * @param {IntegrationResultCreateManyAndReturnArgs} args - Arguments to create many IntegrationResults.
     * @example
     * // Create many IntegrationResults
     * const integrationResult = await prisma.integrationResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntegrationResults and only return the `id`
     * const integrationResultWithIdOnly = await prisma.integrationResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationResultCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IntegrationResult.
     * @param {IntegrationResultDeleteArgs} args - Arguments to delete one IntegrationResult.
     * @example
     * // Delete one IntegrationResult
     * const IntegrationResult = await prisma.integrationResult.delete({
     *   where: {
     *     // ... filter to delete one IntegrationResult
     *   }
     * })
     * 
     */
    delete<T extends IntegrationResultDeleteArgs>(args: SelectSubset<T, IntegrationResultDeleteArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IntegrationResult.
     * @param {IntegrationResultUpdateArgs} args - Arguments to update one IntegrationResult.
     * @example
     * // Update one IntegrationResult
     * const integrationResult = await prisma.integrationResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationResultUpdateArgs>(args: SelectSubset<T, IntegrationResultUpdateArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IntegrationResults.
     * @param {IntegrationResultDeleteManyArgs} args - Arguments to filter IntegrationResults to delete.
     * @example
     * // Delete a few IntegrationResults
     * const { count } = await prisma.integrationResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationResultDeleteManyArgs>(args?: SelectSubset<T, IntegrationResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationResults
     * const integrationResult = await prisma.integrationResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationResultUpdateManyArgs>(args: SelectSubset<T, IntegrationResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationResults and returns the data updated in the database.
     * @param {IntegrationResultUpdateManyAndReturnArgs} args - Arguments to update many IntegrationResults.
     * @example
     * // Update many IntegrationResults
     * const integrationResult = await prisma.integrationResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IntegrationResults and only return the `id`
     * const integrationResultWithIdOnly = await prisma.integrationResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IntegrationResultUpdateManyAndReturnArgs>(args: SelectSubset<T, IntegrationResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IntegrationResult.
     * @param {IntegrationResultUpsertArgs} args - Arguments to update or create a IntegrationResult.
     * @example
     * // Update or create a IntegrationResult
     * const integrationResult = await prisma.integrationResult.upsert({
     *   create: {
     *     // ... data to create a IntegrationResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationResult we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationResultUpsertArgs>(args: SelectSubset<T, IntegrationResultUpsertArgs<ExtArgs>>): Prisma__IntegrationResultClient<$Result.GetResult<Prisma.$IntegrationResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IntegrationResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultCountArgs} args - Arguments to filter IntegrationResults to count.
     * @example
     * // Count the number of IntegrationResults
     * const count = await prisma.integrationResult.count({
     *   where: {
     *     // ... the filter for the IntegrationResults we want to count
     *   }
     * })
    **/
    count<T extends IntegrationResultCountArgs>(
      args?: Subset<T, IntegrationResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationResultAggregateArgs>(args: Subset<T, IntegrationResultAggregateArgs>): Prisma.PrismaPromise<GetIntegrationResultAggregateType<T>>

    /**
     * Group by IntegrationResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationResultGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationResult model
   */
  readonly fields: IntegrationResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedUser<T extends IntegrationResult$assignedUserArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationResult$assignedUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationResult model
   */
  interface IntegrationResultFieldRefs {
    readonly id: FieldRef<"IntegrationResult", 'String'>
    readonly title: FieldRef<"IntegrationResult", 'String'>
    readonly description: FieldRef<"IntegrationResult", 'String'>
    readonly remediation: FieldRef<"IntegrationResult", 'String'>
    readonly status: FieldRef<"IntegrationResult", 'String'>
    readonly severity: FieldRef<"IntegrationResult", 'String'>
    readonly resultDetails: FieldRef<"IntegrationResult", 'Json'>
    readonly completedAt: FieldRef<"IntegrationResult", 'DateTime'>
    readonly integrationId: FieldRef<"IntegrationResult", 'String'>
    readonly organizationId: FieldRef<"IntegrationResult", 'String'>
    readonly assignedUserId: FieldRef<"IntegrationResult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationResult findUnique
   */
  export type IntegrationResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationResult to fetch.
     */
    where: IntegrationResultWhereUniqueInput
  }

  /**
   * IntegrationResult findUniqueOrThrow
   */
  export type IntegrationResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationResult to fetch.
     */
    where: IntegrationResultWhereUniqueInput
  }

  /**
   * IntegrationResult findFirst
   */
  export type IntegrationResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationResult to fetch.
     */
    where?: IntegrationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationResults to fetch.
     */
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationResults.
     */
    cursor?: IntegrationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationResults.
     */
    distinct?: IntegrationResultScalarFieldEnum | IntegrationResultScalarFieldEnum[]
  }

  /**
   * IntegrationResult findFirstOrThrow
   */
  export type IntegrationResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationResult to fetch.
     */
    where?: IntegrationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationResults to fetch.
     */
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationResults.
     */
    cursor?: IntegrationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationResults.
     */
    distinct?: IntegrationResultScalarFieldEnum | IntegrationResultScalarFieldEnum[]
  }

  /**
   * IntegrationResult findMany
   */
  export type IntegrationResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationResults to fetch.
     */
    where?: IntegrationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationResults to fetch.
     */
    orderBy?: IntegrationResultOrderByWithRelationInput | IntegrationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationResults.
     */
    cursor?: IntegrationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationResults.
     */
    skip?: number
    distinct?: IntegrationResultScalarFieldEnum | IntegrationResultScalarFieldEnum[]
  }

  /**
   * IntegrationResult create
   */
  export type IntegrationResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * The data needed to create a IntegrationResult.
     */
    data: XOR<IntegrationResultCreateInput, IntegrationResultUncheckedCreateInput>
  }

  /**
   * IntegrationResult createMany
   */
  export type IntegrationResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationResults.
     */
    data: IntegrationResultCreateManyInput | IntegrationResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntegrationResult createManyAndReturn
   */
  export type IntegrationResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * The data used to create many IntegrationResults.
     */
    data: IntegrationResultCreateManyInput | IntegrationResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationResult update
   */
  export type IntegrationResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * The data needed to update a IntegrationResult.
     */
    data: XOR<IntegrationResultUpdateInput, IntegrationResultUncheckedUpdateInput>
    /**
     * Choose, which IntegrationResult to update.
     */
    where: IntegrationResultWhereUniqueInput
  }

  /**
   * IntegrationResult updateMany
   */
  export type IntegrationResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationResults.
     */
    data: XOR<IntegrationResultUpdateManyMutationInput, IntegrationResultUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationResults to update
     */
    where?: IntegrationResultWhereInput
    /**
     * Limit how many IntegrationResults to update.
     */
    limit?: number
  }

  /**
   * IntegrationResult updateManyAndReturn
   */
  export type IntegrationResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * The data used to update IntegrationResults.
     */
    data: XOR<IntegrationResultUpdateManyMutationInput, IntegrationResultUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationResults to update
     */
    where?: IntegrationResultWhereInput
    /**
     * Limit how many IntegrationResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationResult upsert
   */
  export type IntegrationResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * The filter to search for the IntegrationResult to update in case it exists.
     */
    where: IntegrationResultWhereUniqueInput
    /**
     * In case the IntegrationResult found by the `where` argument doesn't exist, create a new IntegrationResult with this data.
     */
    create: XOR<IntegrationResultCreateInput, IntegrationResultUncheckedCreateInput>
    /**
     * In case the IntegrationResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationResultUpdateInput, IntegrationResultUncheckedUpdateInput>
  }

  /**
   * IntegrationResult delete
   */
  export type IntegrationResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
    /**
     * Filter which IntegrationResult to delete.
     */
    where: IntegrationResultWhereUniqueInput
  }

  /**
   * IntegrationResult deleteMany
   */
  export type IntegrationResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationResults to delete
     */
    where?: IntegrationResultWhereInput
    /**
     * Limit how many IntegrationResults to delete.
     */
    limit?: number
  }

  /**
   * IntegrationResult.assignedUser
   */
  export type IntegrationResult$assignedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * IntegrationResult without action
   */
  export type IntegrationResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationResult
     */
    select?: IntegrationResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationResult
     */
    omit?: IntegrationResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationResultInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    createdAt: Date | null
    metadata: string | null
    stripeCustomerId: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    createdAt: Date | null
    metadata: string | null
    stripeCustomerId: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    logo: number
    createdAt: number
    metadata: number
    stripeCustomerId: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    createdAt?: true
    metadata?: true
    stripeCustomerId?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    createdAt?: true
    metadata?: true
    stripeCustomerId?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    createdAt?: true
    metadata?: true
    stripeCustomerId?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    slug: string
    logo: string | null
    createdAt: Date
    metadata: string | null
    stripeCustomerId: string | null
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    createdAt?: boolean
    metadata?: boolean
    stripeCustomerId?: boolean
    apiKeys?: boolean | Organization$apiKeysArgs<ExtArgs>
    artifacts?: boolean | Organization$artifactsArgs<ExtArgs>
    auditLog?: boolean | Organization$auditLogArgs<ExtArgs>
    controls?: boolean | Organization$controlsArgs<ExtArgs>
    evidence?: boolean | Organization$evidenceArgs<ExtArgs>
    frameworkInstances?: boolean | Organization$frameworkInstancesArgs<ExtArgs>
    integrations?: boolean | Organization$integrationsArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    members?: boolean | Organization$membersArgs<ExtArgs>
    policy?: boolean | Organization$policyArgs<ExtArgs>
    risk?: boolean | Organization$riskArgs<ExtArgs>
    vendors?: boolean | Organization$vendorsArgs<ExtArgs>
    tasks?: boolean | Organization$tasksArgs<ExtArgs>
    comments?: boolean | Organization$commentsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    createdAt?: boolean
    metadata?: boolean
    stripeCustomerId?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    createdAt?: boolean
    metadata?: boolean
    stripeCustomerId?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    createdAt?: boolean
    metadata?: boolean
    stripeCustomerId?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "logo" | "createdAt" | "metadata" | "stripeCustomerId", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apiKeys?: boolean | Organization$apiKeysArgs<ExtArgs>
    artifacts?: boolean | Organization$artifactsArgs<ExtArgs>
    auditLog?: boolean | Organization$auditLogArgs<ExtArgs>
    controls?: boolean | Organization$controlsArgs<ExtArgs>
    evidence?: boolean | Organization$evidenceArgs<ExtArgs>
    frameworkInstances?: boolean | Organization$frameworkInstancesArgs<ExtArgs>
    integrations?: boolean | Organization$integrationsArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    members?: boolean | Organization$membersArgs<ExtArgs>
    policy?: boolean | Organization$policyArgs<ExtArgs>
    risk?: boolean | Organization$riskArgs<ExtArgs>
    vendors?: boolean | Organization$vendorsArgs<ExtArgs>
    tasks?: boolean | Organization$tasksArgs<ExtArgs>
    comments?: boolean | Organization$commentsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      apiKeys: Prisma.$ApiKeyPayload<ExtArgs>[]
      artifacts: Prisma.$ArtifactPayload<ExtArgs>[]
      auditLog: Prisma.$AuditLogPayload<ExtArgs>[]
      controls: Prisma.$ControlPayload<ExtArgs>[]
      evidence: Prisma.$EvidencePayload<ExtArgs>[]
      frameworkInstances: Prisma.$FrameworkInstancePayload<ExtArgs>[]
      integrations: Prisma.$IntegrationPayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      members: Prisma.$MemberPayload<ExtArgs>[]
      policy: Prisma.$PolicyPayload<ExtArgs>[]
      risk: Prisma.$RiskPayload<ExtArgs>[]
      vendors: Prisma.$VendorPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      logo: string | null
      createdAt: Date
      metadata: string | null
      stripeCustomerId: string | null
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    apiKeys<T extends Organization$apiKeysArgs<ExtArgs> = {}>(args?: Subset<T, Organization$apiKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    artifacts<T extends Organization$artifactsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$artifactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLog<T extends Organization$auditLogArgs<ExtArgs> = {}>(args?: Subset<T, Organization$auditLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    controls<T extends Organization$controlsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$controlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    evidence<T extends Organization$evidenceArgs<ExtArgs> = {}>(args?: Subset<T, Organization$evidenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvidencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    frameworkInstances<T extends Organization$frameworkInstancesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$frameworkInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    integrations<T extends Organization$integrationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$integrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends Organization$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    policy<T extends Organization$policyArgs<ExtArgs> = {}>(args?: Subset<T, Organization$policyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    risk<T extends Organization$riskArgs<ExtArgs> = {}>(args?: Subset<T, Organization$riskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendors<T extends Organization$vendorsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$vendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Organization$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Organization$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Organization$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly logo: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly metadata: FieldRef<"Organization", 'String'>
    readonly stripeCustomerId: FieldRef<"Organization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.apiKeys
   */
  export type Organization$apiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * Organization.artifacts
   */
  export type Organization$artifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    where?: ArtifactWhereInput
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    cursor?: ArtifactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Organization.auditLog
   */
  export type Organization$auditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Organization.controls
   */
  export type Organization$controlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Control
     */
    omit?: ControlOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    cursor?: ControlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Organization.evidence
   */
  export type Organization$evidenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evidence
     */
    select?: EvidenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evidence
     */
    omit?: EvidenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvidenceInclude<ExtArgs> | null
    where?: EvidenceWhereInput
    orderBy?: EvidenceOrderByWithRelationInput | EvidenceOrderByWithRelationInput[]
    cursor?: EvidenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EvidenceScalarFieldEnum | EvidenceScalarFieldEnum[]
  }

  /**
   * Organization.frameworkInstances
   */
  export type Organization$frameworkInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameworkInstance
     */
    select?: FrameworkInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrameworkInstance
     */
    omit?: FrameworkInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrameworkInstanceInclude<ExtArgs> | null
    where?: FrameworkInstanceWhereInput
    orderBy?: FrameworkInstanceOrderByWithRelationInput | FrameworkInstanceOrderByWithRelationInput[]
    cursor?: FrameworkInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FrameworkInstanceScalarFieldEnum | FrameworkInstanceScalarFieldEnum[]
  }

  /**
   * Organization.integrations
   */
  export type Organization$integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    cursor?: IntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Organization.invitations
   */
  export type Organization$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Organization.members
   */
  export type Organization$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Organization.policy
   */
  export type Organization$policyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    where?: PolicyWhereInput
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    cursor?: PolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }

  /**
   * Organization.risk
   */
  export type Organization$riskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    where?: RiskWhereInput
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    cursor?: RiskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RiskScalarFieldEnum | RiskScalarFieldEnum[]
  }

  /**
   * Organization.vendors
   */
  export type Organization$vendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    cursor?: VendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Organization.tasks
   */
  export type Organization$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Organization.comments
   */
  export type Organization$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Policy
   */

  export type AggregatePolicy = {
    _count: PolicyCountAggregateOutputType | null
    _min: PolicyMinAggregateOutputType | null
    _max: PolicyMaxAggregateOutputType | null
  }

  export type PolicyMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.PolicyStatus | null
    frequency: $Enums.Frequency | null
    department: $Enums.Departments | null
    isRequiredToSign: boolean | null
    reviewDate: Date | null
    isArchived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastArchivedAt: Date | null
    lastPublishedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type PolicyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.PolicyStatus | null
    frequency: $Enums.Frequency | null
    department: $Enums.Departments | null
    isRequiredToSign: boolean | null
    reviewDate: Date | null
    isArchived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastArchivedAt: Date | null
    lastPublishedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type PolicyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    content: number
    frequency: number
    department: number
    isRequiredToSign: number
    signedBy: number
    reviewDate: number
    isArchived: number
    createdAt: number
    updatedAt: number
    lastArchivedAt: number
    lastPublishedAt: number
    organizationId: number
    assigneeId: number
    _all: number
  }


  export type PolicyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    frequency?: true
    department?: true
    isRequiredToSign?: true
    reviewDate?: true
    isArchived?: true
    createdAt?: true
    updatedAt?: true
    lastArchivedAt?: true
    lastPublishedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type PolicyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    frequency?: true
    department?: true
    isRequiredToSign?: true
    reviewDate?: true
    isArchived?: true
    createdAt?: true
    updatedAt?: true
    lastArchivedAt?: true
    lastPublishedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type PolicyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    content?: true
    frequency?: true
    department?: true
    isRequiredToSign?: true
    signedBy?: true
    reviewDate?: true
    isArchived?: true
    createdAt?: true
    updatedAt?: true
    lastArchivedAt?: true
    lastPublishedAt?: true
    organizationId?: true
    assigneeId?: true
    _all?: true
  }

  export type PolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Policy to aggregate.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Policies
    **/
    _count?: true | PolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PolicyMaxAggregateInputType
  }

  export type GetPolicyAggregateType<T extends PolicyAggregateArgs> = {
        [P in keyof T & keyof AggregatePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePolicy[P]>
      : GetScalarType<T[P], AggregatePolicy[P]>
  }




  export type PolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyWhereInput
    orderBy?: PolicyOrderByWithAggregationInput | PolicyOrderByWithAggregationInput[]
    by: PolicyScalarFieldEnum[] | PolicyScalarFieldEnum
    having?: PolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PolicyCountAggregateInputType | true
    _min?: PolicyMinAggregateInputType
    _max?: PolicyMaxAggregateInputType
  }

  export type PolicyGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: $Enums.PolicyStatus
    content: JsonValue[]
    frequency: $Enums.Frequency | null
    department: $Enums.Departments | null
    isRequiredToSign: boolean
    signedBy: string[]
    reviewDate: Date | null
    isArchived: boolean
    createdAt: Date
    updatedAt: Date
    lastArchivedAt: Date | null
    lastPublishedAt: Date | null
    organizationId: string
    assigneeId: string | null
    _count: PolicyCountAggregateOutputType | null
    _min: PolicyMinAggregateOutputType | null
    _max: PolicyMaxAggregateOutputType | null
  }

  type GetPolicyGroupByPayload<T extends PolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PolicyGroupByOutputType[P]>
            : GetScalarType<T[P], PolicyGroupByOutputType[P]>
        }
      >
    >


  export type PolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    content?: boolean
    frequency?: boolean
    department?: boolean
    isRequiredToSign?: boolean
    signedBy?: boolean
    reviewDate?: boolean
    isArchived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastArchivedAt?: boolean
    lastPublishedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
    artifacts?: boolean | Policy$artifactsArgs<ExtArgs>
    _count?: boolean | PolicyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["policy"]>

  export type PolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    content?: boolean
    frequency?: boolean
    department?: boolean
    isRequiredToSign?: boolean
    signedBy?: boolean
    reviewDate?: boolean
    isArchived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastArchivedAt?: boolean
    lastPublishedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["policy"]>

  export type PolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    content?: boolean
    frequency?: boolean
    department?: boolean
    isRequiredToSign?: boolean
    signedBy?: boolean
    reviewDate?: boolean
    isArchived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastArchivedAt?: boolean
    lastPublishedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["policy"]>

  export type PolicySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    content?: boolean
    frequency?: boolean
    department?: boolean
    isRequiredToSign?: boolean
    signedBy?: boolean
    reviewDate?: boolean
    isArchived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastArchivedAt?: boolean
    lastPublishedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
  }

  export type PolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "status" | "content" | "frequency" | "department" | "isRequiredToSign" | "signedBy" | "reviewDate" | "isArchived" | "createdAt" | "updatedAt" | "lastArchivedAt" | "lastPublishedAt" | "organizationId" | "assigneeId", ExtArgs["result"]["policy"]>
  export type PolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
    artifacts?: boolean | Policy$artifactsArgs<ExtArgs>
    _count?: boolean | PolicyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
  }
  export type PolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Policy$assigneeArgs<ExtArgs>
  }

  export type $PolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Policy"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      assignee: Prisma.$MemberPayload<ExtArgs> | null
      artifacts: Prisma.$ArtifactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: $Enums.PolicyStatus
      content: Prisma.JsonValue[]
      frequency: $Enums.Frequency | null
      department: $Enums.Departments | null
      isRequiredToSign: boolean
      signedBy: string[]
      reviewDate: Date | null
      isArchived: boolean
      createdAt: Date
      updatedAt: Date
      lastArchivedAt: Date | null
      lastPublishedAt: Date | null
      organizationId: string
      assigneeId: string | null
    }, ExtArgs["result"]["policy"]>
    composites: {}
  }

  type PolicyGetPayload<S extends boolean | null | undefined | PolicyDefaultArgs> = $Result.GetResult<Prisma.$PolicyPayload, S>

  type PolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PolicyCountAggregateInputType | true
    }

  export interface PolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Policy'], meta: { name: 'Policy' } }
    /**
     * Find zero or one Policy that matches the filter.
     * @param {PolicyFindUniqueArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PolicyFindUniqueArgs>(args: SelectSubset<T, PolicyFindUniqueArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Policy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PolicyFindUniqueOrThrowArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, PolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Policy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindFirstArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PolicyFindFirstArgs>(args?: SelectSubset<T, PolicyFindFirstArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Policy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindFirstOrThrowArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, PolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Policies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Policies
     * const policies = await prisma.policy.findMany()
     * 
     * // Get first 10 Policies
     * const policies = await prisma.policy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const policyWithIdOnly = await prisma.policy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PolicyFindManyArgs>(args?: SelectSubset<T, PolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Policy.
     * @param {PolicyCreateArgs} args - Arguments to create a Policy.
     * @example
     * // Create one Policy
     * const Policy = await prisma.policy.create({
     *   data: {
     *     // ... data to create a Policy
     *   }
     * })
     * 
     */
    create<T extends PolicyCreateArgs>(args: SelectSubset<T, PolicyCreateArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Policies.
     * @param {PolicyCreateManyArgs} args - Arguments to create many Policies.
     * @example
     * // Create many Policies
     * const policy = await prisma.policy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PolicyCreateManyArgs>(args?: SelectSubset<T, PolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Policies and returns the data saved in the database.
     * @param {PolicyCreateManyAndReturnArgs} args - Arguments to create many Policies.
     * @example
     * // Create many Policies
     * const policy = await prisma.policy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Policies and only return the `id`
     * const policyWithIdOnly = await prisma.policy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, PolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Policy.
     * @param {PolicyDeleteArgs} args - Arguments to delete one Policy.
     * @example
     * // Delete one Policy
     * const Policy = await prisma.policy.delete({
     *   where: {
     *     // ... filter to delete one Policy
     *   }
     * })
     * 
     */
    delete<T extends PolicyDeleteArgs>(args: SelectSubset<T, PolicyDeleteArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Policy.
     * @param {PolicyUpdateArgs} args - Arguments to update one Policy.
     * @example
     * // Update one Policy
     * const policy = await prisma.policy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PolicyUpdateArgs>(args: SelectSubset<T, PolicyUpdateArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Policies.
     * @param {PolicyDeleteManyArgs} args - Arguments to filter Policies to delete.
     * @example
     * // Delete a few Policies
     * const { count } = await prisma.policy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PolicyDeleteManyArgs>(args?: SelectSubset<T, PolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Policies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Policies
     * const policy = await prisma.policy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PolicyUpdateManyArgs>(args: SelectSubset<T, PolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Policies and returns the data updated in the database.
     * @param {PolicyUpdateManyAndReturnArgs} args - Arguments to update many Policies.
     * @example
     * // Update many Policies
     * const policy = await prisma.policy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Policies and only return the `id`
     * const policyWithIdOnly = await prisma.policy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, PolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Policy.
     * @param {PolicyUpsertArgs} args - Arguments to update or create a Policy.
     * @example
     * // Update or create a Policy
     * const policy = await prisma.policy.upsert({
     *   create: {
     *     // ... data to create a Policy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Policy we want to update
     *   }
     * })
     */
    upsert<T extends PolicyUpsertArgs>(args: SelectSubset<T, PolicyUpsertArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Policies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyCountArgs} args - Arguments to filter Policies to count.
     * @example
     * // Count the number of Policies
     * const count = await prisma.policy.count({
     *   where: {
     *     // ... the filter for the Policies we want to count
     *   }
     * })
    **/
    count<T extends PolicyCountArgs>(
      args?: Subset<T, PolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Policy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PolicyAggregateArgs>(args: Subset<T, PolicyAggregateArgs>): Prisma.PrismaPromise<GetPolicyAggregateType<T>>

    /**
     * Group by Policy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PolicyGroupByArgs['orderBy'] }
        : { orderBy?: PolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Policy model
   */
  readonly fields: PolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Policy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Policy$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Policy$assigneeArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    artifacts<T extends Policy$artifactsArgs<ExtArgs> = {}>(args?: Subset<T, Policy$artifactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Policy model
   */
  interface PolicyFieldRefs {
    readonly id: FieldRef<"Policy", 'String'>
    readonly name: FieldRef<"Policy", 'String'>
    readonly description: FieldRef<"Policy", 'String'>
    readonly status: FieldRef<"Policy", 'PolicyStatus'>
    readonly content: FieldRef<"Policy", 'Json[]'>
    readonly frequency: FieldRef<"Policy", 'Frequency'>
    readonly department: FieldRef<"Policy", 'Departments'>
    readonly isRequiredToSign: FieldRef<"Policy", 'Boolean'>
    readonly signedBy: FieldRef<"Policy", 'String[]'>
    readonly reviewDate: FieldRef<"Policy", 'DateTime'>
    readonly isArchived: FieldRef<"Policy", 'Boolean'>
    readonly createdAt: FieldRef<"Policy", 'DateTime'>
    readonly updatedAt: FieldRef<"Policy", 'DateTime'>
    readonly lastArchivedAt: FieldRef<"Policy", 'DateTime'>
    readonly lastPublishedAt: FieldRef<"Policy", 'DateTime'>
    readonly organizationId: FieldRef<"Policy", 'String'>
    readonly assigneeId: FieldRef<"Policy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Policy findUnique
   */
  export type PolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where: PolicyWhereUniqueInput
  }

  /**
   * Policy findUniqueOrThrow
   */
  export type PolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where: PolicyWhereUniqueInput
  }

  /**
   * Policy findFirst
   */
  export type PolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Policies.
     */
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }

  /**
   * Policy findFirstOrThrow
   */
  export type PolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Policies.
     */
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }

  /**
   * Policy findMany
   */
  export type PolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policies to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }

  /**
   * Policy create
   */
  export type PolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a Policy.
     */
    data: XOR<PolicyCreateInput, PolicyUncheckedCreateInput>
  }

  /**
   * Policy createMany
   */
  export type PolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Policies.
     */
    data: PolicyCreateManyInput | PolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Policy createManyAndReturn
   */
  export type PolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * The data used to create many Policies.
     */
    data: PolicyCreateManyInput | PolicyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Policy update
   */
  export type PolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a Policy.
     */
    data: XOR<PolicyUpdateInput, PolicyUncheckedUpdateInput>
    /**
     * Choose, which Policy to update.
     */
    where: PolicyWhereUniqueInput
  }

  /**
   * Policy updateMany
   */
  export type PolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Policies.
     */
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyInput>
    /**
     * Filter which Policies to update
     */
    where?: PolicyWhereInput
    /**
     * Limit how many Policies to update.
     */
    limit?: number
  }

  /**
   * Policy updateManyAndReturn
   */
  export type PolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * The data used to update Policies.
     */
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyInput>
    /**
     * Filter which Policies to update
     */
    where?: PolicyWhereInput
    /**
     * Limit how many Policies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Policy upsert
   */
  export type PolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the Policy to update in case it exists.
     */
    where: PolicyWhereUniqueInput
    /**
     * In case the Policy found by the `where` argument doesn't exist, create a new Policy with this data.
     */
    create: XOR<PolicyCreateInput, PolicyUncheckedCreateInput>
    /**
     * In case the Policy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PolicyUpdateInput, PolicyUncheckedUpdateInput>
  }

  /**
   * Policy delete
   */
  export type PolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter which Policy to delete.
     */
    where: PolicyWhereUniqueInput
  }

  /**
   * Policy deleteMany
   */
  export type PolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Policies to delete
     */
    where?: PolicyWhereInput
    /**
     * Limit how many Policies to delete.
     */
    limit?: number
  }

  /**
   * Policy.assignee
   */
  export type Policy$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Policy.artifacts
   */
  export type Policy$artifactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artifact
     */
    select?: ArtifactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artifact
     */
    omit?: ArtifactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtifactInclude<ExtArgs> | null
    where?: ArtifactWhereInput
    orderBy?: ArtifactOrderByWithRelationInput | ArtifactOrderByWithRelationInput[]
    cursor?: ArtifactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtifactScalarFieldEnum | ArtifactScalarFieldEnum[]
  }

  /**
   * Policy without action
   */
  export type PolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Policy
     */
    omit?: PolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PolicyInclude<ExtArgs> | null
  }


  /**
   * Model RequirementMap
   */

  export type AggregateRequirementMap = {
    _count: RequirementMapCountAggregateOutputType | null
    _min: RequirementMapMinAggregateOutputType | null
    _max: RequirementMapMaxAggregateOutputType | null
  }

  export type RequirementMapMinAggregateOutputType = {
    id: string | null
    requirementId: $Enums.RequirementId | null
    controlId: string | null
    frameworkInstanceId: string | null
  }

  export type RequirementMapMaxAggregateOutputType = {
    id: string | null
    requirementId: $Enums.RequirementId | null
    controlId: string | null
    frameworkInstanceId: string | null
  }

  export type RequirementMapCountAggregateOutputType = {
    id: number
    requirementId: number
    controlId: number
    frameworkInstanceId: number
    _all: number
  }


  export type RequirementMapMinAggregateInputType = {
    id?: true
    requirementId?: true
    controlId?: true
    frameworkInstanceId?: true
  }

  export type RequirementMapMaxAggregateInputType = {
    id?: true
    requirementId?: true
    controlId?: true
    frameworkInstanceId?: true
  }

  export type RequirementMapCountAggregateInputType = {
    id?: true
    requirementId?: true
    controlId?: true
    frameworkInstanceId?: true
    _all?: true
  }

  export type RequirementMapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequirementMap to aggregate.
     */
    where?: RequirementMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementMaps to fetch.
     */
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequirementMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequirementMaps
    **/
    _count?: true | RequirementMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequirementMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequirementMapMaxAggregateInputType
  }

  export type GetRequirementMapAggregateType<T extends RequirementMapAggregateArgs> = {
        [P in keyof T & keyof AggregateRequirementMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequirementMap[P]>
      : GetScalarType<T[P], AggregateRequirementMap[P]>
  }




  export type RequirementMapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequirementMapWhereInput
    orderBy?: RequirementMapOrderByWithAggregationInput | RequirementMapOrderByWithAggregationInput[]
    by: RequirementMapScalarFieldEnum[] | RequirementMapScalarFieldEnum
    having?: RequirementMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequirementMapCountAggregateInputType | true
    _min?: RequirementMapMinAggregateInputType
    _max?: RequirementMapMaxAggregateInputType
  }

  export type RequirementMapGroupByOutputType = {
    id: string
    requirementId: $Enums.RequirementId
    controlId: string
    frameworkInstanceId: string
    _count: RequirementMapCountAggregateOutputType | null
    _min: RequirementMapMinAggregateOutputType | null
    _max: RequirementMapMaxAggregateOutputType | null
  }

  type GetRequirementMapGroupByPayload<T extends RequirementMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequirementMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequirementMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequirementMapGroupByOutputType[P]>
            : GetScalarType<T[P], RequirementMapGroupByOutputType[P]>
        }
      >
    >


  export type RequirementMapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requirementId?: boolean
    controlId?: boolean
    frameworkInstanceId?: boolean
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requirementMap"]>

  export type RequirementMapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requirementId?: boolean
    controlId?: boolean
    frameworkInstanceId?: boolean
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requirementMap"]>

  export type RequirementMapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requirementId?: boolean
    controlId?: boolean
    frameworkInstanceId?: boolean
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requirementMap"]>

  export type RequirementMapSelectScalar = {
    id?: boolean
    requirementId?: boolean
    controlId?: boolean
    frameworkInstanceId?: boolean
  }

  export type RequirementMapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requirementId" | "controlId" | "frameworkInstanceId", ExtArgs["result"]["requirementMap"]>
  export type RequirementMapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }
  export type RequirementMapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }
  export type RequirementMapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    control?: boolean | ControlDefaultArgs<ExtArgs>
    frameworkInstance?: boolean | FrameworkInstanceDefaultArgs<ExtArgs>
  }

  export type $RequirementMapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequirementMap"
    objects: {
      control: Prisma.$ControlPayload<ExtArgs>
      frameworkInstance: Prisma.$FrameworkInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requirementId: $Enums.RequirementId
      controlId: string
      frameworkInstanceId: string
    }, ExtArgs["result"]["requirementMap"]>
    composites: {}
  }

  type RequirementMapGetPayload<S extends boolean | null | undefined | RequirementMapDefaultArgs> = $Result.GetResult<Prisma.$RequirementMapPayload, S>

  type RequirementMapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequirementMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequirementMapCountAggregateInputType | true
    }

  export interface RequirementMapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequirementMap'], meta: { name: 'RequirementMap' } }
    /**
     * Find zero or one RequirementMap that matches the filter.
     * @param {RequirementMapFindUniqueArgs} args - Arguments to find a RequirementMap
     * @example
     * // Get one RequirementMap
     * const requirementMap = await prisma.requirementMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequirementMapFindUniqueArgs>(args: SelectSubset<T, RequirementMapFindUniqueArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequirementMap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequirementMapFindUniqueOrThrowArgs} args - Arguments to find a RequirementMap
     * @example
     * // Get one RequirementMap
     * const requirementMap = await prisma.requirementMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequirementMapFindUniqueOrThrowArgs>(args: SelectSubset<T, RequirementMapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequirementMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapFindFirstArgs} args - Arguments to find a RequirementMap
     * @example
     * // Get one RequirementMap
     * const requirementMap = await prisma.requirementMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequirementMapFindFirstArgs>(args?: SelectSubset<T, RequirementMapFindFirstArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequirementMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapFindFirstOrThrowArgs} args - Arguments to find a RequirementMap
     * @example
     * // Get one RequirementMap
     * const requirementMap = await prisma.requirementMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequirementMapFindFirstOrThrowArgs>(args?: SelectSubset<T, RequirementMapFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequirementMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequirementMaps
     * const requirementMaps = await prisma.requirementMap.findMany()
     * 
     * // Get first 10 RequirementMaps
     * const requirementMaps = await prisma.requirementMap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requirementMapWithIdOnly = await prisma.requirementMap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequirementMapFindManyArgs>(args?: SelectSubset<T, RequirementMapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequirementMap.
     * @param {RequirementMapCreateArgs} args - Arguments to create a RequirementMap.
     * @example
     * // Create one RequirementMap
     * const RequirementMap = await prisma.requirementMap.create({
     *   data: {
     *     // ... data to create a RequirementMap
     *   }
     * })
     * 
     */
    create<T extends RequirementMapCreateArgs>(args: SelectSubset<T, RequirementMapCreateArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequirementMaps.
     * @param {RequirementMapCreateManyArgs} args - Arguments to create many RequirementMaps.
     * @example
     * // Create many RequirementMaps
     * const requirementMap = await prisma.requirementMap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequirementMapCreateManyArgs>(args?: SelectSubset<T, RequirementMapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequirementMaps and returns the data saved in the database.
     * @param {RequirementMapCreateManyAndReturnArgs} args - Arguments to create many RequirementMaps.
     * @example
     * // Create many RequirementMaps
     * const requirementMap = await prisma.requirementMap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequirementMaps and only return the `id`
     * const requirementMapWithIdOnly = await prisma.requirementMap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequirementMapCreateManyAndReturnArgs>(args?: SelectSubset<T, RequirementMapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequirementMap.
     * @param {RequirementMapDeleteArgs} args - Arguments to delete one RequirementMap.
     * @example
     * // Delete one RequirementMap
     * const RequirementMap = await prisma.requirementMap.delete({
     *   where: {
     *     // ... filter to delete one RequirementMap
     *   }
     * })
     * 
     */
    delete<T extends RequirementMapDeleteArgs>(args: SelectSubset<T, RequirementMapDeleteArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequirementMap.
     * @param {RequirementMapUpdateArgs} args - Arguments to update one RequirementMap.
     * @example
     * // Update one RequirementMap
     * const requirementMap = await prisma.requirementMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequirementMapUpdateArgs>(args: SelectSubset<T, RequirementMapUpdateArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequirementMaps.
     * @param {RequirementMapDeleteManyArgs} args - Arguments to filter RequirementMaps to delete.
     * @example
     * // Delete a few RequirementMaps
     * const { count } = await prisma.requirementMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequirementMapDeleteManyArgs>(args?: SelectSubset<T, RequirementMapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequirementMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequirementMaps
     * const requirementMap = await prisma.requirementMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequirementMapUpdateManyArgs>(args: SelectSubset<T, RequirementMapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequirementMaps and returns the data updated in the database.
     * @param {RequirementMapUpdateManyAndReturnArgs} args - Arguments to update many RequirementMaps.
     * @example
     * // Update many RequirementMaps
     * const requirementMap = await prisma.requirementMap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequirementMaps and only return the `id`
     * const requirementMapWithIdOnly = await prisma.requirementMap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequirementMapUpdateManyAndReturnArgs>(args: SelectSubset<T, RequirementMapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequirementMap.
     * @param {RequirementMapUpsertArgs} args - Arguments to update or create a RequirementMap.
     * @example
     * // Update or create a RequirementMap
     * const requirementMap = await prisma.requirementMap.upsert({
     *   create: {
     *     // ... data to create a RequirementMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequirementMap we want to update
     *   }
     * })
     */
    upsert<T extends RequirementMapUpsertArgs>(args: SelectSubset<T, RequirementMapUpsertArgs<ExtArgs>>): Prisma__RequirementMapClient<$Result.GetResult<Prisma.$RequirementMapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequirementMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapCountArgs} args - Arguments to filter RequirementMaps to count.
     * @example
     * // Count the number of RequirementMaps
     * const count = await prisma.requirementMap.count({
     *   where: {
     *     // ... the filter for the RequirementMaps we want to count
     *   }
     * })
    **/
    count<T extends RequirementMapCountArgs>(
      args?: Subset<T, RequirementMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequirementMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequirementMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequirementMapAggregateArgs>(args: Subset<T, RequirementMapAggregateArgs>): Prisma.PrismaPromise<GetRequirementMapAggregateType<T>>

    /**
     * Group by RequirementMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequirementMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequirementMapGroupByArgs['orderBy'] }
        : { orderBy?: RequirementMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequirementMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequirementMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequirementMap model
   */
  readonly fields: RequirementMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequirementMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequirementMapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    control<T extends ControlDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ControlDefaultArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    frameworkInstance<T extends FrameworkInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FrameworkInstanceDefaultArgs<ExtArgs>>): Prisma__FrameworkInstanceClient<$Result.GetResult<Prisma.$FrameworkInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequirementMap model
   */
  interface RequirementMapFieldRefs {
    readonly id: FieldRef<"RequirementMap", 'String'>
    readonly requirementId: FieldRef<"RequirementMap", 'RequirementId'>
    readonly controlId: FieldRef<"RequirementMap", 'String'>
    readonly frameworkInstanceId: FieldRef<"RequirementMap", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RequirementMap findUnique
   */
  export type RequirementMapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter, which RequirementMap to fetch.
     */
    where: RequirementMapWhereUniqueInput
  }

  /**
   * RequirementMap findUniqueOrThrow
   */
  export type RequirementMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter, which RequirementMap to fetch.
     */
    where: RequirementMapWhereUniqueInput
  }

  /**
   * RequirementMap findFirst
   */
  export type RequirementMapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter, which RequirementMap to fetch.
     */
    where?: RequirementMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementMaps to fetch.
     */
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequirementMaps.
     */
    cursor?: RequirementMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequirementMaps.
     */
    distinct?: RequirementMapScalarFieldEnum | RequirementMapScalarFieldEnum[]
  }

  /**
   * RequirementMap findFirstOrThrow
   */
  export type RequirementMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter, which RequirementMap to fetch.
     */
    where?: RequirementMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementMaps to fetch.
     */
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequirementMaps.
     */
    cursor?: RequirementMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequirementMaps.
     */
    distinct?: RequirementMapScalarFieldEnum | RequirementMapScalarFieldEnum[]
  }

  /**
   * RequirementMap findMany
   */
  export type RequirementMapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter, which RequirementMaps to fetch.
     */
    where?: RequirementMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementMaps to fetch.
     */
    orderBy?: RequirementMapOrderByWithRelationInput | RequirementMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequirementMaps.
     */
    cursor?: RequirementMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementMaps.
     */
    skip?: number
    distinct?: RequirementMapScalarFieldEnum | RequirementMapScalarFieldEnum[]
  }

  /**
   * RequirementMap create
   */
  export type RequirementMapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * The data needed to create a RequirementMap.
     */
    data: XOR<RequirementMapCreateInput, RequirementMapUncheckedCreateInput>
  }

  /**
   * RequirementMap createMany
   */
  export type RequirementMapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequirementMaps.
     */
    data: RequirementMapCreateManyInput | RequirementMapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequirementMap createManyAndReturn
   */
  export type RequirementMapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * The data used to create many RequirementMaps.
     */
    data: RequirementMapCreateManyInput | RequirementMapCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequirementMap update
   */
  export type RequirementMapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * The data needed to update a RequirementMap.
     */
    data: XOR<RequirementMapUpdateInput, RequirementMapUncheckedUpdateInput>
    /**
     * Choose, which RequirementMap to update.
     */
    where: RequirementMapWhereUniqueInput
  }

  /**
   * RequirementMap updateMany
   */
  export type RequirementMapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequirementMaps.
     */
    data: XOR<RequirementMapUpdateManyMutationInput, RequirementMapUncheckedUpdateManyInput>
    /**
     * Filter which RequirementMaps to update
     */
    where?: RequirementMapWhereInput
    /**
     * Limit how many RequirementMaps to update.
     */
    limit?: number
  }

  /**
   * RequirementMap updateManyAndReturn
   */
  export type RequirementMapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * The data used to update RequirementMaps.
     */
    data: XOR<RequirementMapUpdateManyMutationInput, RequirementMapUncheckedUpdateManyInput>
    /**
     * Filter which RequirementMaps to update
     */
    where?: RequirementMapWhereInput
    /**
     * Limit how many RequirementMaps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequirementMap upsert
   */
  export type RequirementMapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * The filter to search for the RequirementMap to update in case it exists.
     */
    where: RequirementMapWhereUniqueInput
    /**
     * In case the RequirementMap found by the `where` argument doesn't exist, create a new RequirementMap with this data.
     */
    create: XOR<RequirementMapCreateInput, RequirementMapUncheckedCreateInput>
    /**
     * In case the RequirementMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequirementMapUpdateInput, RequirementMapUncheckedUpdateInput>
  }

  /**
   * RequirementMap delete
   */
  export type RequirementMapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
    /**
     * Filter which RequirementMap to delete.
     */
    where: RequirementMapWhereUniqueInput
  }

  /**
   * RequirementMap deleteMany
   */
  export type RequirementMapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequirementMaps to delete
     */
    where?: RequirementMapWhereInput
    /**
     * Limit how many RequirementMaps to delete.
     */
    limit?: number
  }

  /**
   * RequirementMap without action
   */
  export type RequirementMapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequirementMap
     */
    select?: RequirementMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequirementMap
     */
    omit?: RequirementMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequirementMapInclude<ExtArgs> | null
  }


  /**
   * Model Risk
   */

  export type AggregateRisk = {
    _count: RiskCountAggregateOutputType | null
    _min: RiskMinAggregateOutputType | null
    _max: RiskMaxAggregateOutputType | null
  }

  export type RiskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: $Enums.RiskCategory | null
    department: $Enums.Departments | null
    status: $Enums.RiskStatus | null
    likelihood: $Enums.Likelihood | null
    impact: $Enums.Impact | null
    residualLikelihood: $Enums.Likelihood | null
    residualImpact: $Enums.Impact | null
    treatmentStrategyDescription: string | null
    treatmentStrategy: $Enums.RiskTreatmentType | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type RiskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: $Enums.RiskCategory | null
    department: $Enums.Departments | null
    status: $Enums.RiskStatus | null
    likelihood: $Enums.Likelihood | null
    impact: $Enums.Impact | null
    residualLikelihood: $Enums.Likelihood | null
    residualImpact: $Enums.Impact | null
    treatmentStrategyDescription: string | null
    treatmentStrategy: $Enums.RiskTreatmentType | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type RiskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    department: number
    status: number
    likelihood: number
    impact: number
    residualLikelihood: number
    residualImpact: number
    treatmentStrategyDescription: number
    treatmentStrategy: number
    createdAt: number
    updatedAt: number
    organizationId: number
    assigneeId: number
    _all: number
  }


  export type RiskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    department?: true
    status?: true
    likelihood?: true
    impact?: true
    residualLikelihood?: true
    residualImpact?: true
    treatmentStrategyDescription?: true
    treatmentStrategy?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type RiskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    department?: true
    status?: true
    likelihood?: true
    impact?: true
    residualLikelihood?: true
    residualImpact?: true
    treatmentStrategyDescription?: true
    treatmentStrategy?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type RiskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    department?: true
    status?: true
    likelihood?: true
    impact?: true
    residualLikelihood?: true
    residualImpact?: true
    treatmentStrategyDescription?: true
    treatmentStrategy?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
    _all?: true
  }

  export type RiskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Risk to aggregate.
     */
    where?: RiskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Risks to fetch.
     */
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RiskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Risks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Risks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Risks
    **/
    _count?: true | RiskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RiskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RiskMaxAggregateInputType
  }

  export type GetRiskAggregateType<T extends RiskAggregateArgs> = {
        [P in keyof T & keyof AggregateRisk]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRisk[P]>
      : GetScalarType<T[P], AggregateRisk[P]>
  }




  export type RiskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskWhereInput
    orderBy?: RiskOrderByWithAggregationInput | RiskOrderByWithAggregationInput[]
    by: RiskScalarFieldEnum[] | RiskScalarFieldEnum
    having?: RiskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RiskCountAggregateInputType | true
    _min?: RiskMinAggregateInputType
    _max?: RiskMaxAggregateInputType
  }

  export type RiskGroupByOutputType = {
    id: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department: $Enums.Departments | null
    status: $Enums.RiskStatus
    likelihood: $Enums.Likelihood
    impact: $Enums.Impact
    residualLikelihood: $Enums.Likelihood
    residualImpact: $Enums.Impact
    treatmentStrategyDescription: string | null
    treatmentStrategy: $Enums.RiskTreatmentType
    createdAt: Date
    updatedAt: Date
    organizationId: string
    assigneeId: string | null
    _count: RiskCountAggregateOutputType | null
    _min: RiskMinAggregateOutputType | null
    _max: RiskMaxAggregateOutputType | null
  }

  type GetRiskGroupByPayload<T extends RiskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RiskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RiskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RiskGroupByOutputType[P]>
            : GetScalarType<T[P], RiskGroupByOutputType[P]>
        }
      >
    >


  export type RiskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    department?: boolean
    status?: boolean
    likelihood?: boolean
    impact?: boolean
    residualLikelihood?: boolean
    residualImpact?: boolean
    treatmentStrategyDescription?: boolean
    treatmentStrategy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["risk"]>

  export type RiskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    department?: boolean
    status?: boolean
    likelihood?: boolean
    impact?: boolean
    residualLikelihood?: boolean
    residualImpact?: boolean
    treatmentStrategyDescription?: boolean
    treatmentStrategy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["risk"]>

  export type RiskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    department?: boolean
    status?: boolean
    likelihood?: boolean
    impact?: boolean
    residualLikelihood?: boolean
    residualImpact?: boolean
    treatmentStrategyDescription?: boolean
    treatmentStrategy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["risk"]>

  export type RiskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    department?: boolean
    status?: boolean
    likelihood?: boolean
    impact?: boolean
    residualLikelihood?: boolean
    residualImpact?: boolean
    treatmentStrategyDescription?: boolean
    treatmentStrategy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
  }

  export type RiskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "category" | "department" | "status" | "likelihood" | "impact" | "residualLikelihood" | "residualImpact" | "treatmentStrategyDescription" | "treatmentStrategy" | "createdAt" | "updatedAt" | "organizationId" | "assigneeId", ExtArgs["result"]["risk"]>
  export type RiskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }
  export type RiskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }
  export type RiskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Risk$assigneeArgs<ExtArgs>
  }

  export type $RiskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Risk"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      assignee: Prisma.$MemberPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      category: $Enums.RiskCategory
      department: $Enums.Departments | null
      status: $Enums.RiskStatus
      likelihood: $Enums.Likelihood
      impact: $Enums.Impact
      residualLikelihood: $Enums.Likelihood
      residualImpact: $Enums.Impact
      treatmentStrategyDescription: string | null
      treatmentStrategy: $Enums.RiskTreatmentType
      createdAt: Date
      updatedAt: Date
      organizationId: string
      assigneeId: string | null
    }, ExtArgs["result"]["risk"]>
    composites: {}
  }

  type RiskGetPayload<S extends boolean | null | undefined | RiskDefaultArgs> = $Result.GetResult<Prisma.$RiskPayload, S>

  type RiskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RiskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RiskCountAggregateInputType | true
    }

  export interface RiskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Risk'], meta: { name: 'Risk' } }
    /**
     * Find zero or one Risk that matches the filter.
     * @param {RiskFindUniqueArgs} args - Arguments to find a Risk
     * @example
     * // Get one Risk
     * const risk = await prisma.risk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RiskFindUniqueArgs>(args: SelectSubset<T, RiskFindUniqueArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Risk that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RiskFindUniqueOrThrowArgs} args - Arguments to find a Risk
     * @example
     * // Get one Risk
     * const risk = await prisma.risk.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RiskFindUniqueOrThrowArgs>(args: SelectSubset<T, RiskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Risk that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskFindFirstArgs} args - Arguments to find a Risk
     * @example
     * // Get one Risk
     * const risk = await prisma.risk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RiskFindFirstArgs>(args?: SelectSubset<T, RiskFindFirstArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Risk that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskFindFirstOrThrowArgs} args - Arguments to find a Risk
     * @example
     * // Get one Risk
     * const risk = await prisma.risk.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RiskFindFirstOrThrowArgs>(args?: SelectSubset<T, RiskFindFirstOrThrowArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Risks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Risks
     * const risks = await prisma.risk.findMany()
     * 
     * // Get first 10 Risks
     * const risks = await prisma.risk.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const riskWithIdOnly = await prisma.risk.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RiskFindManyArgs>(args?: SelectSubset<T, RiskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Risk.
     * @param {RiskCreateArgs} args - Arguments to create a Risk.
     * @example
     * // Create one Risk
     * const Risk = await prisma.risk.create({
     *   data: {
     *     // ... data to create a Risk
     *   }
     * })
     * 
     */
    create<T extends RiskCreateArgs>(args: SelectSubset<T, RiskCreateArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Risks.
     * @param {RiskCreateManyArgs} args - Arguments to create many Risks.
     * @example
     * // Create many Risks
     * const risk = await prisma.risk.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RiskCreateManyArgs>(args?: SelectSubset<T, RiskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Risks and returns the data saved in the database.
     * @param {RiskCreateManyAndReturnArgs} args - Arguments to create many Risks.
     * @example
     * // Create many Risks
     * const risk = await prisma.risk.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Risks and only return the `id`
     * const riskWithIdOnly = await prisma.risk.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RiskCreateManyAndReturnArgs>(args?: SelectSubset<T, RiskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Risk.
     * @param {RiskDeleteArgs} args - Arguments to delete one Risk.
     * @example
     * // Delete one Risk
     * const Risk = await prisma.risk.delete({
     *   where: {
     *     // ... filter to delete one Risk
     *   }
     * })
     * 
     */
    delete<T extends RiskDeleteArgs>(args: SelectSubset<T, RiskDeleteArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Risk.
     * @param {RiskUpdateArgs} args - Arguments to update one Risk.
     * @example
     * // Update one Risk
     * const risk = await prisma.risk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RiskUpdateArgs>(args: SelectSubset<T, RiskUpdateArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Risks.
     * @param {RiskDeleteManyArgs} args - Arguments to filter Risks to delete.
     * @example
     * // Delete a few Risks
     * const { count } = await prisma.risk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RiskDeleteManyArgs>(args?: SelectSubset<T, RiskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Risks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Risks
     * const risk = await prisma.risk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RiskUpdateManyArgs>(args: SelectSubset<T, RiskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Risks and returns the data updated in the database.
     * @param {RiskUpdateManyAndReturnArgs} args - Arguments to update many Risks.
     * @example
     * // Update many Risks
     * const risk = await prisma.risk.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Risks and only return the `id`
     * const riskWithIdOnly = await prisma.risk.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RiskUpdateManyAndReturnArgs>(args: SelectSubset<T, RiskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Risk.
     * @param {RiskUpsertArgs} args - Arguments to update or create a Risk.
     * @example
     * // Update or create a Risk
     * const risk = await prisma.risk.upsert({
     *   create: {
     *     // ... data to create a Risk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Risk we want to update
     *   }
     * })
     */
    upsert<T extends RiskUpsertArgs>(args: SelectSubset<T, RiskUpsertArgs<ExtArgs>>): Prisma__RiskClient<$Result.GetResult<Prisma.$RiskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Risks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskCountArgs} args - Arguments to filter Risks to count.
     * @example
     * // Count the number of Risks
     * const count = await prisma.risk.count({
     *   where: {
     *     // ... the filter for the Risks we want to count
     *   }
     * })
    **/
    count<T extends RiskCountArgs>(
      args?: Subset<T, RiskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RiskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Risk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RiskAggregateArgs>(args: Subset<T, RiskAggregateArgs>): Prisma.PrismaPromise<GetRiskAggregateType<T>>

    /**
     * Group by Risk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RiskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RiskGroupByArgs['orderBy'] }
        : { orderBy?: RiskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RiskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRiskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Risk model
   */
  readonly fields: RiskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Risk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RiskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Risk$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Risk$assigneeArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Risk model
   */
  interface RiskFieldRefs {
    readonly id: FieldRef<"Risk", 'String'>
    readonly title: FieldRef<"Risk", 'String'>
    readonly description: FieldRef<"Risk", 'String'>
    readonly category: FieldRef<"Risk", 'RiskCategory'>
    readonly department: FieldRef<"Risk", 'Departments'>
    readonly status: FieldRef<"Risk", 'RiskStatus'>
    readonly likelihood: FieldRef<"Risk", 'Likelihood'>
    readonly impact: FieldRef<"Risk", 'Impact'>
    readonly residualLikelihood: FieldRef<"Risk", 'Likelihood'>
    readonly residualImpact: FieldRef<"Risk", 'Impact'>
    readonly treatmentStrategyDescription: FieldRef<"Risk", 'String'>
    readonly treatmentStrategy: FieldRef<"Risk", 'RiskTreatmentType'>
    readonly createdAt: FieldRef<"Risk", 'DateTime'>
    readonly updatedAt: FieldRef<"Risk", 'DateTime'>
    readonly organizationId: FieldRef<"Risk", 'String'>
    readonly assigneeId: FieldRef<"Risk", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Risk findUnique
   */
  export type RiskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter, which Risk to fetch.
     */
    where: RiskWhereUniqueInput
  }

  /**
   * Risk findUniqueOrThrow
   */
  export type RiskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter, which Risk to fetch.
     */
    where: RiskWhereUniqueInput
  }

  /**
   * Risk findFirst
   */
  export type RiskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter, which Risk to fetch.
     */
    where?: RiskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Risks to fetch.
     */
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Risks.
     */
    cursor?: RiskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Risks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Risks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Risks.
     */
    distinct?: RiskScalarFieldEnum | RiskScalarFieldEnum[]
  }

  /**
   * Risk findFirstOrThrow
   */
  export type RiskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter, which Risk to fetch.
     */
    where?: RiskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Risks to fetch.
     */
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Risks.
     */
    cursor?: RiskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Risks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Risks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Risks.
     */
    distinct?: RiskScalarFieldEnum | RiskScalarFieldEnum[]
  }

  /**
   * Risk findMany
   */
  export type RiskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter, which Risks to fetch.
     */
    where?: RiskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Risks to fetch.
     */
    orderBy?: RiskOrderByWithRelationInput | RiskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Risks.
     */
    cursor?: RiskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Risks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Risks.
     */
    skip?: number
    distinct?: RiskScalarFieldEnum | RiskScalarFieldEnum[]
  }

  /**
   * Risk create
   */
  export type RiskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * The data needed to create a Risk.
     */
    data: XOR<RiskCreateInput, RiskUncheckedCreateInput>
  }

  /**
   * Risk createMany
   */
  export type RiskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Risks.
     */
    data: RiskCreateManyInput | RiskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Risk createManyAndReturn
   */
  export type RiskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * The data used to create many Risks.
     */
    data: RiskCreateManyInput | RiskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Risk update
   */
  export type RiskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * The data needed to update a Risk.
     */
    data: XOR<RiskUpdateInput, RiskUncheckedUpdateInput>
    /**
     * Choose, which Risk to update.
     */
    where: RiskWhereUniqueInput
  }

  /**
   * Risk updateMany
   */
  export type RiskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Risks.
     */
    data: XOR<RiskUpdateManyMutationInput, RiskUncheckedUpdateManyInput>
    /**
     * Filter which Risks to update
     */
    where?: RiskWhereInput
    /**
     * Limit how many Risks to update.
     */
    limit?: number
  }

  /**
   * Risk updateManyAndReturn
   */
  export type RiskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * The data used to update Risks.
     */
    data: XOR<RiskUpdateManyMutationInput, RiskUncheckedUpdateManyInput>
    /**
     * Filter which Risks to update
     */
    where?: RiskWhereInput
    /**
     * Limit how many Risks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Risk upsert
   */
  export type RiskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * The filter to search for the Risk to update in case it exists.
     */
    where: RiskWhereUniqueInput
    /**
     * In case the Risk found by the `where` argument doesn't exist, create a new Risk with this data.
     */
    create: XOR<RiskCreateInput, RiskUncheckedCreateInput>
    /**
     * In case the Risk was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RiskUpdateInput, RiskUncheckedUpdateInput>
  }

  /**
   * Risk delete
   */
  export type RiskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
    /**
     * Filter which Risk to delete.
     */
    where: RiskWhereUniqueInput
  }

  /**
   * Risk deleteMany
   */
  export type RiskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Risks to delete
     */
    where?: RiskWhereInput
    /**
     * Limit how many Risks to delete.
     */
    limit?: number
  }

  /**
   * Risk.assignee
   */
  export type Risk$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Risk without action
   */
  export type RiskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Risk
     */
    select?: RiskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Risk
     */
    omit?: RiskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskInclude<ExtArgs> | null
  }


  /**
   * Model ApiKey
   */

  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    name: string | null
    key: string | null
    salt: string | null
    createdAt: Date | null
    expiresAt: Date | null
    lastUsedAt: Date | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    key: string | null
    salt: string | null
    createdAt: Date | null
    expiresAt: Date | null
    lastUsedAt: Date | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    name: number
    key: number
    salt: number
    createdAt: number
    expiresAt: number
    lastUsedAt: number
    isActive: number
    organizationId: number
    _all: number
  }


  export type ApiKeyMinAggregateInputType = {
    id?: true
    name?: true
    key?: true
    salt?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    isActive?: true
    organizationId?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    name?: true
    key?: true
    salt?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    isActive?: true
    organizationId?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    name?: true
    key?: true
    salt?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    isActive?: true
    organizationId?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithAggregationInput | ApiKeyOrderByWithAggregationInput[]
    by: ApiKeyScalarFieldEnum[] | ApiKeyScalarFieldEnum
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }

  export type ApiKeyGroupByOutputType = {
    id: string
    name: string
    key: string
    salt: string | null
    createdAt: Date
    expiresAt: Date | null
    lastUsedAt: Date | null
    isActive: boolean
    organizationId: string
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    key?: boolean
    salt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    lastUsedAt?: boolean
    isActive?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    key?: boolean
    salt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    lastUsedAt?: boolean
    isActive?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    key?: boolean
    salt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    lastUsedAt?: boolean
    isActive?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectScalar = {
    id?: boolean
    name?: boolean
    key?: boolean
    salt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    lastUsedAt?: boolean
    isActive?: boolean
    organizationId?: boolean
  }

  export type ApiKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "key" | "salt" | "createdAt" | "expiresAt" | "lastUsedAt" | "isActive" | "organizationId", ExtArgs["result"]["apiKey"]>
  export type ApiKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ApiKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ApiKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ApiKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKey"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      key: string
      salt: string | null
      createdAt: Date
      expiresAt: Date | null
      lastUsedAt: Date | null
      isActive: boolean
      organizationId: string
    }, ExtArgs["result"]["apiKey"]>
    composites: {}
  }

  type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyPayload, S>

  type ApiKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApiKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKey'], meta: { name: 'ApiKey' } }
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyFindUniqueArgs>(args: SelectSubset<T, ApiKeyFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApiKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyFindFirstArgs>(args?: SelectSubset<T, ApiKeyFindFirstArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyFindManyArgs>(args?: SelectSubset<T, ApiKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
     */
    create<T extends ApiKeyCreateArgs>(args: SelectSubset<T, ApiKeyCreateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApiKeys.
     * @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyCreateManyArgs>(args?: SelectSubset<T, ApiKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiKeys and returns the data saved in the database.
     * @param {ApiKeyCreateManyAndReturnArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyDeleteArgs>(args: SelectSubset<T, ApiKeyDeleteArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUpdateArgs>(args: SelectSubset<T, ApiKeyUpdateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyDeleteManyArgs>(args?: SelectSubset<T, ApiKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUpdateManyArgs>(args: SelectSubset<T, ApiKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys and returns the data updated in the database.
     * @param {ApiKeyUpdateManyAndReturnArgs} args - Arguments to update many ApiKeys.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApiKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, ApiKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUpsertArgs>(args: SelectSubset<T, ApiKeyUpsertArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): Prisma.PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKey model
   */
  readonly fields: ApiKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKey model
   */
  interface ApiKeyFieldRefs {
    readonly id: FieldRef<"ApiKey", 'String'>
    readonly name: FieldRef<"ApiKey", 'String'>
    readonly key: FieldRef<"ApiKey", 'String'>
    readonly salt: FieldRef<"ApiKey", 'String'>
    readonly createdAt: FieldRef<"ApiKey", 'DateTime'>
    readonly expiresAt: FieldRef<"ApiKey", 'DateTime'>
    readonly lastUsedAt: FieldRef<"ApiKey", 'DateTime'>
    readonly isActive: FieldRef<"ApiKey", 'Boolean'>
    readonly organizationId: FieldRef<"ApiKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }

  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey createManyAndReturn
   */
  export type ApiKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to update.
     */
    limit?: number
  }

  /**
   * ApiKey updateManyAndReturn
   */
  export type ApiKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }

  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to delete.
     */
    limit?: number
  }

  /**
   * ApiKey without action
   */
  export type ApiKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    userId: string | null
    organizationId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    userId: string | null
    organizationId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    timestamp: number
    userId: number
    organizationId: number
    data: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    organizationId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    organizationId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    organizationId?: true
    data?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    timestamp: Date
    userId: string
    organizationId: string
    data: JsonValue
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    organizationId?: boolean
    data?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    organizationId?: boolean
    data?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    organizationId?: boolean
    data?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    organizationId?: boolean
    data?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timestamp" | "userId" | "organizationId" | "data", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timestamp: Date
      userId: string
      organizationId: string
      data: Prisma.JsonValue
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly organizationId: FieldRef<"AuditLog", 'String'>
    readonly data: FieldRef<"AuditLog", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    relatedId: string | null
    relatedType: $Enums.TaskType | null
    createdAt: Date | null
    updatedAt: Date | null
    dueDate: Date | null
    assigneeId: string | null
    organizationId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    relatedId: string | null
    relatedType: $Enums.TaskType | null
    createdAt: Date | null
    updatedAt: Date | null
    dueDate: Date | null
    assigneeId: string | null
    organizationId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    relatedId: number
    relatedType: number
    createdAt: number
    updatedAt: number
    dueDate: number
    assigneeId: number
    organizationId: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    relatedId?: true
    relatedType?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assigneeId?: true
    organizationId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    relatedId?: true
    relatedType?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assigneeId?: true
    organizationId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    relatedId?: true
    relatedType?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assigneeId?: true
    organizationId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string
    status: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt: Date
    updatedAt: Date
    dueDate: Date
    assigneeId: string | null
    organizationId: string
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    relatedId?: boolean
    relatedType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    relatedId?: boolean
    relatedType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    relatedId?: boolean
    relatedType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    organizationId?: boolean
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    relatedId?: boolean
    relatedType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    organizationId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "relatedId" | "relatedType" | "createdAt" | "updatedAt" | "dueDate" | "assigneeId" | "organizationId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      assignee: Prisma.$MemberPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      status: $Enums.TaskStatus
      relatedId: string
      relatedType: $Enums.TaskType
      createdAt: Date
      updatedAt: Date
      dueDate: Date
      assigneeId: string | null
      organizationId: string
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Task$assigneeArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly relatedId: FieldRef<"Task", 'String'>
    readonly relatedType: FieldRef<"Task", 'TaskType'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly assigneeId: FieldRef<"Task", 'String'>
    readonly organizationId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.VendorCategory | null
    status: $Enums.VendorStatus | null
    inherentProbability: $Enums.Likelihood | null
    inherentImpact: $Enums.Impact | null
    residualProbability: $Enums.Likelihood | null
    residualImpact: $Enums.Impact | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.VendorCategory | null
    status: $Enums.VendorStatus | null
    inherentProbability: $Enums.Likelihood | null
    inherentImpact: $Enums.Impact | null
    residualProbability: $Enums.Likelihood | null
    residualImpact: $Enums.Impact | null
    createdAt: Date | null
    updatedAt: Date | null
    organizationId: string | null
    assigneeId: string | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    status: number
    inherentProbability: number
    inherentImpact: number
    residualProbability: number
    residualImpact: number
    createdAt: number
    updatedAt: number
    organizationId: number
    assigneeId: number
    _all: number
  }


  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    status?: true
    inherentProbability?: true
    inherentImpact?: true
    residualProbability?: true
    residualImpact?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    status?: true
    inherentProbability?: true
    inherentImpact?: true
    residualProbability?: true
    residualImpact?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    status?: true
    inherentProbability?: true
    inherentImpact?: true
    residualProbability?: true
    residualImpact?: true
    createdAt?: true
    updatedAt?: true
    organizationId?: true
    assigneeId?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    name: string
    description: string
    category: $Enums.VendorCategory
    status: $Enums.VendorStatus
    inherentProbability: $Enums.Likelihood
    inherentImpact: $Enums.Impact
    residualProbability: $Enums.Likelihood
    residualImpact: $Enums.Impact
    createdAt: Date
    updatedAt: Date
    organizationId: string
    assigneeId: string | null
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    status?: boolean
    inherentProbability?: boolean
    inherentImpact?: boolean
    residualProbability?: boolean
    residualImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    contacts?: boolean | Vendor$contactsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    status?: boolean
    inherentProbability?: boolean
    inherentImpact?: boolean
    residualProbability?: boolean
    residualImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    status?: boolean
    inherentProbability?: boolean
    inherentImpact?: boolean
    residualProbability?: boolean
    residualImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    status?: boolean
    inherentProbability?: boolean
    inherentImpact?: boolean
    residualProbability?: boolean
    residualImpact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizationId?: boolean
    assigneeId?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "status" | "inherentProbability" | "inherentImpact" | "residualProbability" | "residualImpact" | "createdAt" | "updatedAt" | "organizationId" | "assigneeId", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | Vendor$contactsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
  }
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    assignee?: boolean | Vendor$assigneeArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      contacts: Prisma.$VendorContactPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      assignee: Prisma.$MemberPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      category: $Enums.VendorCategory
      status: $Enums.VendorStatus
      inherentProbability: $Enums.Likelihood
      inherentImpact: $Enums.Impact
      residualProbability: $Enums.Likelihood
      residualImpact: $Enums.Impact
      createdAt: Date
      updatedAt: Date
      organizationId: string
      assigneeId: string | null
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contacts<T extends Vendor$contactsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Vendor$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$assigneeArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly description: FieldRef<"Vendor", 'String'>
    readonly category: FieldRef<"Vendor", 'VendorCategory'>
    readonly status: FieldRef<"Vendor", 'VendorStatus'>
    readonly inherentProbability: FieldRef<"Vendor", 'Likelihood'>
    readonly inherentImpact: FieldRef<"Vendor", 'Impact'>
    readonly residualProbability: FieldRef<"Vendor", 'Likelihood'>
    readonly residualImpact: FieldRef<"Vendor", 'Impact'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
    readonly updatedAt: FieldRef<"Vendor", 'DateTime'>
    readonly organizationId: FieldRef<"Vendor", 'String'>
    readonly assigneeId: FieldRef<"Vendor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.contacts
   */
  export type Vendor$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    where?: VendorContactWhereInput
    orderBy?: VendorContactOrderByWithRelationInput | VendorContactOrderByWithRelationInput[]
    cursor?: VendorContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendorContactScalarFieldEnum | VendorContactScalarFieldEnum[]
  }

  /**
   * Vendor.assignee
   */
  export type Vendor$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model VendorContact
   */

  export type AggregateVendorContact = {
    _count: VendorContactCountAggregateOutputType | null
    _min: VendorContactMinAggregateOutputType | null
    _max: VendorContactMaxAggregateOutputType | null
  }

  export type VendorContactMinAggregateOutputType = {
    id: string | null
    vendorId: string | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorContactMaxAggregateOutputType = {
    id: string | null
    vendorId: string | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorContactCountAggregateOutputType = {
    id: number
    vendorId: number
    name: number
    email: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VendorContactMinAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorContactMaxAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorContactCountAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VendorContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VendorContact to aggregate.
     */
    where?: VendorContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendorContacts to fetch.
     */
    orderBy?: VendorContactOrderByWithRelationInput | VendorContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendorContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendorContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VendorContacts
    **/
    _count?: true | VendorContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorContactMaxAggregateInputType
  }

  export type GetVendorContactAggregateType<T extends VendorContactAggregateArgs> = {
        [P in keyof T & keyof AggregateVendorContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendorContact[P]>
      : GetScalarType<T[P], AggregateVendorContact[P]>
  }




  export type VendorContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorContactWhereInput
    orderBy?: VendorContactOrderByWithAggregationInput | VendorContactOrderByWithAggregationInput[]
    by: VendorContactScalarFieldEnum[] | VendorContactScalarFieldEnum
    having?: VendorContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorContactCountAggregateInputType | true
    _min?: VendorContactMinAggregateInputType
    _max?: VendorContactMaxAggregateInputType
  }

  export type VendorContactGroupByOutputType = {
    id: string
    vendorId: string
    name: string
    email: string
    phone: string
    createdAt: Date
    updatedAt: Date
    _count: VendorContactCountAggregateOutputType | null
    _min: VendorContactMinAggregateOutputType | null
    _max: VendorContactMaxAggregateOutputType | null
  }

  type GetVendorContactGroupByPayload<T extends VendorContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorContactGroupByOutputType[P]>
            : GetScalarType<T[P], VendorContactGroupByOutputType[P]>
        }
      >
    >


  export type VendorContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendorContact"]>

  export type VendorContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendorContact"]>

  export type VendorContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendorContact"]>

  export type VendorContactSelectScalar = {
    id?: boolean
    vendorId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VendorContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vendorId" | "name" | "email" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["vendorContact"]>
  export type VendorContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type VendorContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type VendorContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $VendorContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VendorContact"
    objects: {
      Vendor: Prisma.$VendorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      vendorId: string
      name: string
      email: string
      phone: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vendorContact"]>
    composites: {}
  }

  type VendorContactGetPayload<S extends boolean | null | undefined | VendorContactDefaultArgs> = $Result.GetResult<Prisma.$VendorContactPayload, S>

  type VendorContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorContactCountAggregateInputType | true
    }

  export interface VendorContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VendorContact'], meta: { name: 'VendorContact' } }
    /**
     * Find zero or one VendorContact that matches the filter.
     * @param {VendorContactFindUniqueArgs} args - Arguments to find a VendorContact
     * @example
     * // Get one VendorContact
     * const vendorContact = await prisma.vendorContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorContactFindUniqueArgs>(args: SelectSubset<T, VendorContactFindUniqueArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VendorContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorContactFindUniqueOrThrowArgs} args - Arguments to find a VendorContact
     * @example
     * // Get one VendorContact
     * const vendorContact = await prisma.vendorContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorContactFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VendorContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactFindFirstArgs} args - Arguments to find a VendorContact
     * @example
     * // Get one VendorContact
     * const vendorContact = await prisma.vendorContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorContactFindFirstArgs>(args?: SelectSubset<T, VendorContactFindFirstArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VendorContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactFindFirstOrThrowArgs} args - Arguments to find a VendorContact
     * @example
     * // Get one VendorContact
     * const vendorContact = await prisma.vendorContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorContactFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VendorContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VendorContacts
     * const vendorContacts = await prisma.vendorContact.findMany()
     * 
     * // Get first 10 VendorContacts
     * const vendorContacts = await prisma.vendorContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorContactWithIdOnly = await prisma.vendorContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorContactFindManyArgs>(args?: SelectSubset<T, VendorContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VendorContact.
     * @param {VendorContactCreateArgs} args - Arguments to create a VendorContact.
     * @example
     * // Create one VendorContact
     * const VendorContact = await prisma.vendorContact.create({
     *   data: {
     *     // ... data to create a VendorContact
     *   }
     * })
     * 
     */
    create<T extends VendorContactCreateArgs>(args: SelectSubset<T, VendorContactCreateArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VendorContacts.
     * @param {VendorContactCreateManyArgs} args - Arguments to create many VendorContacts.
     * @example
     * // Create many VendorContacts
     * const vendorContact = await prisma.vendorContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorContactCreateManyArgs>(args?: SelectSubset<T, VendorContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VendorContacts and returns the data saved in the database.
     * @param {VendorContactCreateManyAndReturnArgs} args - Arguments to create many VendorContacts.
     * @example
     * // Create many VendorContacts
     * const vendorContact = await prisma.vendorContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VendorContacts and only return the `id`
     * const vendorContactWithIdOnly = await prisma.vendorContact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorContactCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VendorContact.
     * @param {VendorContactDeleteArgs} args - Arguments to delete one VendorContact.
     * @example
     * // Delete one VendorContact
     * const VendorContact = await prisma.vendorContact.delete({
     *   where: {
     *     // ... filter to delete one VendorContact
     *   }
     * })
     * 
     */
    delete<T extends VendorContactDeleteArgs>(args: SelectSubset<T, VendorContactDeleteArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VendorContact.
     * @param {VendorContactUpdateArgs} args - Arguments to update one VendorContact.
     * @example
     * // Update one VendorContact
     * const vendorContact = await prisma.vendorContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorContactUpdateArgs>(args: SelectSubset<T, VendorContactUpdateArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VendorContacts.
     * @param {VendorContactDeleteManyArgs} args - Arguments to filter VendorContacts to delete.
     * @example
     * // Delete a few VendorContacts
     * const { count } = await prisma.vendorContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorContactDeleteManyArgs>(args?: SelectSubset<T, VendorContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VendorContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VendorContacts
     * const vendorContact = await prisma.vendorContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorContactUpdateManyArgs>(args: SelectSubset<T, VendorContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VendorContacts and returns the data updated in the database.
     * @param {VendorContactUpdateManyAndReturnArgs} args - Arguments to update many VendorContacts.
     * @example
     * // Update many VendorContacts
     * const vendorContact = await prisma.vendorContact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VendorContacts and only return the `id`
     * const vendorContactWithIdOnly = await prisma.vendorContact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorContactUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VendorContact.
     * @param {VendorContactUpsertArgs} args - Arguments to update or create a VendorContact.
     * @example
     * // Update or create a VendorContact
     * const vendorContact = await prisma.vendorContact.upsert({
     *   create: {
     *     // ... data to create a VendorContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VendorContact we want to update
     *   }
     * })
     */
    upsert<T extends VendorContactUpsertArgs>(args: SelectSubset<T, VendorContactUpsertArgs<ExtArgs>>): Prisma__VendorContactClient<$Result.GetResult<Prisma.$VendorContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VendorContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactCountArgs} args - Arguments to filter VendorContacts to count.
     * @example
     * // Count the number of VendorContacts
     * const count = await prisma.vendorContact.count({
     *   where: {
     *     // ... the filter for the VendorContacts we want to count
     *   }
     * })
    **/
    count<T extends VendorContactCountArgs>(
      args?: Subset<T, VendorContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VendorContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorContactAggregateArgs>(args: Subset<T, VendorContactAggregateArgs>): Prisma.PrismaPromise<GetVendorContactAggregateType<T>>

    /**
     * Group by VendorContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorContactGroupByArgs['orderBy'] }
        : { orderBy?: VendorContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VendorContact model
   */
  readonly fields: VendorContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VendorContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VendorContact model
   */
  interface VendorContactFieldRefs {
    readonly id: FieldRef<"VendorContact", 'String'>
    readonly vendorId: FieldRef<"VendorContact", 'String'>
    readonly name: FieldRef<"VendorContact", 'String'>
    readonly email: FieldRef<"VendorContact", 'String'>
    readonly phone: FieldRef<"VendorContact", 'String'>
    readonly createdAt: FieldRef<"VendorContact", 'DateTime'>
    readonly updatedAt: FieldRef<"VendorContact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VendorContact findUnique
   */
  export type VendorContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter, which VendorContact to fetch.
     */
    where: VendorContactWhereUniqueInput
  }

  /**
   * VendorContact findUniqueOrThrow
   */
  export type VendorContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter, which VendorContact to fetch.
     */
    where: VendorContactWhereUniqueInput
  }

  /**
   * VendorContact findFirst
   */
  export type VendorContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter, which VendorContact to fetch.
     */
    where?: VendorContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendorContacts to fetch.
     */
    orderBy?: VendorContactOrderByWithRelationInput | VendorContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VendorContacts.
     */
    cursor?: VendorContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendorContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendorContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VendorContacts.
     */
    distinct?: VendorContactScalarFieldEnum | VendorContactScalarFieldEnum[]
  }

  /**
   * VendorContact findFirstOrThrow
   */
  export type VendorContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter, which VendorContact to fetch.
     */
    where?: VendorContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendorContacts to fetch.
     */
    orderBy?: VendorContactOrderByWithRelationInput | VendorContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VendorContacts.
     */
    cursor?: VendorContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendorContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendorContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VendorContacts.
     */
    distinct?: VendorContactScalarFieldEnum | VendorContactScalarFieldEnum[]
  }

  /**
   * VendorContact findMany
   */
  export type VendorContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter, which VendorContacts to fetch.
     */
    where?: VendorContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendorContacts to fetch.
     */
    orderBy?: VendorContactOrderByWithRelationInput | VendorContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VendorContacts.
     */
    cursor?: VendorContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendorContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendorContacts.
     */
    skip?: number
    distinct?: VendorContactScalarFieldEnum | VendorContactScalarFieldEnum[]
  }

  /**
   * VendorContact create
   */
  export type VendorContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * The data needed to create a VendorContact.
     */
    data: XOR<VendorContactCreateInput, VendorContactUncheckedCreateInput>
  }

  /**
   * VendorContact createMany
   */
  export type VendorContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VendorContacts.
     */
    data: VendorContactCreateManyInput | VendorContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VendorContact createManyAndReturn
   */
  export type VendorContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * The data used to create many VendorContacts.
     */
    data: VendorContactCreateManyInput | VendorContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VendorContact update
   */
  export type VendorContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * The data needed to update a VendorContact.
     */
    data: XOR<VendorContactUpdateInput, VendorContactUncheckedUpdateInput>
    /**
     * Choose, which VendorContact to update.
     */
    where: VendorContactWhereUniqueInput
  }

  /**
   * VendorContact updateMany
   */
  export type VendorContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VendorContacts.
     */
    data: XOR<VendorContactUpdateManyMutationInput, VendorContactUncheckedUpdateManyInput>
    /**
     * Filter which VendorContacts to update
     */
    where?: VendorContactWhereInput
    /**
     * Limit how many VendorContacts to update.
     */
    limit?: number
  }

  /**
   * VendorContact updateManyAndReturn
   */
  export type VendorContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * The data used to update VendorContacts.
     */
    data: XOR<VendorContactUpdateManyMutationInput, VendorContactUncheckedUpdateManyInput>
    /**
     * Filter which VendorContacts to update
     */
    where?: VendorContactWhereInput
    /**
     * Limit how many VendorContacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VendorContact upsert
   */
  export type VendorContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * The filter to search for the VendorContact to update in case it exists.
     */
    where: VendorContactWhereUniqueInput
    /**
     * In case the VendorContact found by the `where` argument doesn't exist, create a new VendorContact with this data.
     */
    create: XOR<VendorContactCreateInput, VendorContactUncheckedCreateInput>
    /**
     * In case the VendorContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorContactUpdateInput, VendorContactUncheckedUpdateInput>
  }

  /**
   * VendorContact delete
   */
  export type VendorContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
    /**
     * Filter which VendorContact to delete.
     */
    where: VendorContactWhereUniqueInput
  }

  /**
   * VendorContact deleteMany
   */
  export type VendorContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VendorContacts to delete
     */
    where?: VendorContactWhereInput
    /**
     * Limit how many VendorContacts to delete.
     */
    limit?: number
  }

  /**
   * VendorContact without action
   */
  export type VendorContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorContact
     */
    select?: VendorContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendorContact
     */
    omit?: VendorContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorContactInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArtifactScalarFieldEnum: {
    id: 'id',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    evidenceId: 'evidenceId',
    policyId: 'policyId'
  };

  export type ArtifactScalarFieldEnum = (typeof ArtifactScalarFieldEnum)[keyof typeof ArtifactScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeTrainingVideoCompletionScalarFieldEnum: {
    id: 'id',
    completedAt: 'completedAt',
    videoId: 'videoId',
    memberId: 'memberId'
  };

  export type EmployeeTrainingVideoCompletionScalarFieldEnum = (typeof EmployeeTrainingVideoCompletionScalarFieldEnum)[keyof typeof EmployeeTrainingVideoCompletionScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    activeOrganizationId: 'activeOrganizationId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    department: 'department',
    isActive: 'isActive'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    email: 'email',
    role: 'role',
    status: 'status',
    expiresAt: 'expiresAt',
    inviterId: 'inviterId'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    entityId: 'entityId',
    createdAt: 'createdAt',
    authorId: 'authorId',
    organizationId: 'organizationId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ControlScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    lastReviewDate: 'lastReviewDate',
    nextReviewDate: 'nextReviewDate',
    organizationId: 'organizationId'
  };

  export type ControlScalarFieldEnum = (typeof ControlScalarFieldEnum)[keyof typeof ControlScalarFieldEnum]


  export const EvidenceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isNotRelevant: 'isNotRelevant',
    additionalUrls: 'additionalUrls',
    fileUrls: 'fileUrls',
    frequency: 'frequency',
    department: 'department',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastPublishedAt: 'lastPublishedAt',
    assigneeId: 'assigneeId',
    organizationId: 'organizationId'
  };

  export type EvidenceScalarFieldEnum = (typeof EvidenceScalarFieldEnum)[keyof typeof EvidenceScalarFieldEnum]


  export const FrameworkInstanceScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    frameworkId: 'frameworkId'
  };

  export type FrameworkInstanceScalarFieldEnum = (typeof FrameworkInstanceScalarFieldEnum)[keyof typeof FrameworkInstanceScalarFieldEnum]


  export const IntegrationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    integrationId: 'integrationId',
    settings: 'settings',
    userSettings: 'userSettings',
    organizationId: 'organizationId',
    lastRunAt: 'lastRunAt'
  };

  export type IntegrationScalarFieldEnum = (typeof IntegrationScalarFieldEnum)[keyof typeof IntegrationScalarFieldEnum]


  export const IntegrationResultScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    remediation: 'remediation',
    status: 'status',
    severity: 'severity',
    resultDetails: 'resultDetails',
    completedAt: 'completedAt',
    integrationId: 'integrationId',
    organizationId: 'organizationId',
    assignedUserId: 'assignedUserId'
  };

  export type IntegrationResultScalarFieldEnum = (typeof IntegrationResultScalarFieldEnum)[keyof typeof IntegrationResultScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    createdAt: 'createdAt',
    metadata: 'metadata',
    stripeCustomerId: 'stripeCustomerId'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const PolicyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    content: 'content',
    frequency: 'frequency',
    department: 'department',
    isRequiredToSign: 'isRequiredToSign',
    signedBy: 'signedBy',
    reviewDate: 'reviewDate',
    isArchived: 'isArchived',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastArchivedAt: 'lastArchivedAt',
    lastPublishedAt: 'lastPublishedAt',
    organizationId: 'organizationId',
    assigneeId: 'assigneeId'
  };

  export type PolicyScalarFieldEnum = (typeof PolicyScalarFieldEnum)[keyof typeof PolicyScalarFieldEnum]


  export const RequirementMapScalarFieldEnum: {
    id: 'id',
    requirementId: 'requirementId',
    controlId: 'controlId',
    frameworkInstanceId: 'frameworkInstanceId'
  };

  export type RequirementMapScalarFieldEnum = (typeof RequirementMapScalarFieldEnum)[keyof typeof RequirementMapScalarFieldEnum]


  export const RiskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    department: 'department',
    status: 'status',
    likelihood: 'likelihood',
    impact: 'impact',
    residualLikelihood: 'residualLikelihood',
    residualImpact: 'residualImpact',
    treatmentStrategyDescription: 'treatmentStrategyDescription',
    treatmentStrategy: 'treatmentStrategy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    assigneeId: 'assigneeId'
  };

  export type RiskScalarFieldEnum = (typeof RiskScalarFieldEnum)[keyof typeof RiskScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    key: 'key',
    salt: 'salt',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    lastUsedAt: 'lastUsedAt',
    isActive: 'isActive',
    organizationId: 'organizationId'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    userId: 'userId',
    organizationId: 'organizationId',
    data: 'data'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    relatedId: 'relatedId',
    relatedType: 'relatedType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dueDate: 'dueDate',
    assigneeId: 'assigneeId',
    organizationId: 'organizationId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    status: 'status',
    inherentProbability: 'inherentProbability',
    inherentImpact: 'inherentImpact',
    residualProbability: 'residualProbability',
    residualImpact: 'residualImpact',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    assigneeId: 'assigneeId'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const VendorContactScalarFieldEnum: {
    id: 'id',
    vendorId: 'vendorId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VendorContactScalarFieldEnum = (typeof VendorContactScalarFieldEnum)[keyof typeof VendorContactScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ArtifactType'
   */
  export type EnumArtifactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ArtifactType'>
    


  /**
   * Reference to a field of type 'ArtifactType[]'
   */
  export type ListEnumArtifactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ArtifactType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Departments'
   */
  export type EnumDepartmentsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Departments'>
    


  /**
   * Reference to a field of type 'Departments[]'
   */
  export type ListEnumDepartmentsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Departments[]'>
    


  /**
   * Reference to a field of type 'Frequency'
   */
  export type EnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency'>
    


  /**
   * Reference to a field of type 'Frequency[]'
   */
  export type ListEnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency[]'>
    


  /**
   * Reference to a field of type 'EvidenceStatus'
   */
  export type EnumEvidenceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EvidenceStatus'>
    


  /**
   * Reference to a field of type 'EvidenceStatus[]'
   */
  export type ListEnumEvidenceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EvidenceStatus[]'>
    


  /**
   * Reference to a field of type 'FrameworkId'
   */
  export type EnumFrameworkIdFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FrameworkId'>
    


  /**
   * Reference to a field of type 'FrameworkId[]'
   */
  export type ListEnumFrameworkIdFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FrameworkId[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'PolicyStatus'
   */
  export type EnumPolicyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PolicyStatus'>
    


  /**
   * Reference to a field of type 'PolicyStatus[]'
   */
  export type ListEnumPolicyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PolicyStatus[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'RequirementId'
   */
  export type EnumRequirementIdFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequirementId'>
    


  /**
   * Reference to a field of type 'RequirementId[]'
   */
  export type ListEnumRequirementIdFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequirementId[]'>
    


  /**
   * Reference to a field of type 'RiskCategory'
   */
  export type EnumRiskCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskCategory'>
    


  /**
   * Reference to a field of type 'RiskCategory[]'
   */
  export type ListEnumRiskCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskCategory[]'>
    


  /**
   * Reference to a field of type 'RiskStatus'
   */
  export type EnumRiskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskStatus'>
    


  /**
   * Reference to a field of type 'RiskStatus[]'
   */
  export type ListEnumRiskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskStatus[]'>
    


  /**
   * Reference to a field of type 'Likelihood'
   */
  export type EnumLikelihoodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Likelihood'>
    


  /**
   * Reference to a field of type 'Likelihood[]'
   */
  export type ListEnumLikelihoodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Likelihood[]'>
    


  /**
   * Reference to a field of type 'Impact'
   */
  export type EnumImpactFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Impact'>
    


  /**
   * Reference to a field of type 'Impact[]'
   */
  export type ListEnumImpactFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Impact[]'>
    


  /**
   * Reference to a field of type 'RiskTreatmentType'
   */
  export type EnumRiskTreatmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskTreatmentType'>
    


  /**
   * Reference to a field of type 'RiskTreatmentType[]'
   */
  export type ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskTreatmentType[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'TaskType'
   */
  export type EnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType'>
    


  /**
   * Reference to a field of type 'TaskType[]'
   */
  export type ListEnumTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskType[]'>
    


  /**
   * Reference to a field of type 'VendorCategory'
   */
  export type EnumVendorCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VendorCategory'>
    


  /**
   * Reference to a field of type 'VendorCategory[]'
   */
  export type ListEnumVendorCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VendorCategory[]'>
    


  /**
   * Reference to a field of type 'VendorStatus'
   */
  export type EnumVendorStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VendorStatus'>
    


  /**
   * Reference to a field of type 'VendorStatus[]'
   */
  export type ListEnumVendorStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VendorStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ArtifactWhereInput = {
    AND?: ArtifactWhereInput | ArtifactWhereInput[]
    OR?: ArtifactWhereInput[]
    NOT?: ArtifactWhereInput | ArtifactWhereInput[]
    id?: StringFilter<"Artifact"> | string
    type?: EnumArtifactTypeFilter<"Artifact"> | $Enums.ArtifactType
    createdAt?: DateTimeFilter<"Artifact"> | Date | string
    updatedAt?: DateTimeFilter<"Artifact"> | Date | string
    organizationId?: StringFilter<"Artifact"> | string
    evidenceId?: StringNullableFilter<"Artifact"> | string | null
    policyId?: StringNullableFilter<"Artifact"> | string | null
    controls?: ControlListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    evidence?: XOR<EvidenceNullableScalarRelationFilter, EvidenceWhereInput> | null
    policy?: XOR<PolicyNullableScalarRelationFilter, PolicyWhereInput> | null
  }

  export type ArtifactOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    evidenceId?: SortOrderInput | SortOrder
    policyId?: SortOrderInput | SortOrder
    controls?: ControlOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    evidence?: EvidenceOrderByWithRelationInput
    policy?: PolicyOrderByWithRelationInput
  }

  export type ArtifactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_evidenceId_policyId?: ArtifactOrganizationIdEvidenceIdPolicyIdCompoundUniqueInput
    AND?: ArtifactWhereInput | ArtifactWhereInput[]
    OR?: ArtifactWhereInput[]
    NOT?: ArtifactWhereInput | ArtifactWhereInput[]
    type?: EnumArtifactTypeFilter<"Artifact"> | $Enums.ArtifactType
    createdAt?: DateTimeFilter<"Artifact"> | Date | string
    updatedAt?: DateTimeFilter<"Artifact"> | Date | string
    organizationId?: StringFilter<"Artifact"> | string
    evidenceId?: StringNullableFilter<"Artifact"> | string | null
    policyId?: StringNullableFilter<"Artifact"> | string | null
    controls?: ControlListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    evidence?: XOR<EvidenceNullableScalarRelationFilter, EvidenceWhereInput> | null
    policy?: XOR<PolicyNullableScalarRelationFilter, PolicyWhereInput> | null
  }, "id" | "organizationId_evidenceId_policyId">

  export type ArtifactOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    evidenceId?: SortOrderInput | SortOrder
    policyId?: SortOrderInput | SortOrder
    _count?: ArtifactCountOrderByAggregateInput
    _max?: ArtifactMaxOrderByAggregateInput
    _min?: ArtifactMinOrderByAggregateInput
  }

  export type ArtifactScalarWhereWithAggregatesInput = {
    AND?: ArtifactScalarWhereWithAggregatesInput | ArtifactScalarWhereWithAggregatesInput[]
    OR?: ArtifactScalarWhereWithAggregatesInput[]
    NOT?: ArtifactScalarWhereWithAggregatesInput | ArtifactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Artifact"> | string
    type?: EnumArtifactTypeWithAggregatesFilter<"Artifact"> | $Enums.ArtifactType
    createdAt?: DateTimeWithAggregatesFilter<"Artifact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Artifact"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Artifact"> | string
    evidenceId?: StringNullableWithAggregatesFilter<"Artifact"> | string | null
    policyId?: StringNullableWithAggregatesFilter<"Artifact"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    auditLog?: AuditLogListRelationFilter
    integrationResults?: IntegrationResultListRelationFilter
    invitations?: InvitationListRelationFilter
    members?: MemberListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    auditLog?: AuditLogOrderByRelationAggregateInput
    integrationResults?: IntegrationResultOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    members?: MemberOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    auditLog?: AuditLogListRelationFilter
    integrationResults?: IntegrationResultListRelationFilter
    invitations?: InvitationListRelationFilter
    members?: MemberListRelationFilter
    sessions?: SessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type EmployeeTrainingVideoCompletionWhereInput = {
    AND?: EmployeeTrainingVideoCompletionWhereInput | EmployeeTrainingVideoCompletionWhereInput[]
    OR?: EmployeeTrainingVideoCompletionWhereInput[]
    NOT?: EmployeeTrainingVideoCompletionWhereInput | EmployeeTrainingVideoCompletionWhereInput[]
    id?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    completedAt?: DateTimeNullableFilter<"EmployeeTrainingVideoCompletion"> | Date | string | null
    videoId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    memberId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type EmployeeTrainingVideoCompletionOrderByWithRelationInput = {
    id?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    videoId?: SortOrder
    memberId?: SortOrder
    member?: MemberOrderByWithRelationInput
  }

  export type EmployeeTrainingVideoCompletionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    memberId_videoId?: EmployeeTrainingVideoCompletionMemberIdVideoIdCompoundUniqueInput
    AND?: EmployeeTrainingVideoCompletionWhereInput | EmployeeTrainingVideoCompletionWhereInput[]
    OR?: EmployeeTrainingVideoCompletionWhereInput[]
    NOT?: EmployeeTrainingVideoCompletionWhereInput | EmployeeTrainingVideoCompletionWhereInput[]
    completedAt?: DateTimeNullableFilter<"EmployeeTrainingVideoCompletion"> | Date | string | null
    videoId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    memberId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id" | "memberId_videoId">

  export type EmployeeTrainingVideoCompletionOrderByWithAggregationInput = {
    id?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    videoId?: SortOrder
    memberId?: SortOrder
    _count?: EmployeeTrainingVideoCompletionCountOrderByAggregateInput
    _max?: EmployeeTrainingVideoCompletionMaxOrderByAggregateInput
    _min?: EmployeeTrainingVideoCompletionMinOrderByAggregateInput
  }

  export type EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput = {
    AND?: EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput | EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput[]
    OR?: EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput[]
    NOT?: EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput | EmployeeTrainingVideoCompletionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmployeeTrainingVideoCompletion"> | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"EmployeeTrainingVideoCompletion"> | Date | string | null
    videoId?: StringWithAggregatesFilter<"EmployeeTrainingVideoCompletion"> | string
    memberId?: StringWithAggregatesFilter<"EmployeeTrainingVideoCompletion"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    activeOrganizationId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    activeOrganizationId?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
    activeOrganizationId?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: StringFilter<"Member"> | string
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: EnumRoleFilter<"Member"> | $Enums.Role
    createdAt?: DateTimeFilter<"Member"> | Date | string
    department?: EnumDepartmentsFilter<"Member"> | $Enums.Departments
    isActive?: BoolFilter<"Member"> | boolean
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionListRelationFilter
    Evidence?: EvidenceListRelationFilter
    Policy?: PolicyListRelationFilter
    Risk?: RiskListRelationFilter
    Task?: TaskListRelationFilter
    Vendor?: VendorListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionOrderByRelationAggregateInput
    Evidence?: EvidenceOrderByRelationAggregateInput
    Policy?: PolicyOrderByRelationAggregateInput
    Risk?: RiskOrderByRelationAggregateInput
    Task?: TaskOrderByRelationAggregateInput
    Vendor?: VendorOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: EnumRoleFilter<"Member"> | $Enums.Role
    createdAt?: DateTimeFilter<"Member"> | Date | string
    department?: EnumDepartmentsFilter<"Member"> | $Enums.Departments
    isActive?: BoolFilter<"Member"> | boolean
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionListRelationFilter
    Evidence?: EvidenceListRelationFilter
    Policy?: PolicyListRelationFilter
    Risk?: RiskListRelationFilter
    Task?: TaskListRelationFilter
    Vendor?: VendorListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Member"> | string
    organizationId?: StringWithAggregatesFilter<"Member"> | string
    userId?: StringWithAggregatesFilter<"Member"> | string
    role?: EnumRoleWithAggregatesFilter<"Member"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    department?: EnumDepartmentsWithAggregatesFilter<"Member"> | $Enums.Departments
    isActive?: BoolWithAggregatesFilter<"Member"> | boolean
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    id?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: EnumRoleNullableFilter<"Invitation"> | $Enums.Role | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrderInput | SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: EnumRoleNullableFilter<"Invitation"> | $Enums.Role | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrderInput | SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invitation"> | string
    organizationId?: StringWithAggregatesFilter<"Invitation"> | string
    email?: StringWithAggregatesFilter<"Invitation"> | string
    role?: EnumRoleNullableWithAggregatesFilter<"Invitation"> | $Enums.Role | null
    status?: StringWithAggregatesFilter<"Invitation"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    inviterId?: StringWithAggregatesFilter<"Invitation"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    organizationId?: StringFilter<"Comment"> | string
    author?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    author?: MemberOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    organizationId?: StringFilter<"Comment"> | string
    author?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    entityId?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    organizationId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type ControlWhereInput = {
    AND?: ControlWhereInput | ControlWhereInput[]
    OR?: ControlWhereInput[]
    NOT?: ControlWhereInput | ControlWhereInput[]
    id?: StringFilter<"Control"> | string
    name?: StringFilter<"Control"> | string
    description?: StringFilter<"Control"> | string
    lastReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    organizationId?: StringFilter<"Control"> | string
    frameworkInstances?: FrameworkInstanceListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    artifacts?: ArtifactListRelationFilter
    requirementsMapped?: RequirementMapListRelationFilter
  }

  export type ControlOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    lastReviewDate?: SortOrderInput | SortOrder
    nextReviewDate?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    frameworkInstances?: FrameworkInstanceOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    artifacts?: ArtifactOrderByRelationAggregateInput
    requirementsMapped?: RequirementMapOrderByRelationAggregateInput
  }

  export type ControlWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ControlWhereInput | ControlWhereInput[]
    OR?: ControlWhereInput[]
    NOT?: ControlWhereInput | ControlWhereInput[]
    name?: StringFilter<"Control"> | string
    description?: StringFilter<"Control"> | string
    lastReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    organizationId?: StringFilter<"Control"> | string
    frameworkInstances?: FrameworkInstanceListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    artifacts?: ArtifactListRelationFilter
    requirementsMapped?: RequirementMapListRelationFilter
  }, "id">

  export type ControlOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    lastReviewDate?: SortOrderInput | SortOrder
    nextReviewDate?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    _count?: ControlCountOrderByAggregateInput
    _max?: ControlMaxOrderByAggregateInput
    _min?: ControlMinOrderByAggregateInput
  }

  export type ControlScalarWhereWithAggregatesInput = {
    AND?: ControlScalarWhereWithAggregatesInput | ControlScalarWhereWithAggregatesInput[]
    OR?: ControlScalarWhereWithAggregatesInput[]
    NOT?: ControlScalarWhereWithAggregatesInput | ControlScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Control"> | string
    name?: StringWithAggregatesFilter<"Control"> | string
    description?: StringWithAggregatesFilter<"Control"> | string
    lastReviewDate?: DateTimeNullableWithAggregatesFilter<"Control"> | Date | string | null
    nextReviewDate?: DateTimeNullableWithAggregatesFilter<"Control"> | Date | string | null
    organizationId?: StringWithAggregatesFilter<"Control"> | string
  }

  export type EvidenceWhereInput = {
    AND?: EvidenceWhereInput | EvidenceWhereInput[]
    OR?: EvidenceWhereInput[]
    NOT?: EvidenceWhereInput | EvidenceWhereInput[]
    id?: StringFilter<"Evidence"> | string
    name?: StringFilter<"Evidence"> | string
    description?: StringFilter<"Evidence"> | string
    isNotRelevant?: BoolFilter<"Evidence"> | boolean
    additionalUrls?: StringNullableListFilter<"Evidence">
    fileUrls?: StringNullableListFilter<"Evidence">
    frequency?: EnumFrequencyNullableFilter<"Evidence"> | $Enums.Frequency | null
    department?: EnumDepartmentsFilter<"Evidence"> | $Enums.Departments
    status?: EnumEvidenceStatusNullableFilter<"Evidence"> | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFilter<"Evidence"> | Date | string
    updatedAt?: DateTimeFilter<"Evidence"> | Date | string
    lastPublishedAt?: DateTimeNullableFilter<"Evidence"> | Date | string | null
    assigneeId?: StringNullableFilter<"Evidence"> | string | null
    organizationId?: StringFilter<"Evidence"> | string
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    artifacts?: ArtifactListRelationFilter
  }

  export type EvidenceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isNotRelevant?: SortOrder
    additionalUrls?: SortOrder
    fileUrls?: SortOrder
    frequency?: SortOrderInput | SortOrder
    department?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastPublishedAt?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    assignee?: MemberOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    artifacts?: ArtifactOrderByRelationAggregateInput
  }

  export type EvidenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EvidenceWhereInput | EvidenceWhereInput[]
    OR?: EvidenceWhereInput[]
    NOT?: EvidenceWhereInput | EvidenceWhereInput[]
    name?: StringFilter<"Evidence"> | string
    description?: StringFilter<"Evidence"> | string
    isNotRelevant?: BoolFilter<"Evidence"> | boolean
    additionalUrls?: StringNullableListFilter<"Evidence">
    fileUrls?: StringNullableListFilter<"Evidence">
    frequency?: EnumFrequencyNullableFilter<"Evidence"> | $Enums.Frequency | null
    department?: EnumDepartmentsFilter<"Evidence"> | $Enums.Departments
    status?: EnumEvidenceStatusNullableFilter<"Evidence"> | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFilter<"Evidence"> | Date | string
    updatedAt?: DateTimeFilter<"Evidence"> | Date | string
    lastPublishedAt?: DateTimeNullableFilter<"Evidence"> | Date | string | null
    assigneeId?: StringNullableFilter<"Evidence"> | string | null
    organizationId?: StringFilter<"Evidence"> | string
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    artifacts?: ArtifactListRelationFilter
  }, "id">

  export type EvidenceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isNotRelevant?: SortOrder
    additionalUrls?: SortOrder
    fileUrls?: SortOrder
    frequency?: SortOrderInput | SortOrder
    department?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastPublishedAt?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    _count?: EvidenceCountOrderByAggregateInput
    _max?: EvidenceMaxOrderByAggregateInput
    _min?: EvidenceMinOrderByAggregateInput
  }

  export type EvidenceScalarWhereWithAggregatesInput = {
    AND?: EvidenceScalarWhereWithAggregatesInput | EvidenceScalarWhereWithAggregatesInput[]
    OR?: EvidenceScalarWhereWithAggregatesInput[]
    NOT?: EvidenceScalarWhereWithAggregatesInput | EvidenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Evidence"> | string
    name?: StringWithAggregatesFilter<"Evidence"> | string
    description?: StringWithAggregatesFilter<"Evidence"> | string
    isNotRelevant?: BoolWithAggregatesFilter<"Evidence"> | boolean
    additionalUrls?: StringNullableListFilter<"Evidence">
    fileUrls?: StringNullableListFilter<"Evidence">
    frequency?: EnumFrequencyNullableWithAggregatesFilter<"Evidence"> | $Enums.Frequency | null
    department?: EnumDepartmentsWithAggregatesFilter<"Evidence"> | $Enums.Departments
    status?: EnumEvidenceStatusNullableWithAggregatesFilter<"Evidence"> | $Enums.EvidenceStatus | null
    createdAt?: DateTimeWithAggregatesFilter<"Evidence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Evidence"> | Date | string
    lastPublishedAt?: DateTimeNullableWithAggregatesFilter<"Evidence"> | Date | string | null
    assigneeId?: StringNullableWithAggregatesFilter<"Evidence"> | string | null
    organizationId?: StringWithAggregatesFilter<"Evidence"> | string
  }

  export type FrameworkInstanceWhereInput = {
    AND?: FrameworkInstanceWhereInput | FrameworkInstanceWhereInput[]
    OR?: FrameworkInstanceWhereInput[]
    NOT?: FrameworkInstanceWhereInput | FrameworkInstanceWhereInput[]
    id?: StringFilter<"FrameworkInstance"> | string
    organizationId?: StringFilter<"FrameworkInstance"> | string
    frameworkId?: EnumFrameworkIdFilter<"FrameworkInstance"> | $Enums.FrameworkId
    controls?: ControlListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    requirementsMapped?: RequirementMapListRelationFilter
  }

  export type FrameworkInstanceOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    frameworkId?: SortOrder
    controls?: ControlOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    requirementsMapped?: RequirementMapOrderByRelationAggregateInput
  }

  export type FrameworkInstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_frameworkId?: FrameworkInstanceOrganizationIdFrameworkIdCompoundUniqueInput
    AND?: FrameworkInstanceWhereInput | FrameworkInstanceWhereInput[]
    OR?: FrameworkInstanceWhereInput[]
    NOT?: FrameworkInstanceWhereInput | FrameworkInstanceWhereInput[]
    organizationId?: StringFilter<"FrameworkInstance"> | string
    frameworkId?: EnumFrameworkIdFilter<"FrameworkInstance"> | $Enums.FrameworkId
    controls?: ControlListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    requirementsMapped?: RequirementMapListRelationFilter
  }, "id" | "organizationId_frameworkId">

  export type FrameworkInstanceOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    frameworkId?: SortOrder
    _count?: FrameworkInstanceCountOrderByAggregateInput
    _max?: FrameworkInstanceMaxOrderByAggregateInput
    _min?: FrameworkInstanceMinOrderByAggregateInput
  }

  export type FrameworkInstanceScalarWhereWithAggregatesInput = {
    AND?: FrameworkInstanceScalarWhereWithAggregatesInput | FrameworkInstanceScalarWhereWithAggregatesInput[]
    OR?: FrameworkInstanceScalarWhereWithAggregatesInput[]
    NOT?: FrameworkInstanceScalarWhereWithAggregatesInput | FrameworkInstanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FrameworkInstance"> | string
    organizationId?: StringWithAggregatesFilter<"FrameworkInstance"> | string
    frameworkId?: EnumFrameworkIdWithAggregatesFilter<"FrameworkInstance"> | $Enums.FrameworkId
  }

  export type IntegrationWhereInput = {
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    id?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    integrationId?: StringFilter<"Integration"> | string
    settings?: JsonFilter<"Integration">
    userSettings?: JsonFilter<"Integration">
    organizationId?: StringFilter<"Integration"> | string
    lastRunAt?: DateTimeNullableFilter<"Integration"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    results?: IntegrationResultListRelationFilter
  }

  export type IntegrationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    settings?: SortOrder
    userSettings?: SortOrder
    organizationId?: SortOrder
    lastRunAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    results?: IntegrationResultOrderByRelationAggregateInput
  }

  export type IntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    integrationId?: StringFilter<"Integration"> | string
    settings?: JsonFilter<"Integration">
    userSettings?: JsonFilter<"Integration">
    organizationId?: StringFilter<"Integration"> | string
    lastRunAt?: DateTimeNullableFilter<"Integration"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    results?: IntegrationResultListRelationFilter
  }, "id" | "name">

  export type IntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    settings?: SortOrder
    userSettings?: SortOrder
    organizationId?: SortOrder
    lastRunAt?: SortOrderInput | SortOrder
    _count?: IntegrationCountOrderByAggregateInput
    _max?: IntegrationMaxOrderByAggregateInput
    _min?: IntegrationMinOrderByAggregateInput
  }

  export type IntegrationScalarWhereWithAggregatesInput = {
    AND?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    OR?: IntegrationScalarWhereWithAggregatesInput[]
    NOT?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Integration"> | string
    name?: StringWithAggregatesFilter<"Integration"> | string
    integrationId?: StringWithAggregatesFilter<"Integration"> | string
    settings?: JsonWithAggregatesFilter<"Integration">
    userSettings?: JsonWithAggregatesFilter<"Integration">
    organizationId?: StringWithAggregatesFilter<"Integration"> | string
    lastRunAt?: DateTimeNullableWithAggregatesFilter<"Integration"> | Date | string | null
  }

  export type IntegrationResultWhereInput = {
    AND?: IntegrationResultWhereInput | IntegrationResultWhereInput[]
    OR?: IntegrationResultWhereInput[]
    NOT?: IntegrationResultWhereInput | IntegrationResultWhereInput[]
    id?: StringFilter<"IntegrationResult"> | string
    title?: StringNullableFilter<"IntegrationResult"> | string | null
    description?: StringNullableFilter<"IntegrationResult"> | string | null
    remediation?: StringNullableFilter<"IntegrationResult"> | string | null
    status?: StringNullableFilter<"IntegrationResult"> | string | null
    severity?: StringNullableFilter<"IntegrationResult"> | string | null
    resultDetails?: JsonNullableFilter<"IntegrationResult">
    completedAt?: DateTimeNullableFilter<"IntegrationResult"> | Date | string | null
    integrationId?: StringFilter<"IntegrationResult"> | string
    organizationId?: StringFilter<"IntegrationResult"> | string
    assignedUserId?: StringNullableFilter<"IntegrationResult"> | string | null
    assignedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    integration?: XOR<IntegrationScalarRelationFilter, IntegrationWhereInput>
  }

  export type IntegrationResultOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    remediation?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    resultDetails?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    assignedUser?: UserOrderByWithRelationInput
    integration?: IntegrationOrderByWithRelationInput
  }

  export type IntegrationResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IntegrationResultWhereInput | IntegrationResultWhereInput[]
    OR?: IntegrationResultWhereInput[]
    NOT?: IntegrationResultWhereInput | IntegrationResultWhereInput[]
    title?: StringNullableFilter<"IntegrationResult"> | string | null
    description?: StringNullableFilter<"IntegrationResult"> | string | null
    remediation?: StringNullableFilter<"IntegrationResult"> | string | null
    status?: StringNullableFilter<"IntegrationResult"> | string | null
    severity?: StringNullableFilter<"IntegrationResult"> | string | null
    resultDetails?: JsonNullableFilter<"IntegrationResult">
    completedAt?: DateTimeNullableFilter<"IntegrationResult"> | Date | string | null
    integrationId?: StringFilter<"IntegrationResult"> | string
    organizationId?: StringFilter<"IntegrationResult"> | string
    assignedUserId?: StringNullableFilter<"IntegrationResult"> | string | null
    assignedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    integration?: XOR<IntegrationScalarRelationFilter, IntegrationWhereInput>
  }, "id">

  export type IntegrationResultOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    remediation?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    resultDetails?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    _count?: IntegrationResultCountOrderByAggregateInput
    _max?: IntegrationResultMaxOrderByAggregateInput
    _min?: IntegrationResultMinOrderByAggregateInput
  }

  export type IntegrationResultScalarWhereWithAggregatesInput = {
    AND?: IntegrationResultScalarWhereWithAggregatesInput | IntegrationResultScalarWhereWithAggregatesInput[]
    OR?: IntegrationResultScalarWhereWithAggregatesInput[]
    NOT?: IntegrationResultScalarWhereWithAggregatesInput | IntegrationResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IntegrationResult"> | string
    title?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
    description?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
    remediation?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
    status?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
    severity?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
    resultDetails?: JsonNullableWithAggregatesFilter<"IntegrationResult">
    completedAt?: DateTimeNullableWithAggregatesFilter<"IntegrationResult"> | Date | string | null
    integrationId?: StringWithAggregatesFilter<"IntegrationResult"> | string
    organizationId?: StringWithAggregatesFilter<"IntegrationResult"> | string
    assignedUserId?: StringNullableWithAggregatesFilter<"IntegrationResult"> | string | null
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    metadata?: StringNullableFilter<"Organization"> | string | null
    stripeCustomerId?: StringNullableFilter<"Organization"> | string | null
    apiKeys?: ApiKeyListRelationFilter
    artifacts?: ArtifactListRelationFilter
    auditLog?: AuditLogListRelationFilter
    controls?: ControlListRelationFilter
    evidence?: EvidenceListRelationFilter
    frameworkInstances?: FrameworkInstanceListRelationFilter
    integrations?: IntegrationListRelationFilter
    invitations?: InvitationListRelationFilter
    members?: MemberListRelationFilter
    policy?: PolicyListRelationFilter
    risk?: RiskListRelationFilter
    vendors?: VendorListRelationFilter
    tasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    apiKeys?: ApiKeyOrderByRelationAggregateInput
    artifacts?: ArtifactOrderByRelationAggregateInput
    auditLog?: AuditLogOrderByRelationAggregateInput
    controls?: ControlOrderByRelationAggregateInput
    evidence?: EvidenceOrderByRelationAggregateInput
    frameworkInstances?: FrameworkInstanceOrderByRelationAggregateInput
    integrations?: IntegrationOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    members?: MemberOrderByRelationAggregateInput
    policy?: PolicyOrderByRelationAggregateInput
    risk?: RiskOrderByRelationAggregateInput
    vendors?: VendorOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    metadata?: StringNullableFilter<"Organization"> | string | null
    stripeCustomerId?: StringNullableFilter<"Organization"> | string | null
    apiKeys?: ApiKeyListRelationFilter
    artifacts?: ArtifactListRelationFilter
    auditLog?: AuditLogListRelationFilter
    controls?: ControlListRelationFilter
    evidence?: EvidenceListRelationFilter
    frameworkInstances?: FrameworkInstanceListRelationFilter
    integrations?: IntegrationListRelationFilter
    invitations?: InvitationListRelationFilter
    members?: MemberListRelationFilter
    policy?: PolicyListRelationFilter
    risk?: RiskListRelationFilter
    vendors?: VendorListRelationFilter
    tasks?: TaskListRelationFilter
    comments?: CommentListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    metadata?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Organization"> | string | null
  }

  export type PolicyWhereInput = {
    AND?: PolicyWhereInput | PolicyWhereInput[]
    OR?: PolicyWhereInput[]
    NOT?: PolicyWhereInput | PolicyWhereInput[]
    id?: StringFilter<"Policy"> | string
    name?: StringFilter<"Policy"> | string
    description?: StringNullableFilter<"Policy"> | string | null
    status?: EnumPolicyStatusFilter<"Policy"> | $Enums.PolicyStatus
    content?: JsonNullableListFilter<"Policy">
    frequency?: EnumFrequencyNullableFilter<"Policy"> | $Enums.Frequency | null
    department?: EnumDepartmentsNullableFilter<"Policy"> | $Enums.Departments | null
    isRequiredToSign?: BoolFilter<"Policy"> | boolean
    signedBy?: StringNullableListFilter<"Policy">
    reviewDate?: DateTimeNullableFilter<"Policy"> | Date | string | null
    isArchived?: BoolFilter<"Policy"> | boolean
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
    lastArchivedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    lastPublishedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    organizationId?: StringFilter<"Policy"> | string
    assigneeId?: StringNullableFilter<"Policy"> | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    artifacts?: ArtifactListRelationFilter
  }

  export type PolicyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    content?: SortOrder
    frequency?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    isRequiredToSign?: SortOrder
    signedBy?: SortOrder
    reviewDate?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastArchivedAt?: SortOrderInput | SortOrder
    lastPublishedAt?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    assignee?: MemberOrderByWithRelationInput
    artifacts?: ArtifactOrderByRelationAggregateInput
  }

  export type PolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PolicyWhereInput | PolicyWhereInput[]
    OR?: PolicyWhereInput[]
    NOT?: PolicyWhereInput | PolicyWhereInput[]
    name?: StringFilter<"Policy"> | string
    description?: StringNullableFilter<"Policy"> | string | null
    status?: EnumPolicyStatusFilter<"Policy"> | $Enums.PolicyStatus
    content?: JsonNullableListFilter<"Policy">
    frequency?: EnumFrequencyNullableFilter<"Policy"> | $Enums.Frequency | null
    department?: EnumDepartmentsNullableFilter<"Policy"> | $Enums.Departments | null
    isRequiredToSign?: BoolFilter<"Policy"> | boolean
    signedBy?: StringNullableListFilter<"Policy">
    reviewDate?: DateTimeNullableFilter<"Policy"> | Date | string | null
    isArchived?: BoolFilter<"Policy"> | boolean
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
    lastArchivedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    lastPublishedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    organizationId?: StringFilter<"Policy"> | string
    assigneeId?: StringNullableFilter<"Policy"> | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    artifacts?: ArtifactListRelationFilter
  }, "id">

  export type PolicyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    content?: SortOrder
    frequency?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    isRequiredToSign?: SortOrder
    signedBy?: SortOrder
    reviewDate?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastArchivedAt?: SortOrderInput | SortOrder
    lastPublishedAt?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    _count?: PolicyCountOrderByAggregateInput
    _max?: PolicyMaxOrderByAggregateInput
    _min?: PolicyMinOrderByAggregateInput
  }

  export type PolicyScalarWhereWithAggregatesInput = {
    AND?: PolicyScalarWhereWithAggregatesInput | PolicyScalarWhereWithAggregatesInput[]
    OR?: PolicyScalarWhereWithAggregatesInput[]
    NOT?: PolicyScalarWhereWithAggregatesInput | PolicyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Policy"> | string
    name?: StringWithAggregatesFilter<"Policy"> | string
    description?: StringNullableWithAggregatesFilter<"Policy"> | string | null
    status?: EnumPolicyStatusWithAggregatesFilter<"Policy"> | $Enums.PolicyStatus
    content?: JsonNullableListFilter<"Policy">
    frequency?: EnumFrequencyNullableWithAggregatesFilter<"Policy"> | $Enums.Frequency | null
    department?: EnumDepartmentsNullableWithAggregatesFilter<"Policy"> | $Enums.Departments | null
    isRequiredToSign?: BoolWithAggregatesFilter<"Policy"> | boolean
    signedBy?: StringNullableListFilter<"Policy">
    reviewDate?: DateTimeNullableWithAggregatesFilter<"Policy"> | Date | string | null
    isArchived?: BoolWithAggregatesFilter<"Policy"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Policy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Policy"> | Date | string
    lastArchivedAt?: DateTimeNullableWithAggregatesFilter<"Policy"> | Date | string | null
    lastPublishedAt?: DateTimeNullableWithAggregatesFilter<"Policy"> | Date | string | null
    organizationId?: StringWithAggregatesFilter<"Policy"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Policy"> | string | null
  }

  export type RequirementMapWhereInput = {
    AND?: RequirementMapWhereInput | RequirementMapWhereInput[]
    OR?: RequirementMapWhereInput[]
    NOT?: RequirementMapWhereInput | RequirementMapWhereInput[]
    id?: StringFilter<"RequirementMap"> | string
    requirementId?: EnumRequirementIdFilter<"RequirementMap"> | $Enums.RequirementId
    controlId?: StringFilter<"RequirementMap"> | string
    frameworkInstanceId?: StringFilter<"RequirementMap"> | string
    control?: XOR<ControlScalarRelationFilter, ControlWhereInput>
    frameworkInstance?: XOR<FrameworkInstanceScalarRelationFilter, FrameworkInstanceWhereInput>
  }

  export type RequirementMapOrderByWithRelationInput = {
    id?: SortOrder
    requirementId?: SortOrder
    controlId?: SortOrder
    frameworkInstanceId?: SortOrder
    control?: ControlOrderByWithRelationInput
    frameworkInstance?: FrameworkInstanceOrderByWithRelationInput
  }

  export type RequirementMapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    controlId_frameworkInstanceId_requirementId?: RequirementMapControlIdFrameworkInstanceIdRequirementIdCompoundUniqueInput
    AND?: RequirementMapWhereInput | RequirementMapWhereInput[]
    OR?: RequirementMapWhereInput[]
    NOT?: RequirementMapWhereInput | RequirementMapWhereInput[]
    requirementId?: EnumRequirementIdFilter<"RequirementMap"> | $Enums.RequirementId
    controlId?: StringFilter<"RequirementMap"> | string
    frameworkInstanceId?: StringFilter<"RequirementMap"> | string
    control?: XOR<ControlScalarRelationFilter, ControlWhereInput>
    frameworkInstance?: XOR<FrameworkInstanceScalarRelationFilter, FrameworkInstanceWhereInput>
  }, "id" | "controlId_frameworkInstanceId_requirementId">

  export type RequirementMapOrderByWithAggregationInput = {
    id?: SortOrder
    requirementId?: SortOrder
    controlId?: SortOrder
    frameworkInstanceId?: SortOrder
    _count?: RequirementMapCountOrderByAggregateInput
    _max?: RequirementMapMaxOrderByAggregateInput
    _min?: RequirementMapMinOrderByAggregateInput
  }

  export type RequirementMapScalarWhereWithAggregatesInput = {
    AND?: RequirementMapScalarWhereWithAggregatesInput | RequirementMapScalarWhereWithAggregatesInput[]
    OR?: RequirementMapScalarWhereWithAggregatesInput[]
    NOT?: RequirementMapScalarWhereWithAggregatesInput | RequirementMapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequirementMap"> | string
    requirementId?: EnumRequirementIdWithAggregatesFilter<"RequirementMap"> | $Enums.RequirementId
    controlId?: StringWithAggregatesFilter<"RequirementMap"> | string
    frameworkInstanceId?: StringWithAggregatesFilter<"RequirementMap"> | string
  }

  export type RiskWhereInput = {
    AND?: RiskWhereInput | RiskWhereInput[]
    OR?: RiskWhereInput[]
    NOT?: RiskWhereInput | RiskWhereInput[]
    id?: StringFilter<"Risk"> | string
    title?: StringFilter<"Risk"> | string
    description?: StringFilter<"Risk"> | string
    category?: EnumRiskCategoryFilter<"Risk"> | $Enums.RiskCategory
    department?: EnumDepartmentsNullableFilter<"Risk"> | $Enums.Departments | null
    status?: EnumRiskStatusFilter<"Risk"> | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    impact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    treatmentStrategyDescription?: StringNullableFilter<"Risk"> | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFilter<"Risk"> | $Enums.RiskTreatmentType
    createdAt?: DateTimeFilter<"Risk"> | Date | string
    updatedAt?: DateTimeFilter<"Risk"> | Date | string
    organizationId?: StringFilter<"Risk"> | string
    assigneeId?: StringNullableFilter<"Risk"> | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
  }

  export type RiskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    likelihood?: SortOrder
    impact?: SortOrder
    residualLikelihood?: SortOrder
    residualImpact?: SortOrder
    treatmentStrategyDescription?: SortOrderInput | SortOrder
    treatmentStrategy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    assignee?: MemberOrderByWithRelationInput
  }

  export type RiskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RiskWhereInput | RiskWhereInput[]
    OR?: RiskWhereInput[]
    NOT?: RiskWhereInput | RiskWhereInput[]
    title?: StringFilter<"Risk"> | string
    description?: StringFilter<"Risk"> | string
    category?: EnumRiskCategoryFilter<"Risk"> | $Enums.RiskCategory
    department?: EnumDepartmentsNullableFilter<"Risk"> | $Enums.Departments | null
    status?: EnumRiskStatusFilter<"Risk"> | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    impact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    treatmentStrategyDescription?: StringNullableFilter<"Risk"> | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFilter<"Risk"> | $Enums.RiskTreatmentType
    createdAt?: DateTimeFilter<"Risk"> | Date | string
    updatedAt?: DateTimeFilter<"Risk"> | Date | string
    organizationId?: StringFilter<"Risk"> | string
    assigneeId?: StringNullableFilter<"Risk"> | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
  }, "id">

  export type RiskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    likelihood?: SortOrder
    impact?: SortOrder
    residualLikelihood?: SortOrder
    residualImpact?: SortOrder
    treatmentStrategyDescription?: SortOrderInput | SortOrder
    treatmentStrategy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    _count?: RiskCountOrderByAggregateInput
    _max?: RiskMaxOrderByAggregateInput
    _min?: RiskMinOrderByAggregateInput
  }

  export type RiskScalarWhereWithAggregatesInput = {
    AND?: RiskScalarWhereWithAggregatesInput | RiskScalarWhereWithAggregatesInput[]
    OR?: RiskScalarWhereWithAggregatesInput[]
    NOT?: RiskScalarWhereWithAggregatesInput | RiskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Risk"> | string
    title?: StringWithAggregatesFilter<"Risk"> | string
    description?: StringWithAggregatesFilter<"Risk"> | string
    category?: EnumRiskCategoryWithAggregatesFilter<"Risk"> | $Enums.RiskCategory
    department?: EnumDepartmentsNullableWithAggregatesFilter<"Risk"> | $Enums.Departments | null
    status?: EnumRiskStatusWithAggregatesFilter<"Risk"> | $Enums.RiskStatus
    likelihood?: EnumLikelihoodWithAggregatesFilter<"Risk"> | $Enums.Likelihood
    impact?: EnumImpactWithAggregatesFilter<"Risk"> | $Enums.Impact
    residualLikelihood?: EnumLikelihoodWithAggregatesFilter<"Risk"> | $Enums.Likelihood
    residualImpact?: EnumImpactWithAggregatesFilter<"Risk"> | $Enums.Impact
    treatmentStrategyDescription?: StringNullableWithAggregatesFilter<"Risk"> | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeWithAggregatesFilter<"Risk"> | $Enums.RiskTreatmentType
    createdAt?: DateTimeWithAggregatesFilter<"Risk"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Risk"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Risk"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Risk"> | string | null
  }

  export type ApiKeyWhereInput = {
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    key?: StringFilter<"ApiKey"> | string
    salt?: StringNullableFilter<"ApiKey"> | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    isActive?: BoolFilter<"ApiKey"> | boolean
    organizationId?: StringFilter<"ApiKey"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    key?: SortOrder
    salt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type ApiKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    name?: StringFilter<"ApiKey"> | string
    salt?: StringNullableFilter<"ApiKey"> | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    isActive?: BoolFilter<"ApiKey"> | boolean
    organizationId?: StringFilter<"ApiKey"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "key">

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    key?: SortOrder
    salt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    OR?: ApiKeyScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKey"> | string
    name?: StringWithAggregatesFilter<"ApiKey"> | string
    key?: StringWithAggregatesFilter<"ApiKey"> | string
    salt?: StringNullableWithAggregatesFilter<"ApiKey"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ApiKey"> | boolean
    organizationId?: StringWithAggregatesFilter<"ApiKey"> | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    organizationId?: StringFilter<"AuditLog"> | string
    data?: JsonFilter<"AuditLog">
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    organizationId?: StringFilter<"AuditLog"> | string
    data?: JsonFilter<"AuditLog">
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    organizationId?: StringWithAggregatesFilter<"AuditLog"> | string
    data?: JsonWithAggregatesFilter<"AuditLog">
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    relatedId?: StringFilter<"Task"> | string
    relatedType?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    dueDate?: DateTimeFilter<"Task"> | Date | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    organizationId?: StringFilter<"Task"> | string
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    assignee?: MemberOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    relatedId?: StringFilter<"Task"> | string
    relatedType?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    dueDate?: DateTimeFilter<"Task"> | Date | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    organizationId?: StringFilter<"Task"> | string
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringWithAggregatesFilter<"Task"> | string
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    relatedId?: StringWithAggregatesFilter<"Task"> | string
    relatedType?: EnumTaskTypeWithAggregatesFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    assigneeId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    organizationId?: StringWithAggregatesFilter<"Task"> | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    description?: StringFilter<"Vendor"> | string
    category?: EnumVendorCategoryFilter<"Vendor"> | $Enums.VendorCategory
    status?: EnumVendorStatusFilter<"Vendor"> | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    inherentImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    residualProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    organizationId?: StringFilter<"Vendor"> | string
    assigneeId?: StringNullableFilter<"Vendor"> | string | null
    contacts?: VendorContactListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    status?: SortOrder
    inherentProbability?: SortOrder
    inherentImpact?: SortOrder
    residualProbability?: SortOrder
    residualImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    contacts?: VendorContactOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    assignee?: MemberOrderByWithRelationInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    description?: StringFilter<"Vendor"> | string
    category?: EnumVendorCategoryFilter<"Vendor"> | $Enums.VendorCategory
    status?: EnumVendorStatusFilter<"Vendor"> | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    inherentImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    residualProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    organizationId?: StringFilter<"Vendor"> | string
    assigneeId?: StringNullableFilter<"Vendor"> | string | null
    contacts?: VendorContactListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    assignee?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
  }, "id">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    status?: SortOrder
    inherentProbability?: SortOrder
    inherentImpact?: SortOrder
    residualProbability?: SortOrder
    residualImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    _count?: VendorCountOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    description?: StringWithAggregatesFilter<"Vendor"> | string
    category?: EnumVendorCategoryWithAggregatesFilter<"Vendor"> | $Enums.VendorCategory
    status?: EnumVendorStatusWithAggregatesFilter<"Vendor"> | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodWithAggregatesFilter<"Vendor"> | $Enums.Likelihood
    inherentImpact?: EnumImpactWithAggregatesFilter<"Vendor"> | $Enums.Impact
    residualProbability?: EnumLikelihoodWithAggregatesFilter<"Vendor"> | $Enums.Likelihood
    residualImpact?: EnumImpactWithAggregatesFilter<"Vendor"> | $Enums.Impact
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    organizationId?: StringWithAggregatesFilter<"Vendor"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
  }

  export type VendorContactWhereInput = {
    AND?: VendorContactWhereInput | VendorContactWhereInput[]
    OR?: VendorContactWhereInput[]
    NOT?: VendorContactWhereInput | VendorContactWhereInput[]
    id?: StringFilter<"VendorContact"> | string
    vendorId?: StringFilter<"VendorContact"> | string
    name?: StringFilter<"VendorContact"> | string
    email?: StringFilter<"VendorContact"> | string
    phone?: StringFilter<"VendorContact"> | string
    createdAt?: DateTimeFilter<"VendorContact"> | Date | string
    updatedAt?: DateTimeFilter<"VendorContact"> | Date | string
    Vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }

  export type VendorContactOrderByWithRelationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Vendor?: VendorOrderByWithRelationInput
  }

  export type VendorContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VendorContactWhereInput | VendorContactWhereInput[]
    OR?: VendorContactWhereInput[]
    NOT?: VendorContactWhereInput | VendorContactWhereInput[]
    vendorId?: StringFilter<"VendorContact"> | string
    name?: StringFilter<"VendorContact"> | string
    email?: StringFilter<"VendorContact"> | string
    phone?: StringFilter<"VendorContact"> | string
    createdAt?: DateTimeFilter<"VendorContact"> | Date | string
    updatedAt?: DateTimeFilter<"VendorContact"> | Date | string
    Vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }, "id">

  export type VendorContactOrderByWithAggregationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VendorContactCountOrderByAggregateInput
    _max?: VendorContactMaxOrderByAggregateInput
    _min?: VendorContactMinOrderByAggregateInput
  }

  export type VendorContactScalarWhereWithAggregatesInput = {
    AND?: VendorContactScalarWhereWithAggregatesInput | VendorContactScalarWhereWithAggregatesInput[]
    OR?: VendorContactScalarWhereWithAggregatesInput[]
    NOT?: VendorContactScalarWhereWithAggregatesInput | VendorContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VendorContact"> | string
    vendorId?: StringWithAggregatesFilter<"VendorContact"> | string
    name?: StringWithAggregatesFilter<"VendorContact"> | string
    email?: StringWithAggregatesFilter<"VendorContact"> | string
    phone?: StringWithAggregatesFilter<"VendorContact"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VendorContact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VendorContact"> | Date | string
  }

  export type ArtifactCreateInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    controls?: ControlCreateNestedManyWithoutArtifactsInput
    organization: OrganizationCreateNestedOneWithoutArtifactsInput
    evidence?: EvidenceCreateNestedOneWithoutArtifactsInput
    policy?: PolicyCreateNestedOneWithoutArtifactsInput
  }

  export type ArtifactUncheckedCreateInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    evidenceId?: string | null
    policyId?: string | null
    controls?: ControlUncheckedCreateNestedManyWithoutArtifactsInput
  }

  export type ArtifactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    controls?: ControlUpdateManyWithoutArtifactsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutArtifactsNestedInput
    evidence?: EvidenceUpdateOneWithoutArtifactsNestedInput
    policy?: PolicyUpdateOneWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: ControlUncheckedUpdateManyWithoutArtifactsNestedInput
  }

  export type ArtifactCreateManyInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    evidenceId?: string | null
    policyId?: string | null
  }

  export type ArtifactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtifactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeTrainingVideoCompletionCreateInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
    member: MemberCreateNestedOneWithoutEmployeeTrainingVideoCompletionInput
  }

  export type EmployeeTrainingVideoCompletionUncheckedCreateInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
    memberId: string
  }

  export type EmployeeTrainingVideoCompletionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutEmployeeTrainingVideoCompletionNestedInput
  }

  export type EmployeeTrainingVideoCompletionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeTrainingVideoCompletionCreateManyInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
    memberId: string
  }

  export type EmployeeTrainingVideoCompletionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeTrainingVideoCompletionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    activeOrganizationId?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    activeOrganizationId?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    activeOrganizationId?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id?: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type MemberCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
  }

  export type MemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationCreateInput = {
    id?: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
    user: UserCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateInput = {
    id?: string
    organizationId: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationCreateManyInput = {
    id?: string
    organizationId: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    author: MemberCreateNestedOneWithoutCommentsInput
    organization: OrganizationCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    authorId: string
    organizationId: string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: MemberUpdateOneRequiredWithoutCommentsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    authorId: string
    organizationId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ControlCreateInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutControlsInput
    organization: OrganizationCreateNestedOneWithoutControlsInput
    artifacts?: ArtifactCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutControlInput
  }

  export type ControlUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organizationId: string
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutControlsInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutControlInput
  }

  export type ControlUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutControlsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutControlsNestedInput
    artifacts?: ArtifactUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutControlsNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutControlNestedInput
  }

  export type ControlCreateManyInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organizationId: string
  }

  export type ControlUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ControlUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type EvidenceCreateInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assignee?: MemberCreateNestedOneWithoutEvidenceInput
    organization: OrganizationCreateNestedOneWithoutEvidenceInput
    artifacts?: ArtifactCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
    organizationId: string
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: MemberUpdateOneWithoutEvidenceNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEvidenceNestedInput
    artifacts?: ArtifactUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    artifacts?: ArtifactUncheckedUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceCreateManyInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
    organizationId: string
  }

  export type EvidenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvidenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type FrameworkInstanceCreateInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlCreateNestedManyWithoutFrameworkInstancesInput
    organization: OrganizationCreateNestedOneWithoutFrameworkInstancesInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceUncheckedCreateInput = {
    id?: string
    organizationId: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlUncheckedCreateNestedManyWithoutFrameworkInstancesInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUpdateManyWithoutFrameworkInstancesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutFrameworkInstancesNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUncheckedUpdateManyWithoutFrameworkInstancesNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceCreateManyInput = {
    id?: string
    organizationId: string
    frameworkId: $Enums.FrameworkId
  }

  export type FrameworkInstanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
  }

  export type FrameworkInstanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
  }

  export type IntegrationCreateInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    lastRunAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    results?: IntegrationResultCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    organizationId: string
    lastRunAt?: Date | string | null
    results?: IntegrationResultUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    results?: IntegrationResultUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    organizationId?: StringFieldUpdateOperationsInput | string
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: IntegrationResultUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationCreateManyInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    organizationId: string
    lastRunAt?: Date | string | null
  }

  export type IntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    organizationId?: StringFieldUpdateOperationsInput | string
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntegrationResultCreateInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    organizationId: string
    assignedUser?: UserCreateNestedOneWithoutIntegrationResultsInput
    integration: IntegrationCreateNestedOneWithoutResultsInput
  }

  export type IntegrationResultUncheckedCreateInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    integrationId: string
    organizationId: string
    assignedUserId?: string | null
  }

  export type IntegrationResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUser?: UserUpdateOneWithoutIntegrationResultsNestedInput
    integration?: IntegrationUpdateOneRequiredWithoutResultsNestedInput
  }

  export type IntegrationResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntegrationResultCreateManyInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    integrationId: string
    organizationId: string
    assignedUserId?: string | null
  }

  export type IntegrationResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PolicyCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutPolicyInput
    assignee?: MemberCreateNestedOneWithoutPolicyInput
    artifacts?: ArtifactCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organizationId: string
    assigneeId?: string | null
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutPolicyNestedInput
    assignee?: MemberUpdateOneWithoutPolicyNestedInput
    artifacts?: ArtifactUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    artifacts?: ArtifactUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organizationId: string
    assigneeId?: string | null
  }

  export type PolicyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PolicyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RequirementMapCreateInput = {
    id?: string
    requirementId: $Enums.RequirementId
    control: ControlCreateNestedOneWithoutRequirementsMappedInput
    frameworkInstance: FrameworkInstanceCreateNestedOneWithoutRequirementsMappedInput
  }

  export type RequirementMapUncheckedCreateInput = {
    id?: string
    requirementId: $Enums.RequirementId
    controlId: string
    frameworkInstanceId: string
  }

  export type RequirementMapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    control?: ControlUpdateOneRequiredWithoutRequirementsMappedNestedInput
    frameworkInstance?: FrameworkInstanceUpdateOneRequiredWithoutRequirementsMappedNestedInput
  }

  export type RequirementMapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    controlId?: StringFieldUpdateOperationsInput | string
    frameworkInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementMapCreateManyInput = {
    id?: string
    requirementId: $Enums.RequirementId
    controlId: string
    frameworkInstanceId: string
  }

  export type RequirementMapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
  }

  export type RequirementMapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    controlId?: StringFieldUpdateOperationsInput | string
    frameworkInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskCreateInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutRiskInput
    assignee?: MemberCreateNestedOneWithoutRiskInput
  }

  export type RiskUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assigneeId?: string | null
  }

  export type RiskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutRiskNestedInput
    assignee?: MemberUpdateOneWithoutRiskNestedInput
  }

  export type RiskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskCreateManyInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assigneeId?: string | null
  }

  export type RiskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyCreateInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
    organizationId: string
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
    organizationId: string
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateInput = {
    id?: string
    timestamp?: Date | string
    data: JsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutAuditLogInput
    user: UserCreateNestedOneWithoutAuditLogInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    timestamp?: Date | string
    userId: string
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutAuditLogNestedInput
    user?: UserUpdateOneRequiredWithoutAuditLogNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateManyInput = {
    id?: string
    timestamp?: Date | string
    userId: string
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assignee?: MemberCreateNestedOneWithoutTaskInput
    organization: OrganizationCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assigneeId?: string | null
    organizationId: string
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: MemberUpdateOneWithoutTaskNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assigneeId?: string | null
    organizationId: string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    contacts?: VendorContactCreateNestedManyWithoutVendorInput
    organization: OrganizationCreateNestedOneWithoutVendorsInput
    assignee?: MemberCreateNestedOneWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assigneeId?: string | null
    contacts?: VendorContactUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contacts?: VendorContactUpdateManyWithoutVendorNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutVendorsNestedInput
    assignee?: MemberUpdateOneWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: VendorContactUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assigneeId?: string | null
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VendorContactCreateInput = {
    id?: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Vendor: VendorCreateNestedOneWithoutContactsInput
  }

  export type VendorContactUncheckedCreateInput = {
    id?: string
    vendorId: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vendor?: VendorUpdateOneRequiredWithoutContactsNestedInput
  }

  export type VendorContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorContactCreateManyInput = {
    id?: string
    vendorId: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumArtifactTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ArtifactType | EnumArtifactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumArtifactTypeFilter<$PrismaModel> | $Enums.ArtifactType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ControlListRelationFilter = {
    every?: ControlWhereInput
    some?: ControlWhereInput
    none?: ControlWhereInput
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type EvidenceNullableScalarRelationFilter = {
    is?: EvidenceWhereInput | null
    isNot?: EvidenceWhereInput | null
  }

  export type PolicyNullableScalarRelationFilter = {
    is?: PolicyWhereInput | null
    isNot?: PolicyWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ControlOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtifactOrganizationIdEvidenceIdPolicyIdCompoundUniqueInput = {
    organizationId: string
    evidenceId: string
    policyId: string
  }

  export type ArtifactCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    evidenceId?: SortOrder
    policyId?: SortOrder
  }

  export type ArtifactMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    evidenceId?: SortOrder
    policyId?: SortOrder
  }

  export type ArtifactMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    evidenceId?: SortOrder
    policyId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumArtifactTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ArtifactType | EnumArtifactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumArtifactTypeWithAggregatesFilter<$PrismaModel> | $Enums.ArtifactType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumArtifactTypeFilter<$PrismaModel>
    _max?: NestedEnumArtifactTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type IntegrationResultListRelationFilter = {
    every?: IntegrationResultWhereInput
    some?: IntegrationResultWhereInput
    none?: IntegrationResultWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type MemberListRelationFilter = {
    every?: MemberWhereInput
    some?: MemberWhereInput
    none?: MemberWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MemberScalarRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type EmployeeTrainingVideoCompletionMemberIdVideoIdCompoundUniqueInput = {
    memberId: string
    videoId: string
  }

  export type EmployeeTrainingVideoCompletionCountOrderByAggregateInput = {
    id?: SortOrder
    completedAt?: SortOrder
    videoId?: SortOrder
    memberId?: SortOrder
  }

  export type EmployeeTrainingVideoCompletionMaxOrderByAggregateInput = {
    id?: SortOrder
    completedAt?: SortOrder
    videoId?: SortOrder
    memberId?: SortOrder
  }

  export type EmployeeTrainingVideoCompletionMinOrderByAggregateInput = {
    id?: SortOrder
    completedAt?: SortOrder
    videoId?: SortOrder
    memberId?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumDepartmentsFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel>
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentsFilter<$PrismaModel> | $Enums.Departments
  }

  export type EmployeeTrainingVideoCompletionListRelationFilter = {
    every?: EmployeeTrainingVideoCompletionWhereInput
    some?: EmployeeTrainingVideoCompletionWhereInput
    none?: EmployeeTrainingVideoCompletionWhereInput
  }

  export type EvidenceListRelationFilter = {
    every?: EvidenceWhereInput
    some?: EvidenceWhereInput
    none?: EvidenceWhereInput
  }

  export type PolicyListRelationFilter = {
    every?: PolicyWhereInput
    some?: PolicyWhereInput
    none?: PolicyWhereInput
  }

  export type RiskListRelationFilter = {
    every?: RiskWhereInput
    some?: RiskWhereInput
    none?: RiskWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type VendorListRelationFilter = {
    every?: VendorWhereInput
    some?: VendorWhereInput
    none?: VendorWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type EmployeeTrainingVideoCompletionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EvidenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RiskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumDepartmentsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel>
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentsWithAggregatesFilter<$PrismaModel> | $Enums.Departments
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentsFilter<$PrismaModel>
    _max?: NestedEnumDepartmentsFilter<$PrismaModel>
  }

  export type EnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type EnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    organizationId?: SortOrder
  }

  export type FrameworkInstanceListRelationFilter = {
    every?: FrameworkInstanceWhereInput
    some?: FrameworkInstanceWhereInput
    none?: FrameworkInstanceWhereInput
  }

  export type ArtifactListRelationFilter = {
    every?: ArtifactWhereInput
    some?: ArtifactWhereInput
    none?: ArtifactWhereInput
  }

  export type RequirementMapListRelationFilter = {
    every?: RequirementMapWhereInput
    some?: RequirementMapWhereInput
    none?: RequirementMapWhereInput
  }

  export type FrameworkInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtifactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequirementMapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ControlCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    lastReviewDate?: SortOrder
    nextReviewDate?: SortOrder
    organizationId?: SortOrder
  }

  export type ControlMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    lastReviewDate?: SortOrder
    nextReviewDate?: SortOrder
    organizationId?: SortOrder
  }

  export type ControlMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    lastReviewDate?: SortOrder
    nextReviewDate?: SortOrder
    organizationId?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableFilter<$PrismaModel> | $Enums.Frequency | null
  }

  export type EnumEvidenceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EvidenceStatus | EnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel> | $Enums.EvidenceStatus | null
  }

  export type MemberNullableScalarRelationFilter = {
    is?: MemberWhereInput | null
    isNot?: MemberWhereInput | null
  }

  export type EvidenceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isNotRelevant?: SortOrder
    additionalUrls?: SortOrder
    fileUrls?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastPublishedAt?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type EvidenceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isNotRelevant?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastPublishedAt?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type EvidenceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isNotRelevant?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastPublishedAt?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Frequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumFrequencyNullableFilter<$PrismaModel>
  }

  export type EnumEvidenceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EvidenceStatus | EnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEvidenceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.EvidenceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel>
  }

  export type EnumFrameworkIdFilter<$PrismaModel = never> = {
    equals?: $Enums.FrameworkId | EnumFrameworkIdFieldRefInput<$PrismaModel>
    in?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    not?: NestedEnumFrameworkIdFilter<$PrismaModel> | $Enums.FrameworkId
  }

  export type FrameworkInstanceOrganizationIdFrameworkIdCompoundUniqueInput = {
    organizationId: string
    frameworkId: $Enums.FrameworkId
  }

  export type FrameworkInstanceCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    frameworkId?: SortOrder
  }

  export type FrameworkInstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    frameworkId?: SortOrder
  }

  export type FrameworkInstanceMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    frameworkId?: SortOrder
  }

  export type EnumFrameworkIdWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FrameworkId | EnumFrameworkIdFieldRefInput<$PrismaModel>
    in?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    not?: NestedEnumFrameworkIdWithAggregatesFilter<$PrismaModel> | $Enums.FrameworkId
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrameworkIdFilter<$PrismaModel>
    _max?: NestedEnumFrameworkIdFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    settings?: SortOrder
    userSettings?: SortOrder
    organizationId?: SortOrder
    lastRunAt?: SortOrder
  }

  export type IntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    lastRunAt?: SortOrder
  }

  export type IntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    lastRunAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntegrationScalarRelationFilter = {
    is?: IntegrationWhereInput
    isNot?: IntegrationWhereInput
  }

  export type IntegrationResultCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    remediation?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    resultDetails?: SortOrder
    completedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type IntegrationResultMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    remediation?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    completedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type IntegrationResultMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    remediation?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    completedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    assignedUserId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type IntegrationListRelationFilter = {
    every?: IntegrationWhereInput
    some?: IntegrationWhereInput
    none?: IntegrationWhereInput
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    stripeCustomerId?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    stripeCustomerId?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    stripeCustomerId?: SortOrder
  }

  export type EnumPolicyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PolicyStatus | EnumPolicyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPolicyStatusFilter<$PrismaModel> | $Enums.PolicyStatus
  }
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumDepartmentsNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel> | null
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentsNullableFilter<$PrismaModel> | $Enums.Departments | null
  }

  export type PolicyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    content?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    isRequiredToSign?: SortOrder
    signedBy?: SortOrder
    reviewDate?: SortOrder
    isArchived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastArchivedAt?: SortOrder
    lastPublishedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type PolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    isRequiredToSign?: SortOrder
    reviewDate?: SortOrder
    isArchived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastArchivedAt?: SortOrder
    lastPublishedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type PolicyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    department?: SortOrder
    isRequiredToSign?: SortOrder
    reviewDate?: SortOrder
    isArchived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastArchivedAt?: SortOrder
    lastPublishedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type EnumPolicyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PolicyStatus | EnumPolicyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPolicyStatusWithAggregatesFilter<$PrismaModel> | $Enums.PolicyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPolicyStatusFilter<$PrismaModel>
    _max?: NestedEnumPolicyStatusFilter<$PrismaModel>
  }

  export type EnumDepartmentsNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel> | null
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentsNullableWithAggregatesFilter<$PrismaModel> | $Enums.Departments | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDepartmentsNullableFilter<$PrismaModel>
    _max?: NestedEnumDepartmentsNullableFilter<$PrismaModel>
  }

  export type EnumRequirementIdFilter<$PrismaModel = never> = {
    equals?: $Enums.RequirementId | EnumRequirementIdFieldRefInput<$PrismaModel>
    in?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    not?: NestedEnumRequirementIdFilter<$PrismaModel> | $Enums.RequirementId
  }

  export type ControlScalarRelationFilter = {
    is?: ControlWhereInput
    isNot?: ControlWhereInput
  }

  export type FrameworkInstanceScalarRelationFilter = {
    is?: FrameworkInstanceWhereInput
    isNot?: FrameworkInstanceWhereInput
  }

  export type RequirementMapControlIdFrameworkInstanceIdRequirementIdCompoundUniqueInput = {
    controlId: string
    frameworkInstanceId: string
    requirementId: $Enums.RequirementId
  }

  export type RequirementMapCountOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    controlId?: SortOrder
    frameworkInstanceId?: SortOrder
  }

  export type RequirementMapMaxOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    controlId?: SortOrder
    frameworkInstanceId?: SortOrder
  }

  export type RequirementMapMinOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    controlId?: SortOrder
    frameworkInstanceId?: SortOrder
  }

  export type EnumRequirementIdWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequirementId | EnumRequirementIdFieldRefInput<$PrismaModel>
    in?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    not?: NestedEnumRequirementIdWithAggregatesFilter<$PrismaModel> | $Enums.RequirementId
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequirementIdFilter<$PrismaModel>
    _max?: NestedEnumRequirementIdFilter<$PrismaModel>
  }

  export type EnumRiskCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskCategory | EnumRiskCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskCategoryFilter<$PrismaModel> | $Enums.RiskCategory
  }

  export type EnumRiskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskStatus | EnumRiskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskStatusFilter<$PrismaModel> | $Enums.RiskStatus
  }

  export type EnumLikelihoodFilter<$PrismaModel = never> = {
    equals?: $Enums.Likelihood | EnumLikelihoodFieldRefInput<$PrismaModel>
    in?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    not?: NestedEnumLikelihoodFilter<$PrismaModel> | $Enums.Likelihood
  }

  export type EnumImpactFilter<$PrismaModel = never> = {
    equals?: $Enums.Impact | EnumImpactFieldRefInput<$PrismaModel>
    in?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumImpactFilter<$PrismaModel> | $Enums.Impact
  }

  export type EnumRiskTreatmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskTreatmentType | EnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel> | $Enums.RiskTreatmentType
  }

  export type RiskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    department?: SortOrder
    status?: SortOrder
    likelihood?: SortOrder
    impact?: SortOrder
    residualLikelihood?: SortOrder
    residualImpact?: SortOrder
    treatmentStrategyDescription?: SortOrder
    treatmentStrategy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type RiskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    department?: SortOrder
    status?: SortOrder
    likelihood?: SortOrder
    impact?: SortOrder
    residualLikelihood?: SortOrder
    residualImpact?: SortOrder
    treatmentStrategyDescription?: SortOrder
    treatmentStrategy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type RiskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    department?: SortOrder
    status?: SortOrder
    likelihood?: SortOrder
    impact?: SortOrder
    residualLikelihood?: SortOrder
    residualImpact?: SortOrder
    treatmentStrategyDescription?: SortOrder
    treatmentStrategy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type EnumRiskCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskCategory | EnumRiskCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskCategoryWithAggregatesFilter<$PrismaModel> | $Enums.RiskCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskCategoryFilter<$PrismaModel>
    _max?: NestedEnumRiskCategoryFilter<$PrismaModel>
  }

  export type EnumRiskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskStatus | EnumRiskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskStatusWithAggregatesFilter<$PrismaModel> | $Enums.RiskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskStatusFilter<$PrismaModel>
    _max?: NestedEnumRiskStatusFilter<$PrismaModel>
  }

  export type EnumLikelihoodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Likelihood | EnumLikelihoodFieldRefInput<$PrismaModel>
    in?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    not?: NestedEnumLikelihoodWithAggregatesFilter<$PrismaModel> | $Enums.Likelihood
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLikelihoodFilter<$PrismaModel>
    _max?: NestedEnumLikelihoodFilter<$PrismaModel>
  }

  export type EnumImpactWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Impact | EnumImpactFieldRefInput<$PrismaModel>
    in?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumImpactWithAggregatesFilter<$PrismaModel> | $Enums.Impact
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImpactFilter<$PrismaModel>
    _max?: NestedEnumImpactFilter<$PrismaModel>
  }

  export type EnumRiskTreatmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskTreatmentType | EnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskTreatmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.RiskTreatmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel>
    _max?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel>
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    key?: SortOrder
    salt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    key?: SortOrder
    salt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    key?: SortOrder
    salt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type EnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type EnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type EnumVendorCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorCategory | EnumVendorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorCategoryFilter<$PrismaModel> | $Enums.VendorCategory
  }

  export type EnumVendorStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorStatus | EnumVendorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorStatusFilter<$PrismaModel> | $Enums.VendorStatus
  }

  export type VendorContactListRelationFilter = {
    every?: VendorContactWhereInput
    some?: VendorContactWhereInput
    none?: VendorContactWhereInput
  }

  export type VendorContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    status?: SortOrder
    inherentProbability?: SortOrder
    inherentImpact?: SortOrder
    residualProbability?: SortOrder
    residualImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    status?: SortOrder
    inherentProbability?: SortOrder
    inherentImpact?: SortOrder
    residualProbability?: SortOrder
    residualImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    status?: SortOrder
    inherentProbability?: SortOrder
    inherentImpact?: SortOrder
    residualProbability?: SortOrder
    residualImpact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizationId?: SortOrder
    assigneeId?: SortOrder
  }

  export type EnumVendorCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorCategory | EnumVendorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorCategoryWithAggregatesFilter<$PrismaModel> | $Enums.VendorCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorCategoryFilter<$PrismaModel>
    _max?: NestedEnumVendorCategoryFilter<$PrismaModel>
  }

  export type EnumVendorStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorStatus | EnumVendorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorStatusWithAggregatesFilter<$PrismaModel> | $Enums.VendorStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorStatusFilter<$PrismaModel>
    _max?: NestedEnumVendorStatusFilter<$PrismaModel>
  }

  export type VendorScalarRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type VendorContactCountOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorContactMaxOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorContactMinOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlCreateNestedManyWithoutArtifactsInput = {
    create?: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput> | ControlCreateWithoutArtifactsInput[] | ControlUncheckedCreateWithoutArtifactsInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutArtifactsInput | ControlCreateOrConnectWithoutArtifactsInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutArtifactsInput = {
    create?: XOR<OrganizationCreateWithoutArtifactsInput, OrganizationUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutArtifactsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EvidenceCreateNestedOneWithoutArtifactsInput = {
    create?: XOR<EvidenceCreateWithoutArtifactsInput, EvidenceUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: EvidenceCreateOrConnectWithoutArtifactsInput
    connect?: EvidenceWhereUniqueInput
  }

  export type PolicyCreateNestedOneWithoutArtifactsInput = {
    create?: XOR<PolicyCreateWithoutArtifactsInput, PolicyUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutArtifactsInput
    connect?: PolicyWhereUniqueInput
  }

  export type ControlUncheckedCreateNestedManyWithoutArtifactsInput = {
    create?: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput> | ControlCreateWithoutArtifactsInput[] | ControlUncheckedCreateWithoutArtifactsInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutArtifactsInput | ControlCreateOrConnectWithoutArtifactsInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumArtifactTypeFieldUpdateOperationsInput = {
    set?: $Enums.ArtifactType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ControlUpdateManyWithoutArtifactsNestedInput = {
    create?: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput> | ControlCreateWithoutArtifactsInput[] | ControlUncheckedCreateWithoutArtifactsInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutArtifactsInput | ControlCreateOrConnectWithoutArtifactsInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutArtifactsInput | ControlUpsertWithWhereUniqueWithoutArtifactsInput[]
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutArtifactsInput | ControlUpdateWithWhereUniqueWithoutArtifactsInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutArtifactsInput | ControlUpdateManyWithWhereWithoutArtifactsInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutArtifactsNestedInput = {
    create?: XOR<OrganizationCreateWithoutArtifactsInput, OrganizationUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutArtifactsInput
    upsert?: OrganizationUpsertWithoutArtifactsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutArtifactsInput, OrganizationUpdateWithoutArtifactsInput>, OrganizationUncheckedUpdateWithoutArtifactsInput>
  }

  export type EvidenceUpdateOneWithoutArtifactsNestedInput = {
    create?: XOR<EvidenceCreateWithoutArtifactsInput, EvidenceUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: EvidenceCreateOrConnectWithoutArtifactsInput
    upsert?: EvidenceUpsertWithoutArtifactsInput
    disconnect?: EvidenceWhereInput | boolean
    delete?: EvidenceWhereInput | boolean
    connect?: EvidenceWhereUniqueInput
    update?: XOR<XOR<EvidenceUpdateToOneWithWhereWithoutArtifactsInput, EvidenceUpdateWithoutArtifactsInput>, EvidenceUncheckedUpdateWithoutArtifactsInput>
  }

  export type PolicyUpdateOneWithoutArtifactsNestedInput = {
    create?: XOR<PolicyCreateWithoutArtifactsInput, PolicyUncheckedCreateWithoutArtifactsInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutArtifactsInput
    upsert?: PolicyUpsertWithoutArtifactsInput
    disconnect?: PolicyWhereInput | boolean
    delete?: PolicyWhereInput | boolean
    connect?: PolicyWhereUniqueInput
    update?: XOR<XOR<PolicyUpdateToOneWithWhereWithoutArtifactsInput, PolicyUpdateWithoutArtifactsInput>, PolicyUncheckedUpdateWithoutArtifactsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ControlUncheckedUpdateManyWithoutArtifactsNestedInput = {
    create?: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput> | ControlCreateWithoutArtifactsInput[] | ControlUncheckedCreateWithoutArtifactsInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutArtifactsInput | ControlCreateOrConnectWithoutArtifactsInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutArtifactsInput | ControlUpsertWithWhereUniqueWithoutArtifactsInput[]
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutArtifactsInput | ControlUpdateWithWhereUniqueWithoutArtifactsInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutArtifactsInput | ControlUpdateManyWithWhereWithoutArtifactsInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type IntegrationResultCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput> | IntegrationResultCreateWithoutAssignedUserInput[] | IntegrationResultUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutAssignedUserInput | IntegrationResultCreateOrConnectWithoutAssignedUserInput[]
    createMany?: IntegrationResultCreateManyAssignedUserInputEnvelope
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type MemberCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput> | IntegrationResultCreateWithoutAssignedUserInput[] | IntegrationResultUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutAssignedUserInput | IntegrationResultCreateOrConnectWithoutAssignedUserInput[]
    createMany?: IntegrationResultCreateManyAssignedUserInputEnvelope
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type IntegrationResultUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput> | IntegrationResultCreateWithoutAssignedUserInput[] | IntegrationResultUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutAssignedUserInput | IntegrationResultCreateOrConnectWithoutAssignedUserInput[]
    upsert?: IntegrationResultUpsertWithWhereUniqueWithoutAssignedUserInput | IntegrationResultUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: IntegrationResultCreateManyAssignedUserInputEnvelope
    set?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    disconnect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    delete?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    update?: IntegrationResultUpdateWithWhereUniqueWithoutAssignedUserInput | IntegrationResultUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: IntegrationResultUpdateManyWithWhereWithoutAssignedUserInput | IntegrationResultUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type MemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput> | IntegrationResultCreateWithoutAssignedUserInput[] | IntegrationResultUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutAssignedUserInput | IntegrationResultCreateOrConnectWithoutAssignedUserInput[]
    upsert?: IntegrationResultUpsertWithWhereUniqueWithoutAssignedUserInput | IntegrationResultUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: IntegrationResultCreateManyAssignedUserInputEnvelope
    set?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    disconnect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    delete?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    update?: IntegrationResultUpdateWithWhereUniqueWithoutAssignedUserInput | IntegrationResultUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: IntegrationResultUpdateManyWithWhereWithoutAssignedUserInput | IntegrationResultUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutEmployeeTrainingVideoCompletionInput = {
    create?: XOR<MemberCreateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedCreateWithoutEmployeeTrainingVideoCompletionInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEmployeeTrainingVideoCompletionInput
    connect?: MemberWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutEmployeeTrainingVideoCompletionNestedInput = {
    create?: XOR<MemberCreateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedCreateWithoutEmployeeTrainingVideoCompletionInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEmployeeTrainingVideoCompletionInput
    upsert?: MemberUpsertWithoutEmployeeTrainingVideoCompletionInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutEmployeeTrainingVideoCompletionInput, MemberUpdateWithoutEmployeeTrainingVideoCompletionInput>, MemberUncheckedUpdateWithoutEmployeeTrainingVideoCompletionInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type OrganizationCreateNestedOneWithoutMembersInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMembersInput = {
    create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembersInput
    connect?: UserWhereUniqueInput
  }

  export type EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput = {
    create?: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput> | EmployeeTrainingVideoCompletionCreateWithoutMemberInput[] | EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput | EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput[]
    createMany?: EmployeeTrainingVideoCompletionCreateManyMemberInputEnvelope
    connect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
  }

  export type EvidenceCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput> | EvidenceCreateWithoutAssigneeInput[] | EvidenceUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutAssigneeInput | EvidenceCreateOrConnectWithoutAssigneeInput[]
    createMany?: EvidenceCreateManyAssigneeInputEnvelope
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
  }

  export type PolicyCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput> | PolicyCreateWithoutAssigneeInput[] | PolicyUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutAssigneeInput | PolicyCreateOrConnectWithoutAssigneeInput[]
    createMany?: PolicyCreateManyAssigneeInputEnvelope
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type RiskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput> | RiskCreateWithoutAssigneeInput[] | RiskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutAssigneeInput | RiskCreateOrConnectWithoutAssigneeInput[]
    createMany?: RiskCreateManyAssigneeInputEnvelope
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type VendorCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput> | VendorCreateWithoutAssigneeInput[] | VendorUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutAssigneeInput | VendorCreateOrConnectWithoutAssigneeInput[]
    createMany?: VendorCreateManyAssigneeInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput> | EmployeeTrainingVideoCompletionCreateWithoutMemberInput[] | EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput | EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput[]
    createMany?: EmployeeTrainingVideoCompletionCreateManyMemberInputEnvelope
    connect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
  }

  export type EvidenceUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput> | EvidenceCreateWithoutAssigneeInput[] | EvidenceUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutAssigneeInput | EvidenceCreateOrConnectWithoutAssigneeInput[]
    createMany?: EvidenceCreateManyAssigneeInputEnvelope
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
  }

  export type PolicyUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput> | PolicyCreateWithoutAssigneeInput[] | PolicyUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutAssigneeInput | PolicyCreateOrConnectWithoutAssigneeInput[]
    createMany?: PolicyCreateManyAssigneeInputEnvelope
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type RiskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput> | RiskCreateWithoutAssigneeInput[] | RiskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutAssigneeInput | RiskCreateOrConnectWithoutAssigneeInput[]
    createMany?: RiskCreateManyAssigneeInputEnvelope
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type VendorUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput> | VendorCreateWithoutAssigneeInput[] | VendorUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutAssigneeInput | VendorCreateOrConnectWithoutAssigneeInput[]
    createMany?: VendorCreateManyAssigneeInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumDepartmentsFieldUpdateOperationsInput = {
    set?: $Enums.Departments
  }

  export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    upsert?: OrganizationUpsertWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembersInput, OrganizationUpdateWithoutMembersInput>, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembersInput
    upsert?: UserUpsertWithoutMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembersInput, UserUpdateWithoutMembersInput>, UserUncheckedUpdateWithoutMembersInput>
  }

  export type EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput = {
    create?: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput> | EmployeeTrainingVideoCompletionCreateWithoutMemberInput[] | EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput | EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput[]
    upsert?: EmployeeTrainingVideoCompletionUpsertWithWhereUniqueWithoutMemberInput | EmployeeTrainingVideoCompletionUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: EmployeeTrainingVideoCompletionCreateManyMemberInputEnvelope
    set?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    disconnect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    delete?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    connect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    update?: EmployeeTrainingVideoCompletionUpdateWithWhereUniqueWithoutMemberInput | EmployeeTrainingVideoCompletionUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: EmployeeTrainingVideoCompletionUpdateManyWithWhereWithoutMemberInput | EmployeeTrainingVideoCompletionUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: EmployeeTrainingVideoCompletionScalarWhereInput | EmployeeTrainingVideoCompletionScalarWhereInput[]
  }

  export type EvidenceUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput> | EvidenceCreateWithoutAssigneeInput[] | EvidenceUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutAssigneeInput | EvidenceCreateOrConnectWithoutAssigneeInput[]
    upsert?: EvidenceUpsertWithWhereUniqueWithoutAssigneeInput | EvidenceUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: EvidenceCreateManyAssigneeInputEnvelope
    set?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    disconnect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    delete?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    update?: EvidenceUpdateWithWhereUniqueWithoutAssigneeInput | EvidenceUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: EvidenceUpdateManyWithWhereWithoutAssigneeInput | EvidenceUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
  }

  export type PolicyUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput> | PolicyCreateWithoutAssigneeInput[] | PolicyUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutAssigneeInput | PolicyCreateOrConnectWithoutAssigneeInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutAssigneeInput | PolicyUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: PolicyCreateManyAssigneeInputEnvelope
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutAssigneeInput | PolicyUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutAssigneeInput | PolicyUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type RiskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput> | RiskCreateWithoutAssigneeInput[] | RiskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutAssigneeInput | RiskCreateOrConnectWithoutAssigneeInput[]
    upsert?: RiskUpsertWithWhereUniqueWithoutAssigneeInput | RiskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: RiskCreateManyAssigneeInputEnvelope
    set?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    disconnect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    delete?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    update?: RiskUpdateWithWhereUniqueWithoutAssigneeInput | RiskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: RiskUpdateManyWithWhereWithoutAssigneeInput | RiskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: RiskScalarWhereInput | RiskScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type VendorUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput> | VendorCreateWithoutAssigneeInput[] | VendorUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutAssigneeInput | VendorCreateOrConnectWithoutAssigneeInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutAssigneeInput | VendorUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: VendorCreateManyAssigneeInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutAssigneeInput | VendorUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutAssigneeInput | VendorUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput> | EmployeeTrainingVideoCompletionCreateWithoutMemberInput[] | EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput | EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput[]
    upsert?: EmployeeTrainingVideoCompletionUpsertWithWhereUniqueWithoutMemberInput | EmployeeTrainingVideoCompletionUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: EmployeeTrainingVideoCompletionCreateManyMemberInputEnvelope
    set?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    disconnect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    delete?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    connect?: EmployeeTrainingVideoCompletionWhereUniqueInput | EmployeeTrainingVideoCompletionWhereUniqueInput[]
    update?: EmployeeTrainingVideoCompletionUpdateWithWhereUniqueWithoutMemberInput | EmployeeTrainingVideoCompletionUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: EmployeeTrainingVideoCompletionUpdateManyWithWhereWithoutMemberInput | EmployeeTrainingVideoCompletionUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: EmployeeTrainingVideoCompletionScalarWhereInput | EmployeeTrainingVideoCompletionScalarWhereInput[]
  }

  export type EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput> | EvidenceCreateWithoutAssigneeInput[] | EvidenceUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutAssigneeInput | EvidenceCreateOrConnectWithoutAssigneeInput[]
    upsert?: EvidenceUpsertWithWhereUniqueWithoutAssigneeInput | EvidenceUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: EvidenceCreateManyAssigneeInputEnvelope
    set?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    disconnect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    delete?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    update?: EvidenceUpdateWithWhereUniqueWithoutAssigneeInput | EvidenceUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: EvidenceUpdateManyWithWhereWithoutAssigneeInput | EvidenceUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
  }

  export type PolicyUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput> | PolicyCreateWithoutAssigneeInput[] | PolicyUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutAssigneeInput | PolicyCreateOrConnectWithoutAssigneeInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutAssigneeInput | PolicyUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: PolicyCreateManyAssigneeInputEnvelope
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutAssigneeInput | PolicyUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutAssigneeInput | PolicyUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type RiskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput> | RiskCreateWithoutAssigneeInput[] | RiskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutAssigneeInput | RiskCreateOrConnectWithoutAssigneeInput[]
    upsert?: RiskUpsertWithWhereUniqueWithoutAssigneeInput | RiskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: RiskCreateManyAssigneeInputEnvelope
    set?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    disconnect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    delete?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    update?: RiskUpdateWithWhereUniqueWithoutAssigneeInput | RiskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: RiskUpdateManyWithWhereWithoutAssigneeInput | RiskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: RiskScalarWhereInput | RiskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type VendorUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput> | VendorCreateWithoutAssigneeInput[] | VendorUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutAssigneeInput | VendorCreateOrConnectWithoutAssigneeInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutAssigneeInput | VendorUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: VendorCreateManyAssigneeInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutAssigneeInput | VendorUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutAssigneeInput | VendorUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role | null
  }

  export type OrganizationUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    upsert?: OrganizationUpsertWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitationsInput, OrganizationUpdateWithoutInvitationsInput>, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    upsert?: UserUpsertWithoutInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsInput, UserUpdateWithoutInvitationsInput>, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type MemberCreateNestedOneWithoutCommentsInput = {
    create?: XOR<MemberCreateWithoutCommentsInput, MemberUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutCommentsInput
    connect?: MemberWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutCommentsInput = {
    create?: XOR<OrganizationCreateWithoutCommentsInput, OrganizationUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCommentsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<MemberCreateWithoutCommentsInput, MemberUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutCommentsInput
    upsert?: MemberUpsertWithoutCommentsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutCommentsInput, MemberUpdateWithoutCommentsInput>, MemberUncheckedUpdateWithoutCommentsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<OrganizationCreateWithoutCommentsInput, OrganizationUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCommentsInput
    upsert?: OrganizationUpsertWithoutCommentsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCommentsInput, OrganizationUpdateWithoutCommentsInput>, OrganizationUncheckedUpdateWithoutCommentsInput>
  }

  export type FrameworkInstanceCreateNestedManyWithoutControlsInput = {
    create?: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput> | FrameworkInstanceCreateWithoutControlsInput[] | FrameworkInstanceUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutControlsInput | FrameworkInstanceCreateOrConnectWithoutControlsInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutControlsInput = {
    create?: XOR<OrganizationCreateWithoutControlsInput, OrganizationUncheckedCreateWithoutControlsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutControlsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ArtifactCreateNestedManyWithoutControlsInput = {
    create?: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput> | ArtifactCreateWithoutControlsInput[] | ArtifactUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutControlsInput | ArtifactCreateOrConnectWithoutControlsInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type RequirementMapCreateNestedManyWithoutControlInput = {
    create?: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput> | RequirementMapCreateWithoutControlInput[] | RequirementMapUncheckedCreateWithoutControlInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutControlInput | RequirementMapCreateOrConnectWithoutControlInput[]
    createMany?: RequirementMapCreateManyControlInputEnvelope
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
  }

  export type FrameworkInstanceUncheckedCreateNestedManyWithoutControlsInput = {
    create?: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput> | FrameworkInstanceCreateWithoutControlsInput[] | FrameworkInstanceUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutControlsInput | FrameworkInstanceCreateOrConnectWithoutControlsInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
  }

  export type ArtifactUncheckedCreateNestedManyWithoutControlsInput = {
    create?: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput> | ArtifactCreateWithoutControlsInput[] | ArtifactUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutControlsInput | ArtifactCreateOrConnectWithoutControlsInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type RequirementMapUncheckedCreateNestedManyWithoutControlInput = {
    create?: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput> | RequirementMapCreateWithoutControlInput[] | RequirementMapUncheckedCreateWithoutControlInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutControlInput | RequirementMapCreateOrConnectWithoutControlInput[]
    createMany?: RequirementMapCreateManyControlInputEnvelope
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
  }

  export type FrameworkInstanceUpdateManyWithoutControlsNestedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput> | FrameworkInstanceCreateWithoutControlsInput[] | FrameworkInstanceUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutControlsInput | FrameworkInstanceCreateOrConnectWithoutControlsInput[]
    upsert?: FrameworkInstanceUpsertWithWhereUniqueWithoutControlsInput | FrameworkInstanceUpsertWithWhereUniqueWithoutControlsInput[]
    set?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    disconnect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    delete?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    update?: FrameworkInstanceUpdateWithWhereUniqueWithoutControlsInput | FrameworkInstanceUpdateWithWhereUniqueWithoutControlsInput[]
    updateMany?: FrameworkInstanceUpdateManyWithWhereWithoutControlsInput | FrameworkInstanceUpdateManyWithWhereWithoutControlsInput[]
    deleteMany?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutControlsNestedInput = {
    create?: XOR<OrganizationCreateWithoutControlsInput, OrganizationUncheckedCreateWithoutControlsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutControlsInput
    upsert?: OrganizationUpsertWithoutControlsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutControlsInput, OrganizationUpdateWithoutControlsInput>, OrganizationUncheckedUpdateWithoutControlsInput>
  }

  export type ArtifactUpdateManyWithoutControlsNestedInput = {
    create?: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput> | ArtifactCreateWithoutControlsInput[] | ArtifactUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutControlsInput | ArtifactCreateOrConnectWithoutControlsInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutControlsInput | ArtifactUpsertWithWhereUniqueWithoutControlsInput[]
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutControlsInput | ArtifactUpdateWithWhereUniqueWithoutControlsInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutControlsInput | ArtifactUpdateManyWithWhereWithoutControlsInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type RequirementMapUpdateManyWithoutControlNestedInput = {
    create?: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput> | RequirementMapCreateWithoutControlInput[] | RequirementMapUncheckedCreateWithoutControlInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutControlInput | RequirementMapCreateOrConnectWithoutControlInput[]
    upsert?: RequirementMapUpsertWithWhereUniqueWithoutControlInput | RequirementMapUpsertWithWhereUniqueWithoutControlInput[]
    createMany?: RequirementMapCreateManyControlInputEnvelope
    set?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    disconnect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    delete?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    update?: RequirementMapUpdateWithWhereUniqueWithoutControlInput | RequirementMapUpdateWithWhereUniqueWithoutControlInput[]
    updateMany?: RequirementMapUpdateManyWithWhereWithoutControlInput | RequirementMapUpdateManyWithWhereWithoutControlInput[]
    deleteMany?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
  }

  export type FrameworkInstanceUncheckedUpdateManyWithoutControlsNestedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput> | FrameworkInstanceCreateWithoutControlsInput[] | FrameworkInstanceUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutControlsInput | FrameworkInstanceCreateOrConnectWithoutControlsInput[]
    upsert?: FrameworkInstanceUpsertWithWhereUniqueWithoutControlsInput | FrameworkInstanceUpsertWithWhereUniqueWithoutControlsInput[]
    set?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    disconnect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    delete?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    update?: FrameworkInstanceUpdateWithWhereUniqueWithoutControlsInput | FrameworkInstanceUpdateWithWhereUniqueWithoutControlsInput[]
    updateMany?: FrameworkInstanceUpdateManyWithWhereWithoutControlsInput | FrameworkInstanceUpdateManyWithWhereWithoutControlsInput[]
    deleteMany?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
  }

  export type ArtifactUncheckedUpdateManyWithoutControlsNestedInput = {
    create?: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput> | ArtifactCreateWithoutControlsInput[] | ArtifactUncheckedCreateWithoutControlsInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutControlsInput | ArtifactCreateOrConnectWithoutControlsInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutControlsInput | ArtifactUpsertWithWhereUniqueWithoutControlsInput[]
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutControlsInput | ArtifactUpdateWithWhereUniqueWithoutControlsInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutControlsInput | ArtifactUpdateManyWithWhereWithoutControlsInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type RequirementMapUncheckedUpdateManyWithoutControlNestedInput = {
    create?: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput> | RequirementMapCreateWithoutControlInput[] | RequirementMapUncheckedCreateWithoutControlInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutControlInput | RequirementMapCreateOrConnectWithoutControlInput[]
    upsert?: RequirementMapUpsertWithWhereUniqueWithoutControlInput | RequirementMapUpsertWithWhereUniqueWithoutControlInput[]
    createMany?: RequirementMapCreateManyControlInputEnvelope
    set?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    disconnect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    delete?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    update?: RequirementMapUpdateWithWhereUniqueWithoutControlInput | RequirementMapUpdateWithWhereUniqueWithoutControlInput[]
    updateMany?: RequirementMapUpdateManyWithWhereWithoutControlInput | RequirementMapUpdateManyWithWhereWithoutControlInput[]
    deleteMany?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
  }

  export type EvidenceCreateadditionalUrlsInput = {
    set: string[]
  }

  export type EvidenceCreatefileUrlsInput = {
    set: string[]
  }

  export type MemberCreateNestedOneWithoutEvidenceInput = {
    create?: XOR<MemberCreateWithoutEvidenceInput, MemberUncheckedCreateWithoutEvidenceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEvidenceInput
    connect?: MemberWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutEvidenceInput = {
    create?: XOR<OrganizationCreateWithoutEvidenceInput, OrganizationUncheckedCreateWithoutEvidenceInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEvidenceInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ArtifactCreateNestedManyWithoutEvidenceInput = {
    create?: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput> | ArtifactCreateWithoutEvidenceInput[] | ArtifactUncheckedCreateWithoutEvidenceInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutEvidenceInput | ArtifactCreateOrConnectWithoutEvidenceInput[]
    createMany?: ArtifactCreateManyEvidenceInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type ArtifactUncheckedCreateNestedManyWithoutEvidenceInput = {
    create?: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput> | ArtifactCreateWithoutEvidenceInput[] | ArtifactUncheckedCreateWithoutEvidenceInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutEvidenceInput | ArtifactCreateOrConnectWithoutEvidenceInput[]
    createMany?: ArtifactCreateManyEvidenceInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type EvidenceUpdateadditionalUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EvidenceUpdatefileUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.Frequency | null
  }

  export type NullableEnumEvidenceStatusFieldUpdateOperationsInput = {
    set?: $Enums.EvidenceStatus | null
  }

  export type MemberUpdateOneWithoutEvidenceNestedInput = {
    create?: XOR<MemberCreateWithoutEvidenceInput, MemberUncheckedCreateWithoutEvidenceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutEvidenceInput
    upsert?: MemberUpsertWithoutEvidenceInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutEvidenceInput, MemberUpdateWithoutEvidenceInput>, MemberUncheckedUpdateWithoutEvidenceInput>
  }

  export type OrganizationUpdateOneRequiredWithoutEvidenceNestedInput = {
    create?: XOR<OrganizationCreateWithoutEvidenceInput, OrganizationUncheckedCreateWithoutEvidenceInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEvidenceInput
    upsert?: OrganizationUpsertWithoutEvidenceInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutEvidenceInput, OrganizationUpdateWithoutEvidenceInput>, OrganizationUncheckedUpdateWithoutEvidenceInput>
  }

  export type ArtifactUpdateManyWithoutEvidenceNestedInput = {
    create?: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput> | ArtifactCreateWithoutEvidenceInput[] | ArtifactUncheckedCreateWithoutEvidenceInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutEvidenceInput | ArtifactCreateOrConnectWithoutEvidenceInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutEvidenceInput | ArtifactUpsertWithWhereUniqueWithoutEvidenceInput[]
    createMany?: ArtifactCreateManyEvidenceInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutEvidenceInput | ArtifactUpdateWithWhereUniqueWithoutEvidenceInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutEvidenceInput | ArtifactUpdateManyWithWhereWithoutEvidenceInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type ArtifactUncheckedUpdateManyWithoutEvidenceNestedInput = {
    create?: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput> | ArtifactCreateWithoutEvidenceInput[] | ArtifactUncheckedCreateWithoutEvidenceInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutEvidenceInput | ArtifactCreateOrConnectWithoutEvidenceInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutEvidenceInput | ArtifactUpsertWithWhereUniqueWithoutEvidenceInput[]
    createMany?: ArtifactCreateManyEvidenceInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutEvidenceInput | ArtifactUpdateWithWhereUniqueWithoutEvidenceInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutEvidenceInput | ArtifactUpdateManyWithWhereWithoutEvidenceInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type ControlCreateNestedManyWithoutFrameworkInstancesInput = {
    create?: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput> | ControlCreateWithoutFrameworkInstancesInput[] | ControlUncheckedCreateWithoutFrameworkInstancesInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutFrameworkInstancesInput | ControlCreateOrConnectWithoutFrameworkInstancesInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutFrameworkInstancesInput = {
    create?: XOR<OrganizationCreateWithoutFrameworkInstancesInput, OrganizationUncheckedCreateWithoutFrameworkInstancesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFrameworkInstancesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type RequirementMapCreateNestedManyWithoutFrameworkInstanceInput = {
    create?: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput> | RequirementMapCreateWithoutFrameworkInstanceInput[] | RequirementMapUncheckedCreateWithoutFrameworkInstanceInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutFrameworkInstanceInput | RequirementMapCreateOrConnectWithoutFrameworkInstanceInput[]
    createMany?: RequirementMapCreateManyFrameworkInstanceInputEnvelope
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
  }

  export type ControlUncheckedCreateNestedManyWithoutFrameworkInstancesInput = {
    create?: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput> | ControlCreateWithoutFrameworkInstancesInput[] | ControlUncheckedCreateWithoutFrameworkInstancesInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutFrameworkInstancesInput | ControlCreateOrConnectWithoutFrameworkInstancesInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type RequirementMapUncheckedCreateNestedManyWithoutFrameworkInstanceInput = {
    create?: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput> | RequirementMapCreateWithoutFrameworkInstanceInput[] | RequirementMapUncheckedCreateWithoutFrameworkInstanceInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutFrameworkInstanceInput | RequirementMapCreateOrConnectWithoutFrameworkInstanceInput[]
    createMany?: RequirementMapCreateManyFrameworkInstanceInputEnvelope
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
  }

  export type EnumFrameworkIdFieldUpdateOperationsInput = {
    set?: $Enums.FrameworkId
  }

  export type ControlUpdateManyWithoutFrameworkInstancesNestedInput = {
    create?: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput> | ControlCreateWithoutFrameworkInstancesInput[] | ControlUncheckedCreateWithoutFrameworkInstancesInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutFrameworkInstancesInput | ControlCreateOrConnectWithoutFrameworkInstancesInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutFrameworkInstancesInput | ControlUpsertWithWhereUniqueWithoutFrameworkInstancesInput[]
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutFrameworkInstancesInput | ControlUpdateWithWhereUniqueWithoutFrameworkInstancesInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutFrameworkInstancesInput | ControlUpdateManyWithWhereWithoutFrameworkInstancesInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutFrameworkInstancesNestedInput = {
    create?: XOR<OrganizationCreateWithoutFrameworkInstancesInput, OrganizationUncheckedCreateWithoutFrameworkInstancesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFrameworkInstancesInput
    upsert?: OrganizationUpsertWithoutFrameworkInstancesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutFrameworkInstancesInput, OrganizationUpdateWithoutFrameworkInstancesInput>, OrganizationUncheckedUpdateWithoutFrameworkInstancesInput>
  }

  export type RequirementMapUpdateManyWithoutFrameworkInstanceNestedInput = {
    create?: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput> | RequirementMapCreateWithoutFrameworkInstanceInput[] | RequirementMapUncheckedCreateWithoutFrameworkInstanceInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutFrameworkInstanceInput | RequirementMapCreateOrConnectWithoutFrameworkInstanceInput[]
    upsert?: RequirementMapUpsertWithWhereUniqueWithoutFrameworkInstanceInput | RequirementMapUpsertWithWhereUniqueWithoutFrameworkInstanceInput[]
    createMany?: RequirementMapCreateManyFrameworkInstanceInputEnvelope
    set?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    disconnect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    delete?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    update?: RequirementMapUpdateWithWhereUniqueWithoutFrameworkInstanceInput | RequirementMapUpdateWithWhereUniqueWithoutFrameworkInstanceInput[]
    updateMany?: RequirementMapUpdateManyWithWhereWithoutFrameworkInstanceInput | RequirementMapUpdateManyWithWhereWithoutFrameworkInstanceInput[]
    deleteMany?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
  }

  export type ControlUncheckedUpdateManyWithoutFrameworkInstancesNestedInput = {
    create?: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput> | ControlCreateWithoutFrameworkInstancesInput[] | ControlUncheckedCreateWithoutFrameworkInstancesInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutFrameworkInstancesInput | ControlCreateOrConnectWithoutFrameworkInstancesInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutFrameworkInstancesInput | ControlUpsertWithWhereUniqueWithoutFrameworkInstancesInput[]
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutFrameworkInstancesInput | ControlUpdateWithWhereUniqueWithoutFrameworkInstancesInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutFrameworkInstancesInput | ControlUpdateManyWithWhereWithoutFrameworkInstancesInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceNestedInput = {
    create?: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput> | RequirementMapCreateWithoutFrameworkInstanceInput[] | RequirementMapUncheckedCreateWithoutFrameworkInstanceInput[]
    connectOrCreate?: RequirementMapCreateOrConnectWithoutFrameworkInstanceInput | RequirementMapCreateOrConnectWithoutFrameworkInstanceInput[]
    upsert?: RequirementMapUpsertWithWhereUniqueWithoutFrameworkInstanceInput | RequirementMapUpsertWithWhereUniqueWithoutFrameworkInstanceInput[]
    createMany?: RequirementMapCreateManyFrameworkInstanceInputEnvelope
    set?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    disconnect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    delete?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    connect?: RequirementMapWhereUniqueInput | RequirementMapWhereUniqueInput[]
    update?: RequirementMapUpdateWithWhereUniqueWithoutFrameworkInstanceInput | RequirementMapUpdateWithWhereUniqueWithoutFrameworkInstanceInput[]
    updateMany?: RequirementMapUpdateManyWithWhereWithoutFrameworkInstanceInput | RequirementMapUpdateManyWithWhereWithoutFrameworkInstanceInput[]
    deleteMany?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutIntegrationsInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type IntegrationResultCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput> | IntegrationResultCreateWithoutIntegrationInput[] | IntegrationResultUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutIntegrationInput | IntegrationResultCreateOrConnectWithoutIntegrationInput[]
    createMany?: IntegrationResultCreateManyIntegrationInputEnvelope
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
  }

  export type IntegrationResultUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput> | IntegrationResultCreateWithoutIntegrationInput[] | IntegrationResultUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutIntegrationInput | IntegrationResultCreateOrConnectWithoutIntegrationInput[]
    createMany?: IntegrationResultCreateManyIntegrationInputEnvelope
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationsInput
    upsert?: OrganizationUpsertWithoutIntegrationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutIntegrationsInput, OrganizationUpdateWithoutIntegrationsInput>, OrganizationUncheckedUpdateWithoutIntegrationsInput>
  }

  export type IntegrationResultUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput> | IntegrationResultCreateWithoutIntegrationInput[] | IntegrationResultUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutIntegrationInput | IntegrationResultCreateOrConnectWithoutIntegrationInput[]
    upsert?: IntegrationResultUpsertWithWhereUniqueWithoutIntegrationInput | IntegrationResultUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: IntegrationResultCreateManyIntegrationInputEnvelope
    set?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    disconnect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    delete?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    update?: IntegrationResultUpdateWithWhereUniqueWithoutIntegrationInput | IntegrationResultUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: IntegrationResultUpdateManyWithWhereWithoutIntegrationInput | IntegrationResultUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
  }

  export type IntegrationResultUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput> | IntegrationResultCreateWithoutIntegrationInput[] | IntegrationResultUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationResultCreateOrConnectWithoutIntegrationInput | IntegrationResultCreateOrConnectWithoutIntegrationInput[]
    upsert?: IntegrationResultUpsertWithWhereUniqueWithoutIntegrationInput | IntegrationResultUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: IntegrationResultCreateManyIntegrationInputEnvelope
    set?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    disconnect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    delete?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    connect?: IntegrationResultWhereUniqueInput | IntegrationResultWhereUniqueInput[]
    update?: IntegrationResultUpdateWithWhereUniqueWithoutIntegrationInput | IntegrationResultUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: IntegrationResultUpdateManyWithWhereWithoutIntegrationInput | IntegrationResultUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutIntegrationResultsInput = {
    create?: XOR<UserCreateWithoutIntegrationResultsInput, UserUncheckedCreateWithoutIntegrationResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIntegrationResultsInput
    connect?: UserWhereUniqueInput
  }

  export type IntegrationCreateNestedOneWithoutResultsInput = {
    create?: XOR<IntegrationCreateWithoutResultsInput, IntegrationUncheckedCreateWithoutResultsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutResultsInput
    connect?: IntegrationWhereUniqueInput
  }

  export type UserUpdateOneWithoutIntegrationResultsNestedInput = {
    create?: XOR<UserCreateWithoutIntegrationResultsInput, UserUncheckedCreateWithoutIntegrationResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutIntegrationResultsInput
    upsert?: UserUpsertWithoutIntegrationResultsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIntegrationResultsInput, UserUpdateWithoutIntegrationResultsInput>, UserUncheckedUpdateWithoutIntegrationResultsInput>
  }

  export type IntegrationUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<IntegrationCreateWithoutResultsInput, IntegrationUncheckedCreateWithoutResultsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutResultsInput
    upsert?: IntegrationUpsertWithoutResultsInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutResultsInput, IntegrationUpdateWithoutResultsInput>, IntegrationUncheckedUpdateWithoutResultsInput>
  }

  export type ApiKeyCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput> | ApiKeyCreateWithoutOrganizationInput[] | ApiKeyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutOrganizationInput | ApiKeyCreateOrConnectWithoutOrganizationInput[]
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type ArtifactCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput> | ArtifactCreateWithoutOrganizationInput[] | ArtifactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutOrganizationInput | ArtifactCreateOrConnectWithoutOrganizationInput[]
    createMany?: ArtifactCreateManyOrganizationInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ControlCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput> | ControlCreateWithoutOrganizationInput[] | ControlUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutOrganizationInput | ControlCreateOrConnectWithoutOrganizationInput[]
    createMany?: ControlCreateManyOrganizationInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type EvidenceCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput> | EvidenceCreateWithoutOrganizationInput[] | EvidenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutOrganizationInput | EvidenceCreateOrConnectWithoutOrganizationInput[]
    createMany?: EvidenceCreateManyOrganizationInputEnvelope
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
  }

  export type FrameworkInstanceCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput> | FrameworkInstanceCreateWithoutOrganizationInput[] | FrameworkInstanceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutOrganizationInput | FrameworkInstanceCreateOrConnectWithoutOrganizationInput[]
    createMany?: FrameworkInstanceCreateManyOrganizationInputEnvelope
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
  }

  export type IntegrationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type MemberCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type PolicyCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput> | PolicyCreateWithoutOrganizationInput[] | PolicyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutOrganizationInput | PolicyCreateOrConnectWithoutOrganizationInput[]
    createMany?: PolicyCreateManyOrganizationInputEnvelope
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type RiskCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput> | RiskCreateWithoutOrganizationInput[] | RiskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutOrganizationInput | RiskCreateOrConnectWithoutOrganizationInput[]
    createMany?: RiskCreateManyOrganizationInputEnvelope
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
  }

  export type VendorCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput> | VendorCreateWithoutOrganizationInput[] | VendorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutOrganizationInput | VendorCreateOrConnectWithoutOrganizationInput[]
    createMany?: VendorCreateManyOrganizationInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput> | TaskCreateWithoutOrganizationInput[] | TaskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutOrganizationInput | TaskCreateOrConnectWithoutOrganizationInput[]
    createMany?: TaskCreateManyOrganizationInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput> | CommentCreateWithoutOrganizationInput[] | CommentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrganizationInput | CommentCreateOrConnectWithoutOrganizationInput[]
    createMany?: CommentCreateManyOrganizationInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput> | ApiKeyCreateWithoutOrganizationInput[] | ApiKeyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutOrganizationInput | ApiKeyCreateOrConnectWithoutOrganizationInput[]
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type ArtifactUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput> | ArtifactCreateWithoutOrganizationInput[] | ArtifactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutOrganizationInput | ArtifactCreateOrConnectWithoutOrganizationInput[]
    createMany?: ArtifactCreateManyOrganizationInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ControlUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput> | ControlCreateWithoutOrganizationInput[] | ControlUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutOrganizationInput | ControlCreateOrConnectWithoutOrganizationInput[]
    createMany?: ControlCreateManyOrganizationInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type EvidenceUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput> | EvidenceCreateWithoutOrganizationInput[] | EvidenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutOrganizationInput | EvidenceCreateOrConnectWithoutOrganizationInput[]
    createMany?: EvidenceCreateManyOrganizationInputEnvelope
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
  }

  export type FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput> | FrameworkInstanceCreateWithoutOrganizationInput[] | FrameworkInstanceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutOrganizationInput | FrameworkInstanceCreateOrConnectWithoutOrganizationInput[]
    createMany?: FrameworkInstanceCreateManyOrganizationInputEnvelope
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
  }

  export type IntegrationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type PolicyUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput> | PolicyCreateWithoutOrganizationInput[] | PolicyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutOrganizationInput | PolicyCreateOrConnectWithoutOrganizationInput[]
    createMany?: PolicyCreateManyOrganizationInputEnvelope
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type RiskUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput> | RiskCreateWithoutOrganizationInput[] | RiskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutOrganizationInput | RiskCreateOrConnectWithoutOrganizationInput[]
    createMany?: RiskCreateManyOrganizationInputEnvelope
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
  }

  export type VendorUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput> | VendorCreateWithoutOrganizationInput[] | VendorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutOrganizationInput | VendorCreateOrConnectWithoutOrganizationInput[]
    createMany?: VendorCreateManyOrganizationInputEnvelope
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput> | TaskCreateWithoutOrganizationInput[] | TaskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutOrganizationInput | TaskCreateOrConnectWithoutOrganizationInput[]
    createMany?: TaskCreateManyOrganizationInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput> | CommentCreateWithoutOrganizationInput[] | CommentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrganizationInput | CommentCreateOrConnectWithoutOrganizationInput[]
    createMany?: CommentCreateManyOrganizationInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ApiKeyUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput> | ApiKeyCreateWithoutOrganizationInput[] | ApiKeyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutOrganizationInput | ApiKeyCreateOrConnectWithoutOrganizationInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput | ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput | ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutOrganizationInput | ApiKeyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type ArtifactUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput> | ArtifactCreateWithoutOrganizationInput[] | ArtifactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutOrganizationInput | ArtifactCreateOrConnectWithoutOrganizationInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutOrganizationInput | ArtifactUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ArtifactCreateManyOrganizationInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutOrganizationInput | ArtifactUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutOrganizationInput | ArtifactUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrganizationInput | AuditLogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrganizationInput | AuditLogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrganizationInput | AuditLogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ControlUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput> | ControlCreateWithoutOrganizationInput[] | ControlUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutOrganizationInput | ControlCreateOrConnectWithoutOrganizationInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutOrganizationInput | ControlUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ControlCreateManyOrganizationInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutOrganizationInput | ControlUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutOrganizationInput | ControlUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type EvidenceUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput> | EvidenceCreateWithoutOrganizationInput[] | EvidenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutOrganizationInput | EvidenceCreateOrConnectWithoutOrganizationInput[]
    upsert?: EvidenceUpsertWithWhereUniqueWithoutOrganizationInput | EvidenceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EvidenceCreateManyOrganizationInputEnvelope
    set?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    disconnect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    delete?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    update?: EvidenceUpdateWithWhereUniqueWithoutOrganizationInput | EvidenceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EvidenceUpdateManyWithWhereWithoutOrganizationInput | EvidenceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
  }

  export type FrameworkInstanceUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput> | FrameworkInstanceCreateWithoutOrganizationInput[] | FrameworkInstanceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutOrganizationInput | FrameworkInstanceCreateOrConnectWithoutOrganizationInput[]
    upsert?: FrameworkInstanceUpsertWithWhereUniqueWithoutOrganizationInput | FrameworkInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: FrameworkInstanceCreateManyOrganizationInputEnvelope
    set?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    disconnect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    delete?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    update?: FrameworkInstanceUpdateWithWhereUniqueWithoutOrganizationInput | FrameworkInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: FrameworkInstanceUpdateManyWithWhereWithoutOrganizationInput | FrameworkInstanceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
  }

  export type IntegrationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutOrganizationInput | IntegrationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type MemberUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type PolicyUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput> | PolicyCreateWithoutOrganizationInput[] | PolicyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutOrganizationInput | PolicyCreateOrConnectWithoutOrganizationInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutOrganizationInput | PolicyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PolicyCreateManyOrganizationInputEnvelope
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutOrganizationInput | PolicyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutOrganizationInput | PolicyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type RiskUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput> | RiskCreateWithoutOrganizationInput[] | RiskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutOrganizationInput | RiskCreateOrConnectWithoutOrganizationInput[]
    upsert?: RiskUpsertWithWhereUniqueWithoutOrganizationInput | RiskUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RiskCreateManyOrganizationInputEnvelope
    set?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    disconnect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    delete?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    update?: RiskUpdateWithWhereUniqueWithoutOrganizationInput | RiskUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RiskUpdateManyWithWhereWithoutOrganizationInput | RiskUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RiskScalarWhereInput | RiskScalarWhereInput[]
  }

  export type VendorUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput> | VendorCreateWithoutOrganizationInput[] | VendorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutOrganizationInput | VendorCreateOrConnectWithoutOrganizationInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutOrganizationInput | VendorUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: VendorCreateManyOrganizationInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutOrganizationInput | VendorUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutOrganizationInput | VendorUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput> | TaskCreateWithoutOrganizationInput[] | TaskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutOrganizationInput | TaskCreateOrConnectWithoutOrganizationInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutOrganizationInput | TaskUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TaskCreateManyOrganizationInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutOrganizationInput | TaskUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutOrganizationInput | TaskUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput> | CommentCreateWithoutOrganizationInput[] | CommentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrganizationInput | CommentCreateOrConnectWithoutOrganizationInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrganizationInput | CommentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CommentCreateManyOrganizationInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrganizationInput | CommentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrganizationInput | CommentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput> | ApiKeyCreateWithoutOrganizationInput[] | ApiKeyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutOrganizationInput | ApiKeyCreateOrConnectWithoutOrganizationInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput | ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput | ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutOrganizationInput | ApiKeyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput> | ArtifactCreateWithoutOrganizationInput[] | ArtifactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutOrganizationInput | ArtifactCreateOrConnectWithoutOrganizationInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutOrganizationInput | ArtifactUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ArtifactCreateManyOrganizationInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutOrganizationInput | ArtifactUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutOrganizationInput | ArtifactUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrganizationInput | AuditLogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrganizationInput | AuditLogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrganizationInput | AuditLogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ControlUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput> | ControlCreateWithoutOrganizationInput[] | ControlUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutOrganizationInput | ControlCreateOrConnectWithoutOrganizationInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutOrganizationInput | ControlUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ControlCreateManyOrganizationInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutOrganizationInput | ControlUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutOrganizationInput | ControlUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput> | EvidenceCreateWithoutOrganizationInput[] | EvidenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EvidenceCreateOrConnectWithoutOrganizationInput | EvidenceCreateOrConnectWithoutOrganizationInput[]
    upsert?: EvidenceUpsertWithWhereUniqueWithoutOrganizationInput | EvidenceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EvidenceCreateManyOrganizationInputEnvelope
    set?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    disconnect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    delete?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    connect?: EvidenceWhereUniqueInput | EvidenceWhereUniqueInput[]
    update?: EvidenceUpdateWithWhereUniqueWithoutOrganizationInput | EvidenceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EvidenceUpdateManyWithWhereWithoutOrganizationInput | EvidenceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
  }

  export type FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput> | FrameworkInstanceCreateWithoutOrganizationInput[] | FrameworkInstanceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutOrganizationInput | FrameworkInstanceCreateOrConnectWithoutOrganizationInput[]
    upsert?: FrameworkInstanceUpsertWithWhereUniqueWithoutOrganizationInput | FrameworkInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: FrameworkInstanceCreateManyOrganizationInputEnvelope
    set?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    disconnect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    delete?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    connect?: FrameworkInstanceWhereUniqueInput | FrameworkInstanceWhereUniqueInput[]
    update?: FrameworkInstanceUpdateWithWhereUniqueWithoutOrganizationInput | FrameworkInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: FrameworkInstanceUpdateManyWithWhereWithoutOrganizationInput | FrameworkInstanceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
  }

  export type IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutOrganizationInput | IntegrationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type PolicyUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput> | PolicyCreateWithoutOrganizationInput[] | PolicyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutOrganizationInput | PolicyCreateOrConnectWithoutOrganizationInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutOrganizationInput | PolicyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PolicyCreateManyOrganizationInputEnvelope
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutOrganizationInput | PolicyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutOrganizationInput | PolicyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type RiskUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput> | RiskCreateWithoutOrganizationInput[] | RiskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RiskCreateOrConnectWithoutOrganizationInput | RiskCreateOrConnectWithoutOrganizationInput[]
    upsert?: RiskUpsertWithWhereUniqueWithoutOrganizationInput | RiskUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RiskCreateManyOrganizationInputEnvelope
    set?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    disconnect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    delete?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    connect?: RiskWhereUniqueInput | RiskWhereUniqueInput[]
    update?: RiskUpdateWithWhereUniqueWithoutOrganizationInput | RiskUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RiskUpdateManyWithWhereWithoutOrganizationInput | RiskUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RiskScalarWhereInput | RiskScalarWhereInput[]
  }

  export type VendorUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput> | VendorCreateWithoutOrganizationInput[] | VendorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: VendorCreateOrConnectWithoutOrganizationInput | VendorCreateOrConnectWithoutOrganizationInput[]
    upsert?: VendorUpsertWithWhereUniqueWithoutOrganizationInput | VendorUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: VendorCreateManyOrganizationInputEnvelope
    set?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    disconnect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    delete?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    connect?: VendorWhereUniqueInput | VendorWhereUniqueInput[]
    update?: VendorUpdateWithWhereUniqueWithoutOrganizationInput | VendorUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: VendorUpdateManyWithWhereWithoutOrganizationInput | VendorUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: VendorScalarWhereInput | VendorScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput> | TaskCreateWithoutOrganizationInput[] | TaskUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutOrganizationInput | TaskCreateOrConnectWithoutOrganizationInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutOrganizationInput | TaskUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TaskCreateManyOrganizationInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutOrganizationInput | TaskUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutOrganizationInput | TaskUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput> | CommentCreateWithoutOrganizationInput[] | CommentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrganizationInput | CommentCreateOrConnectWithoutOrganizationInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrganizationInput | CommentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CommentCreateManyOrganizationInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrganizationInput | CommentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrganizationInput | CommentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PolicyCreatecontentInput = {
    set: InputJsonValue[]
  }

  export type PolicyCreatesignedByInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutPolicyInput = {
    create?: XOR<OrganizationCreateWithoutPolicyInput, OrganizationUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPolicyInput
    connect?: OrganizationWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutPolicyInput = {
    create?: XOR<MemberCreateWithoutPolicyInput, MemberUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPolicyInput
    connect?: MemberWhereUniqueInput
  }

  export type ArtifactCreateNestedManyWithoutPolicyInput = {
    create?: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput> | ArtifactCreateWithoutPolicyInput[] | ArtifactUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutPolicyInput | ArtifactCreateOrConnectWithoutPolicyInput[]
    createMany?: ArtifactCreateManyPolicyInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type ArtifactUncheckedCreateNestedManyWithoutPolicyInput = {
    create?: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput> | ArtifactCreateWithoutPolicyInput[] | ArtifactUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutPolicyInput | ArtifactCreateOrConnectWithoutPolicyInput[]
    createMany?: ArtifactCreateManyPolicyInputEnvelope
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
  }

  export type EnumPolicyStatusFieldUpdateOperationsInput = {
    set?: $Enums.PolicyStatus
  }

  export type PolicyUpdatecontentInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type NullableEnumDepartmentsFieldUpdateOperationsInput = {
    set?: $Enums.Departments | null
  }

  export type PolicyUpdatesignedByInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrganizationUpdateOneRequiredWithoutPolicyNestedInput = {
    create?: XOR<OrganizationCreateWithoutPolicyInput, OrganizationUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPolicyInput
    upsert?: OrganizationUpsertWithoutPolicyInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutPolicyInput, OrganizationUpdateWithoutPolicyInput>, OrganizationUncheckedUpdateWithoutPolicyInput>
  }

  export type MemberUpdateOneWithoutPolicyNestedInput = {
    create?: XOR<MemberCreateWithoutPolicyInput, MemberUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPolicyInput
    upsert?: MemberUpsertWithoutPolicyInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPolicyInput, MemberUpdateWithoutPolicyInput>, MemberUncheckedUpdateWithoutPolicyInput>
  }

  export type ArtifactUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput> | ArtifactCreateWithoutPolicyInput[] | ArtifactUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutPolicyInput | ArtifactCreateOrConnectWithoutPolicyInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutPolicyInput | ArtifactUpsertWithWhereUniqueWithoutPolicyInput[]
    createMany?: ArtifactCreateManyPolicyInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutPolicyInput | ArtifactUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutPolicyInput | ArtifactUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type ArtifactUncheckedUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput> | ArtifactCreateWithoutPolicyInput[] | ArtifactUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ArtifactCreateOrConnectWithoutPolicyInput | ArtifactCreateOrConnectWithoutPolicyInput[]
    upsert?: ArtifactUpsertWithWhereUniqueWithoutPolicyInput | ArtifactUpsertWithWhereUniqueWithoutPolicyInput[]
    createMany?: ArtifactCreateManyPolicyInputEnvelope
    set?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    disconnect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    delete?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    connect?: ArtifactWhereUniqueInput | ArtifactWhereUniqueInput[]
    update?: ArtifactUpdateWithWhereUniqueWithoutPolicyInput | ArtifactUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: ArtifactUpdateManyWithWhereWithoutPolicyInput | ArtifactUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
  }

  export type ControlCreateNestedOneWithoutRequirementsMappedInput = {
    create?: XOR<ControlCreateWithoutRequirementsMappedInput, ControlUncheckedCreateWithoutRequirementsMappedInput>
    connectOrCreate?: ControlCreateOrConnectWithoutRequirementsMappedInput
    connect?: ControlWhereUniqueInput
  }

  export type FrameworkInstanceCreateNestedOneWithoutRequirementsMappedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedCreateWithoutRequirementsMappedInput>
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutRequirementsMappedInput
    connect?: FrameworkInstanceWhereUniqueInput
  }

  export type EnumRequirementIdFieldUpdateOperationsInput = {
    set?: $Enums.RequirementId
  }

  export type ControlUpdateOneRequiredWithoutRequirementsMappedNestedInput = {
    create?: XOR<ControlCreateWithoutRequirementsMappedInput, ControlUncheckedCreateWithoutRequirementsMappedInput>
    connectOrCreate?: ControlCreateOrConnectWithoutRequirementsMappedInput
    upsert?: ControlUpsertWithoutRequirementsMappedInput
    connect?: ControlWhereUniqueInput
    update?: XOR<XOR<ControlUpdateToOneWithWhereWithoutRequirementsMappedInput, ControlUpdateWithoutRequirementsMappedInput>, ControlUncheckedUpdateWithoutRequirementsMappedInput>
  }

  export type FrameworkInstanceUpdateOneRequiredWithoutRequirementsMappedNestedInput = {
    create?: XOR<FrameworkInstanceCreateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedCreateWithoutRequirementsMappedInput>
    connectOrCreate?: FrameworkInstanceCreateOrConnectWithoutRequirementsMappedInput
    upsert?: FrameworkInstanceUpsertWithoutRequirementsMappedInput
    connect?: FrameworkInstanceWhereUniqueInput
    update?: XOR<XOR<FrameworkInstanceUpdateToOneWithWhereWithoutRequirementsMappedInput, FrameworkInstanceUpdateWithoutRequirementsMappedInput>, FrameworkInstanceUncheckedUpdateWithoutRequirementsMappedInput>
  }

  export type OrganizationCreateNestedOneWithoutRiskInput = {
    create?: XOR<OrganizationCreateWithoutRiskInput, OrganizationUncheckedCreateWithoutRiskInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRiskInput
    connect?: OrganizationWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutRiskInput = {
    create?: XOR<MemberCreateWithoutRiskInput, MemberUncheckedCreateWithoutRiskInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRiskInput
    connect?: MemberWhereUniqueInput
  }

  export type EnumRiskCategoryFieldUpdateOperationsInput = {
    set?: $Enums.RiskCategory
  }

  export type EnumRiskStatusFieldUpdateOperationsInput = {
    set?: $Enums.RiskStatus
  }

  export type EnumLikelihoodFieldUpdateOperationsInput = {
    set?: $Enums.Likelihood
  }

  export type EnumImpactFieldUpdateOperationsInput = {
    set?: $Enums.Impact
  }

  export type EnumRiskTreatmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.RiskTreatmentType
  }

  export type OrganizationUpdateOneRequiredWithoutRiskNestedInput = {
    create?: XOR<OrganizationCreateWithoutRiskInput, OrganizationUncheckedCreateWithoutRiskInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRiskInput
    upsert?: OrganizationUpsertWithoutRiskInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutRiskInput, OrganizationUpdateWithoutRiskInput>, OrganizationUncheckedUpdateWithoutRiskInput>
  }

  export type MemberUpdateOneWithoutRiskNestedInput = {
    create?: XOR<MemberCreateWithoutRiskInput, MemberUncheckedCreateWithoutRiskInput>
    connectOrCreate?: MemberCreateOrConnectWithoutRiskInput
    upsert?: MemberUpsertWithoutRiskInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutRiskInput, MemberUpdateWithoutRiskInput>, MemberUncheckedUpdateWithoutRiskInput>
  }

  export type OrganizationCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutApiKeysInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutApiKeysNestedInput = {
    create?: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutApiKeysInput
    upsert?: OrganizationUpsertWithoutApiKeysInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutApiKeysInput, OrganizationUpdateWithoutApiKeysInput>, OrganizationUncheckedUpdateWithoutApiKeysInput>
  }

  export type OrganizationCreateNestedOneWithoutAuditLogInput = {
    create?: XOR<OrganizationCreateWithoutAuditLogInput, OrganizationUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAuditLogInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogInput = {
    create?: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutAuditLogNestedInput = {
    create?: XOR<OrganizationCreateWithoutAuditLogInput, OrganizationUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAuditLogInput
    upsert?: OrganizationUpsertWithoutAuditLogInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAuditLogInput, OrganizationUpdateWithoutAuditLogInput>, OrganizationUncheckedUpdateWithoutAuditLogInput>
  }

  export type UserUpdateOneRequiredWithoutAuditLogNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogInput
    upsert?: UserUpsertWithoutAuditLogInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogInput, UserUpdateWithoutAuditLogInput>, UserUncheckedUpdateWithoutAuditLogInput>
  }

  export type MemberCreateNestedOneWithoutTaskInput = {
    create?: XOR<MemberCreateWithoutTaskInput, MemberUncheckedCreateWithoutTaskInput>
    connectOrCreate?: MemberCreateOrConnectWithoutTaskInput
    connect?: MemberWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutTasksInput = {
    create?: XOR<OrganizationCreateWithoutTasksInput, OrganizationUncheckedCreateWithoutTasksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTasksInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type EnumTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskType
  }

  export type MemberUpdateOneWithoutTaskNestedInput = {
    create?: XOR<MemberCreateWithoutTaskInput, MemberUncheckedCreateWithoutTaskInput>
    connectOrCreate?: MemberCreateOrConnectWithoutTaskInput
    upsert?: MemberUpsertWithoutTaskInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutTaskInput, MemberUpdateWithoutTaskInput>, MemberUncheckedUpdateWithoutTaskInput>
  }

  export type OrganizationUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<OrganizationCreateWithoutTasksInput, OrganizationUncheckedCreateWithoutTasksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTasksInput
    upsert?: OrganizationUpsertWithoutTasksInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutTasksInput, OrganizationUpdateWithoutTasksInput>, OrganizationUncheckedUpdateWithoutTasksInput>
  }

  export type VendorContactCreateNestedManyWithoutVendorInput = {
    create?: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput> | VendorContactCreateWithoutVendorInput[] | VendorContactUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: VendorContactCreateOrConnectWithoutVendorInput | VendorContactCreateOrConnectWithoutVendorInput[]
    createMany?: VendorContactCreateManyVendorInputEnvelope
    connect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutVendorsInput = {
    create?: XOR<OrganizationCreateWithoutVendorsInput, OrganizationUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutVendorsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutVendorInput = {
    create?: XOR<MemberCreateWithoutVendorInput, MemberUncheckedCreateWithoutVendorInput>
    connectOrCreate?: MemberCreateOrConnectWithoutVendorInput
    connect?: MemberWhereUniqueInput
  }

  export type VendorContactUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput> | VendorContactCreateWithoutVendorInput[] | VendorContactUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: VendorContactCreateOrConnectWithoutVendorInput | VendorContactCreateOrConnectWithoutVendorInput[]
    createMany?: VendorContactCreateManyVendorInputEnvelope
    connect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
  }

  export type EnumVendorCategoryFieldUpdateOperationsInput = {
    set?: $Enums.VendorCategory
  }

  export type EnumVendorStatusFieldUpdateOperationsInput = {
    set?: $Enums.VendorStatus
  }

  export type VendorContactUpdateManyWithoutVendorNestedInput = {
    create?: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput> | VendorContactCreateWithoutVendorInput[] | VendorContactUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: VendorContactCreateOrConnectWithoutVendorInput | VendorContactCreateOrConnectWithoutVendorInput[]
    upsert?: VendorContactUpsertWithWhereUniqueWithoutVendorInput | VendorContactUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: VendorContactCreateManyVendorInputEnvelope
    set?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    disconnect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    delete?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    connect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    update?: VendorContactUpdateWithWhereUniqueWithoutVendorInput | VendorContactUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: VendorContactUpdateManyWithWhereWithoutVendorInput | VendorContactUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: VendorContactScalarWhereInput | VendorContactScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutVendorsNestedInput = {
    create?: XOR<OrganizationCreateWithoutVendorsInput, OrganizationUncheckedCreateWithoutVendorsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutVendorsInput
    upsert?: OrganizationUpsertWithoutVendorsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutVendorsInput, OrganizationUpdateWithoutVendorsInput>, OrganizationUncheckedUpdateWithoutVendorsInput>
  }

  export type MemberUpdateOneWithoutVendorNestedInput = {
    create?: XOR<MemberCreateWithoutVendorInput, MemberUncheckedCreateWithoutVendorInput>
    connectOrCreate?: MemberCreateOrConnectWithoutVendorInput
    upsert?: MemberUpsertWithoutVendorInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutVendorInput, MemberUpdateWithoutVendorInput>, MemberUncheckedUpdateWithoutVendorInput>
  }

  export type VendorContactUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput> | VendorContactCreateWithoutVendorInput[] | VendorContactUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: VendorContactCreateOrConnectWithoutVendorInput | VendorContactCreateOrConnectWithoutVendorInput[]
    upsert?: VendorContactUpsertWithWhereUniqueWithoutVendorInput | VendorContactUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: VendorContactCreateManyVendorInputEnvelope
    set?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    disconnect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    delete?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    connect?: VendorContactWhereUniqueInput | VendorContactWhereUniqueInput[]
    update?: VendorContactUpdateWithWhereUniqueWithoutVendorInput | VendorContactUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: VendorContactUpdateManyWithWhereWithoutVendorInput | VendorContactUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: VendorContactScalarWhereInput | VendorContactScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutContactsInput = {
    create?: XOR<VendorCreateWithoutContactsInput, VendorUncheckedCreateWithoutContactsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutContactsInput
    connect?: VendorWhereUniqueInput
  }

  export type VendorUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<VendorCreateWithoutContactsInput, VendorUncheckedCreateWithoutContactsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutContactsInput
    upsert?: VendorUpsertWithoutContactsInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutContactsInput, VendorUpdateWithoutContactsInput>, VendorUncheckedUpdateWithoutContactsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumArtifactTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ArtifactType | EnumArtifactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumArtifactTypeFilter<$PrismaModel> | $Enums.ArtifactType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumArtifactTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ArtifactType | EnumArtifactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ArtifactType[] | ListEnumArtifactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumArtifactTypeWithAggregatesFilter<$PrismaModel> | $Enums.ArtifactType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumArtifactTypeFilter<$PrismaModel>
    _max?: NestedEnumArtifactTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumDepartmentsFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel>
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentsFilter<$PrismaModel> | $Enums.Departments
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel>
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentsWithAggregatesFilter<$PrismaModel> | $Enums.Departments
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentsFilter<$PrismaModel>
    _max?: NestedEnumDepartmentsFilter<$PrismaModel>
  }

  export type NestedEnumRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableFilter<$PrismaModel> | $Enums.Role | null
  }

  export type NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.Role | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableFilter<$PrismaModel> | $Enums.Frequency | null
  }

  export type NestedEnumEvidenceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EvidenceStatus | EnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel> | $Enums.EvidenceStatus | null
  }

  export type NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Frequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumFrequencyNullableFilter<$PrismaModel>
  }

  export type NestedEnumEvidenceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EvidenceStatus | EnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EvidenceStatus[] | ListEnumEvidenceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEvidenceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.EvidenceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumEvidenceStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumFrameworkIdFilter<$PrismaModel = never> = {
    equals?: $Enums.FrameworkId | EnumFrameworkIdFieldRefInput<$PrismaModel>
    in?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    not?: NestedEnumFrameworkIdFilter<$PrismaModel> | $Enums.FrameworkId
  }

  export type NestedEnumFrameworkIdWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FrameworkId | EnumFrameworkIdFieldRefInput<$PrismaModel>
    in?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.FrameworkId[] | ListEnumFrameworkIdFieldRefInput<$PrismaModel>
    not?: NestedEnumFrameworkIdWithAggregatesFilter<$PrismaModel> | $Enums.FrameworkId
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrameworkIdFilter<$PrismaModel>
    _max?: NestedEnumFrameworkIdFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPolicyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PolicyStatus | EnumPolicyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPolicyStatusFilter<$PrismaModel> | $Enums.PolicyStatus
  }

  export type NestedEnumDepartmentsNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel> | null
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentsNullableFilter<$PrismaModel> | $Enums.Departments | null
  }

  export type NestedEnumPolicyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PolicyStatus | EnumPolicyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PolicyStatus[] | ListEnumPolicyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPolicyStatusWithAggregatesFilter<$PrismaModel> | $Enums.PolicyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPolicyStatusFilter<$PrismaModel>
    _max?: NestedEnumPolicyStatusFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentsNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Departments | EnumDepartmentsFieldRefInput<$PrismaModel> | null
    in?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Departments[] | ListEnumDepartmentsFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentsNullableWithAggregatesFilter<$PrismaModel> | $Enums.Departments | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDepartmentsNullableFilter<$PrismaModel>
    _max?: NestedEnumDepartmentsNullableFilter<$PrismaModel>
  }

  export type NestedEnumRequirementIdFilter<$PrismaModel = never> = {
    equals?: $Enums.RequirementId | EnumRequirementIdFieldRefInput<$PrismaModel>
    in?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    not?: NestedEnumRequirementIdFilter<$PrismaModel> | $Enums.RequirementId
  }

  export type NestedEnumRequirementIdWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequirementId | EnumRequirementIdFieldRefInput<$PrismaModel>
    in?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequirementId[] | ListEnumRequirementIdFieldRefInput<$PrismaModel>
    not?: NestedEnumRequirementIdWithAggregatesFilter<$PrismaModel> | $Enums.RequirementId
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequirementIdFilter<$PrismaModel>
    _max?: NestedEnumRequirementIdFilter<$PrismaModel>
  }

  export type NestedEnumRiskCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskCategory | EnumRiskCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskCategoryFilter<$PrismaModel> | $Enums.RiskCategory
  }

  export type NestedEnumRiskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskStatus | EnumRiskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskStatusFilter<$PrismaModel> | $Enums.RiskStatus
  }

  export type NestedEnumLikelihoodFilter<$PrismaModel = never> = {
    equals?: $Enums.Likelihood | EnumLikelihoodFieldRefInput<$PrismaModel>
    in?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    not?: NestedEnumLikelihoodFilter<$PrismaModel> | $Enums.Likelihood
  }

  export type NestedEnumImpactFilter<$PrismaModel = never> = {
    equals?: $Enums.Impact | EnumImpactFieldRefInput<$PrismaModel>
    in?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumImpactFilter<$PrismaModel> | $Enums.Impact
  }

  export type NestedEnumRiskTreatmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskTreatmentType | EnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel> | $Enums.RiskTreatmentType
  }

  export type NestedEnumRiskCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskCategory | EnumRiskCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskCategory[] | ListEnumRiskCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskCategoryWithAggregatesFilter<$PrismaModel> | $Enums.RiskCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskCategoryFilter<$PrismaModel>
    _max?: NestedEnumRiskCategoryFilter<$PrismaModel>
  }

  export type NestedEnumRiskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskStatus | EnumRiskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskStatus[] | ListEnumRiskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskStatusWithAggregatesFilter<$PrismaModel> | $Enums.RiskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskStatusFilter<$PrismaModel>
    _max?: NestedEnumRiskStatusFilter<$PrismaModel>
  }

  export type NestedEnumLikelihoodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Likelihood | EnumLikelihoodFieldRefInput<$PrismaModel>
    in?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Likelihood[] | ListEnumLikelihoodFieldRefInput<$PrismaModel>
    not?: NestedEnumLikelihoodWithAggregatesFilter<$PrismaModel> | $Enums.Likelihood
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLikelihoodFilter<$PrismaModel>
    _max?: NestedEnumLikelihoodFilter<$PrismaModel>
  }

  export type NestedEnumImpactWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Impact | EnumImpactFieldRefInput<$PrismaModel>
    in?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    notIn?: $Enums.Impact[] | ListEnumImpactFieldRefInput<$PrismaModel>
    not?: NestedEnumImpactWithAggregatesFilter<$PrismaModel> | $Enums.Impact
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImpactFilter<$PrismaModel>
    _max?: NestedEnumImpactFilter<$PrismaModel>
  }

  export type NestedEnumRiskTreatmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskTreatmentType | EnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskTreatmentType[] | ListEnumRiskTreatmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskTreatmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.RiskTreatmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel>
    _max?: NestedEnumRiskTreatmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeFilter<$PrismaModel> | $Enums.TaskType
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskType | EnumTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskType[] | ListEnumTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskTypeFilter<$PrismaModel>
  }

  export type NestedEnumVendorCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorCategory | EnumVendorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorCategoryFilter<$PrismaModel> | $Enums.VendorCategory
  }

  export type NestedEnumVendorStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorStatus | EnumVendorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorStatusFilter<$PrismaModel> | $Enums.VendorStatus
  }

  export type NestedEnumVendorCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorCategory | EnumVendorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorCategory[] | ListEnumVendorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorCategoryWithAggregatesFilter<$PrismaModel> | $Enums.VendorCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorCategoryFilter<$PrismaModel>
    _max?: NestedEnumVendorCategoryFilter<$PrismaModel>
  }

  export type NestedEnumVendorStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorStatus | EnumVendorStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VendorStatus[] | ListEnumVendorStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVendorStatusWithAggregatesFilter<$PrismaModel> | $Enums.VendorStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorStatusFilter<$PrismaModel>
    _max?: NestedEnumVendorStatusFilter<$PrismaModel>
  }

  export type ControlCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutControlsInput
    organization: OrganizationCreateNestedOneWithoutControlsInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutControlInput
  }

  export type ControlUncheckedCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organizationId: string
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutControlInput
  }

  export type ControlCreateOrConnectWithoutArtifactsInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput>
  }

  export type OrganizationCreateWithoutArtifactsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutArtifactsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutArtifactsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutArtifactsInput, OrganizationUncheckedCreateWithoutArtifactsInput>
  }

  export type EvidenceCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assignee?: MemberCreateNestedOneWithoutEvidenceInput
    organization: OrganizationCreateNestedOneWithoutEvidenceInput
  }

  export type EvidenceUncheckedCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
    organizationId: string
  }

  export type EvidenceCreateOrConnectWithoutArtifactsInput = {
    where: EvidenceWhereUniqueInput
    create: XOR<EvidenceCreateWithoutArtifactsInput, EvidenceUncheckedCreateWithoutArtifactsInput>
  }

  export type PolicyCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutPolicyInput
    assignee?: MemberCreateNestedOneWithoutPolicyInput
  }

  export type PolicyUncheckedCreateWithoutArtifactsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organizationId: string
    assigneeId?: string | null
  }

  export type PolicyCreateOrConnectWithoutArtifactsInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutArtifactsInput, PolicyUncheckedCreateWithoutArtifactsInput>
  }

  export type ControlUpsertWithWhereUniqueWithoutArtifactsInput = {
    where: ControlWhereUniqueInput
    update: XOR<ControlUpdateWithoutArtifactsInput, ControlUncheckedUpdateWithoutArtifactsInput>
    create: XOR<ControlCreateWithoutArtifactsInput, ControlUncheckedCreateWithoutArtifactsInput>
  }

  export type ControlUpdateWithWhereUniqueWithoutArtifactsInput = {
    where: ControlWhereUniqueInput
    data: XOR<ControlUpdateWithoutArtifactsInput, ControlUncheckedUpdateWithoutArtifactsInput>
  }

  export type ControlUpdateManyWithWhereWithoutArtifactsInput = {
    where: ControlScalarWhereInput
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyWithoutArtifactsInput>
  }

  export type ControlScalarWhereInput = {
    AND?: ControlScalarWhereInput | ControlScalarWhereInput[]
    OR?: ControlScalarWhereInput[]
    NOT?: ControlScalarWhereInput | ControlScalarWhereInput[]
    id?: StringFilter<"Control"> | string
    name?: StringFilter<"Control"> | string
    description?: StringFilter<"Control"> | string
    lastReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Control"> | Date | string | null
    organizationId?: StringFilter<"Control"> | string
  }

  export type OrganizationUpsertWithoutArtifactsInput = {
    update: XOR<OrganizationUpdateWithoutArtifactsInput, OrganizationUncheckedUpdateWithoutArtifactsInput>
    create: XOR<OrganizationCreateWithoutArtifactsInput, OrganizationUncheckedCreateWithoutArtifactsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutArtifactsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutArtifactsInput, OrganizationUncheckedUpdateWithoutArtifactsInput>
  }

  export type OrganizationUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type EvidenceUpsertWithoutArtifactsInput = {
    update: XOR<EvidenceUpdateWithoutArtifactsInput, EvidenceUncheckedUpdateWithoutArtifactsInput>
    create: XOR<EvidenceCreateWithoutArtifactsInput, EvidenceUncheckedCreateWithoutArtifactsInput>
    where?: EvidenceWhereInput
  }

  export type EvidenceUpdateToOneWithWhereWithoutArtifactsInput = {
    where?: EvidenceWhereInput
    data: XOR<EvidenceUpdateWithoutArtifactsInput, EvidenceUncheckedUpdateWithoutArtifactsInput>
  }

  export type EvidenceUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: MemberUpdateOneWithoutEvidenceNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type PolicyUpsertWithoutArtifactsInput = {
    update: XOR<PolicyUpdateWithoutArtifactsInput, PolicyUncheckedUpdateWithoutArtifactsInput>
    create: XOR<PolicyCreateWithoutArtifactsInput, PolicyUncheckedCreateWithoutArtifactsInput>
    where?: PolicyWhereInput
  }

  export type PolicyUpdateToOneWithWhereWithoutArtifactsInput = {
    where?: PolicyWhereInput
    data: XOR<PolicyUpdateWithoutArtifactsInput, PolicyUncheckedUpdateWithoutArtifactsInput>
  }

  export type PolicyUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutPolicyNestedInput
    assignee?: MemberUpdateOneWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    timestamp?: Date | string
    data: JsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutAuditLogInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    timestamp?: Date | string
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationResultCreateWithoutAssignedUserInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    organizationId: string
    integration: IntegrationCreateNestedOneWithoutResultsInput
  }

  export type IntegrationResultUncheckedCreateWithoutAssignedUserInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    integrationId: string
    organizationId: string
  }

  export type IntegrationResultCreateOrConnectWithoutAssignedUserInput = {
    where: IntegrationResultWhereUniqueInput
    create: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput>
  }

  export type IntegrationResultCreateManyAssignedUserInputEnvelope = {
    data: IntegrationResultCreateManyAssignedUserInput | IntegrationResultCreateManyAssignedUserInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutUserInput = {
    id?: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
  }

  export type InvitationCreateOrConnectWithoutUserInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
  }

  export type InvitationCreateManyUserInputEnvelope = {
    data: InvitationCreateManyUserInput | InvitationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MemberCreateWithoutUserInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutUserInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberCreateManyUserInputEnvelope = {
    data: MemberCreateManyUserInput | MemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    organizationId?: StringFilter<"AuditLog"> | string
    data?: JsonFilter<"AuditLog">
  }

  export type IntegrationResultUpsertWithWhereUniqueWithoutAssignedUserInput = {
    where: IntegrationResultWhereUniqueInput
    update: XOR<IntegrationResultUpdateWithoutAssignedUserInput, IntegrationResultUncheckedUpdateWithoutAssignedUserInput>
    create: XOR<IntegrationResultCreateWithoutAssignedUserInput, IntegrationResultUncheckedCreateWithoutAssignedUserInput>
  }

  export type IntegrationResultUpdateWithWhereUniqueWithoutAssignedUserInput = {
    where: IntegrationResultWhereUniqueInput
    data: XOR<IntegrationResultUpdateWithoutAssignedUserInput, IntegrationResultUncheckedUpdateWithoutAssignedUserInput>
  }

  export type IntegrationResultUpdateManyWithWhereWithoutAssignedUserInput = {
    where: IntegrationResultScalarWhereInput
    data: XOR<IntegrationResultUpdateManyMutationInput, IntegrationResultUncheckedUpdateManyWithoutAssignedUserInput>
  }

  export type IntegrationResultScalarWhereInput = {
    AND?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
    OR?: IntegrationResultScalarWhereInput[]
    NOT?: IntegrationResultScalarWhereInput | IntegrationResultScalarWhereInput[]
    id?: StringFilter<"IntegrationResult"> | string
    title?: StringNullableFilter<"IntegrationResult"> | string | null
    description?: StringNullableFilter<"IntegrationResult"> | string | null
    remediation?: StringNullableFilter<"IntegrationResult"> | string | null
    status?: StringNullableFilter<"IntegrationResult"> | string | null
    severity?: StringNullableFilter<"IntegrationResult"> | string | null
    resultDetails?: JsonNullableFilter<"IntegrationResult">
    completedAt?: DateTimeNullableFilter<"IntegrationResult"> | Date | string | null
    integrationId?: StringFilter<"IntegrationResult"> | string
    organizationId?: StringFilter<"IntegrationResult"> | string
    assignedUserId?: StringNullableFilter<"IntegrationResult"> | string | null
  }

  export type InvitationUpsertWithWhereUniqueWithoutUserInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
    create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutUserInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
  }

  export type InvitationUpdateManyWithWhereWithoutUserInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutUserInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    OR?: InvitationScalarWhereInput[]
    NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    id?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: EnumRoleNullableFilter<"Invitation"> | $Enums.Role | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
  }

  export type MemberUpsertWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
  }

  export type MemberUpdateManyWithWhereWithoutUserInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUserInput>
  }

  export type MemberScalarWhereInput = {
    AND?: MemberScalarWhereInput | MemberScalarWhereInput[]
    OR?: MemberScalarWhereInput[]
    NOT?: MemberScalarWhereInput | MemberScalarWhereInput[]
    id?: StringFilter<"Member"> | string
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: EnumRoleFilter<"Member"> | $Enums.Role
    createdAt?: DateTimeFilter<"Member"> | Date | string
    department?: EnumDepartmentsFilter<"Member"> | $Enums.Departments
    isActive?: BoolFilter<"Member"> | boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
  }

  export type MemberCreateWithoutEmployeeTrainingVideoCompletionInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutEmployeeTrainingVideoCompletionInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutEmployeeTrainingVideoCompletionInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedCreateWithoutEmployeeTrainingVideoCompletionInput>
  }

  export type MemberUpsertWithoutEmployeeTrainingVideoCompletionInput = {
    update: XOR<MemberUpdateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedUpdateWithoutEmployeeTrainingVideoCompletionInput>
    create: XOR<MemberCreateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedCreateWithoutEmployeeTrainingVideoCompletionInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutEmployeeTrainingVideoCompletionInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutEmployeeTrainingVideoCompletionInput, MemberUncheckedUpdateWithoutEmployeeTrainingVideoCompletionInput>
  }

  export type MemberUpdateWithoutEmployeeTrainingVideoCompletionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutEmployeeTrainingVideoCompletionInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutMembersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutMembersInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
  }

  export type EmployeeTrainingVideoCompletionCreateWithoutMemberInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
  }

  export type EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
  }

  export type EmployeeTrainingVideoCompletionCreateOrConnectWithoutMemberInput = {
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
    create: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput>
  }

  export type EmployeeTrainingVideoCompletionCreateManyMemberInputEnvelope = {
    data: EmployeeTrainingVideoCompletionCreateManyMemberInput | EmployeeTrainingVideoCompletionCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type EvidenceCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutEvidenceInput
    artifacts?: ArtifactCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceUncheckedCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    organizationId: string
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceCreateOrConnectWithoutAssigneeInput = {
    where: EvidenceWhereUniqueInput
    create: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput>
  }

  export type EvidenceCreateManyAssigneeInputEnvelope = {
    data: EvidenceCreateManyAssigneeInput | EvidenceCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type PolicyCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutPolicyInput
    artifacts?: ArtifactCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organizationId: string
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyCreateOrConnectWithoutAssigneeInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput>
  }

  export type PolicyCreateManyAssigneeInputEnvelope = {
    data: PolicyCreateManyAssigneeInput | PolicyCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type RiskCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutRiskInput
  }

  export type RiskUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type RiskCreateOrConnectWithoutAssigneeInput = {
    where: RiskWhereUniqueInput
    create: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput>
  }

  export type RiskCreateManyAssigneeInputEnvelope = {
    data: RiskCreateManyAssigneeInput | RiskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    organization: OrganizationCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    organizationId: string
  }

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    contacts?: VendorContactCreateNestedManyWithoutVendorInput
    organization: OrganizationCreateNestedOneWithoutVendorsInput
  }

  export type VendorUncheckedCreateWithoutAssigneeInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    contacts?: VendorContactUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutAssigneeInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput>
  }

  export type VendorCreateManyAssigneeInputEnvelope = {
    data: VendorCreateManyAssigneeInput | VendorCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    organizationId: string
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutMembersInput = {
    update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMembersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutMembersInput = {
    update: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
    create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EmployeeTrainingVideoCompletionUpsertWithWhereUniqueWithoutMemberInput = {
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
    update: XOR<EmployeeTrainingVideoCompletionUpdateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedUpdateWithoutMemberInput>
    create: XOR<EmployeeTrainingVideoCompletionCreateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedCreateWithoutMemberInput>
  }

  export type EmployeeTrainingVideoCompletionUpdateWithWhereUniqueWithoutMemberInput = {
    where: EmployeeTrainingVideoCompletionWhereUniqueInput
    data: XOR<EmployeeTrainingVideoCompletionUpdateWithoutMemberInput, EmployeeTrainingVideoCompletionUncheckedUpdateWithoutMemberInput>
  }

  export type EmployeeTrainingVideoCompletionUpdateManyWithWhereWithoutMemberInput = {
    where: EmployeeTrainingVideoCompletionScalarWhereInput
    data: XOR<EmployeeTrainingVideoCompletionUpdateManyMutationInput, EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberInput>
  }

  export type EmployeeTrainingVideoCompletionScalarWhereInput = {
    AND?: EmployeeTrainingVideoCompletionScalarWhereInput | EmployeeTrainingVideoCompletionScalarWhereInput[]
    OR?: EmployeeTrainingVideoCompletionScalarWhereInput[]
    NOT?: EmployeeTrainingVideoCompletionScalarWhereInput | EmployeeTrainingVideoCompletionScalarWhereInput[]
    id?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    completedAt?: DateTimeNullableFilter<"EmployeeTrainingVideoCompletion"> | Date | string | null
    videoId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
    memberId?: StringFilter<"EmployeeTrainingVideoCompletion"> | string
  }

  export type EvidenceUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: EvidenceWhereUniqueInput
    update: XOR<EvidenceUpdateWithoutAssigneeInput, EvidenceUncheckedUpdateWithoutAssigneeInput>
    create: XOR<EvidenceCreateWithoutAssigneeInput, EvidenceUncheckedCreateWithoutAssigneeInput>
  }

  export type EvidenceUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: EvidenceWhereUniqueInput
    data: XOR<EvidenceUpdateWithoutAssigneeInput, EvidenceUncheckedUpdateWithoutAssigneeInput>
  }

  export type EvidenceUpdateManyWithWhereWithoutAssigneeInput = {
    where: EvidenceScalarWhereInput
    data: XOR<EvidenceUpdateManyMutationInput, EvidenceUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type EvidenceScalarWhereInput = {
    AND?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
    OR?: EvidenceScalarWhereInput[]
    NOT?: EvidenceScalarWhereInput | EvidenceScalarWhereInput[]
    id?: StringFilter<"Evidence"> | string
    name?: StringFilter<"Evidence"> | string
    description?: StringFilter<"Evidence"> | string
    isNotRelevant?: BoolFilter<"Evidence"> | boolean
    additionalUrls?: StringNullableListFilter<"Evidence">
    fileUrls?: StringNullableListFilter<"Evidence">
    frequency?: EnumFrequencyNullableFilter<"Evidence"> | $Enums.Frequency | null
    department?: EnumDepartmentsFilter<"Evidence"> | $Enums.Departments
    status?: EnumEvidenceStatusNullableFilter<"Evidence"> | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFilter<"Evidence"> | Date | string
    updatedAt?: DateTimeFilter<"Evidence"> | Date | string
    lastPublishedAt?: DateTimeNullableFilter<"Evidence"> | Date | string | null
    assigneeId?: StringNullableFilter<"Evidence"> | string | null
    organizationId?: StringFilter<"Evidence"> | string
  }

  export type PolicyUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: PolicyWhereUniqueInput
    update: XOR<PolicyUpdateWithoutAssigneeInput, PolicyUncheckedUpdateWithoutAssigneeInput>
    create: XOR<PolicyCreateWithoutAssigneeInput, PolicyUncheckedCreateWithoutAssigneeInput>
  }

  export type PolicyUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: PolicyWhereUniqueInput
    data: XOR<PolicyUpdateWithoutAssigneeInput, PolicyUncheckedUpdateWithoutAssigneeInput>
  }

  export type PolicyUpdateManyWithWhereWithoutAssigneeInput = {
    where: PolicyScalarWhereInput
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type PolicyScalarWhereInput = {
    AND?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
    OR?: PolicyScalarWhereInput[]
    NOT?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
    id?: StringFilter<"Policy"> | string
    name?: StringFilter<"Policy"> | string
    description?: StringNullableFilter<"Policy"> | string | null
    status?: EnumPolicyStatusFilter<"Policy"> | $Enums.PolicyStatus
    content?: JsonNullableListFilter<"Policy">
    frequency?: EnumFrequencyNullableFilter<"Policy"> | $Enums.Frequency | null
    department?: EnumDepartmentsNullableFilter<"Policy"> | $Enums.Departments | null
    isRequiredToSign?: BoolFilter<"Policy"> | boolean
    signedBy?: StringNullableListFilter<"Policy">
    reviewDate?: DateTimeNullableFilter<"Policy"> | Date | string | null
    isArchived?: BoolFilter<"Policy"> | boolean
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
    lastArchivedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    lastPublishedAt?: DateTimeNullableFilter<"Policy"> | Date | string | null
    organizationId?: StringFilter<"Policy"> | string
    assigneeId?: StringNullableFilter<"Policy"> | string | null
  }

  export type RiskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: RiskWhereUniqueInput
    update: XOR<RiskUpdateWithoutAssigneeInput, RiskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<RiskCreateWithoutAssigneeInput, RiskUncheckedCreateWithoutAssigneeInput>
  }

  export type RiskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: RiskWhereUniqueInput
    data: XOR<RiskUpdateWithoutAssigneeInput, RiskUncheckedUpdateWithoutAssigneeInput>
  }

  export type RiskUpdateManyWithWhereWithoutAssigneeInput = {
    where: RiskScalarWhereInput
    data: XOR<RiskUpdateManyMutationInput, RiskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type RiskScalarWhereInput = {
    AND?: RiskScalarWhereInput | RiskScalarWhereInput[]
    OR?: RiskScalarWhereInput[]
    NOT?: RiskScalarWhereInput | RiskScalarWhereInput[]
    id?: StringFilter<"Risk"> | string
    title?: StringFilter<"Risk"> | string
    description?: StringFilter<"Risk"> | string
    category?: EnumRiskCategoryFilter<"Risk"> | $Enums.RiskCategory
    department?: EnumDepartmentsNullableFilter<"Risk"> | $Enums.Departments | null
    status?: EnumRiskStatusFilter<"Risk"> | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    impact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFilter<"Risk"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Risk"> | $Enums.Impact
    treatmentStrategyDescription?: StringNullableFilter<"Risk"> | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFilter<"Risk"> | $Enums.RiskTreatmentType
    createdAt?: DateTimeFilter<"Risk"> | Date | string
    updatedAt?: DateTimeFilter<"Risk"> | Date | string
    organizationId?: StringFilter<"Risk"> | string
    assigneeId?: StringNullableFilter<"Risk"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    relatedId?: StringFilter<"Task"> | string
    relatedType?: EnumTaskTypeFilter<"Task"> | $Enums.TaskType
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    dueDate?: DateTimeFilter<"Task"> | Date | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    organizationId?: StringFilter<"Task"> | string
  }

  export type VendorUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutAssigneeInput, VendorUncheckedUpdateWithoutAssigneeInput>
    create: XOR<VendorCreateWithoutAssigneeInput, VendorUncheckedCreateWithoutAssigneeInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutAssigneeInput, VendorUncheckedUpdateWithoutAssigneeInput>
  }

  export type VendorUpdateManyWithWhereWithoutAssigneeInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type VendorScalarWhereInput = {
    AND?: VendorScalarWhereInput | VendorScalarWhereInput[]
    OR?: VendorScalarWhereInput[]
    NOT?: VendorScalarWhereInput | VendorScalarWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    description?: StringFilter<"Vendor"> | string
    category?: EnumVendorCategoryFilter<"Vendor"> | $Enums.VendorCategory
    status?: EnumVendorStatusFilter<"Vendor"> | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    inherentImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    residualProbability?: EnumLikelihoodFilter<"Vendor"> | $Enums.Likelihood
    residualImpact?: EnumImpactFilter<"Vendor"> | $Enums.Impact
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    organizationId?: StringFilter<"Vendor"> | string
    assigneeId?: StringNullableFilter<"Vendor"> | string | null
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    organizationId?: StringFilter<"Comment"> | string
  }

  export type OrganizationCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvitationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
  }

  export type UserCreateWithoutInvitationsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
  }

  export type OrganizationUpsertWithoutInvitationsInput = {
    update: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type OrganizationUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutInvitationsInput = {
    update: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemberCreateWithoutCommentsInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
  }

  export type MemberUncheckedCreateWithoutCommentsInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
  }

  export type MemberCreateOrConnectWithoutCommentsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutCommentsInput, MemberUncheckedCreateWithoutCommentsInput>
  }

  export type OrganizationCreateWithoutCommentsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCommentsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCommentsInput, OrganizationUncheckedCreateWithoutCommentsInput>
  }

  export type MemberUpsertWithoutCommentsInput = {
    update: XOR<MemberUpdateWithoutCommentsInput, MemberUncheckedUpdateWithoutCommentsInput>
    create: XOR<MemberCreateWithoutCommentsInput, MemberUncheckedCreateWithoutCommentsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutCommentsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutCommentsInput, MemberUncheckedUpdateWithoutCommentsInput>
  }

  export type MemberUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
  }

  export type MemberUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
  }

  export type OrganizationUpsertWithoutCommentsInput = {
    update: XOR<OrganizationUpdateWithoutCommentsInput, OrganizationUncheckedUpdateWithoutCommentsInput>
    create: XOR<OrganizationCreateWithoutCommentsInput, OrganizationUncheckedCreateWithoutCommentsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCommentsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCommentsInput, OrganizationUncheckedUpdateWithoutCommentsInput>
  }

  export type OrganizationUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type FrameworkInstanceCreateWithoutControlsInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
    organization: OrganizationCreateNestedOneWithoutFrameworkInstancesInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceUncheckedCreateWithoutControlsInput = {
    id?: string
    organizationId: string
    frameworkId: $Enums.FrameworkId
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceCreateOrConnectWithoutControlsInput = {
    where: FrameworkInstanceWhereUniqueInput
    create: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput>
  }

  export type OrganizationCreateWithoutControlsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutControlsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutControlsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutControlsInput, OrganizationUncheckedCreateWithoutControlsInput>
  }

  export type ArtifactCreateWithoutControlsInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutArtifactsInput
    evidence?: EvidenceCreateNestedOneWithoutArtifactsInput
    policy?: PolicyCreateNestedOneWithoutArtifactsInput
  }

  export type ArtifactUncheckedCreateWithoutControlsInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    evidenceId?: string | null
    policyId?: string | null
  }

  export type ArtifactCreateOrConnectWithoutControlsInput = {
    where: ArtifactWhereUniqueInput
    create: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput>
  }

  export type RequirementMapCreateWithoutControlInput = {
    id?: string
    requirementId: $Enums.RequirementId
    frameworkInstance: FrameworkInstanceCreateNestedOneWithoutRequirementsMappedInput
  }

  export type RequirementMapUncheckedCreateWithoutControlInput = {
    id?: string
    requirementId: $Enums.RequirementId
    frameworkInstanceId: string
  }

  export type RequirementMapCreateOrConnectWithoutControlInput = {
    where: RequirementMapWhereUniqueInput
    create: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput>
  }

  export type RequirementMapCreateManyControlInputEnvelope = {
    data: RequirementMapCreateManyControlInput | RequirementMapCreateManyControlInput[]
    skipDuplicates?: boolean
  }

  export type FrameworkInstanceUpsertWithWhereUniqueWithoutControlsInput = {
    where: FrameworkInstanceWhereUniqueInput
    update: XOR<FrameworkInstanceUpdateWithoutControlsInput, FrameworkInstanceUncheckedUpdateWithoutControlsInput>
    create: XOR<FrameworkInstanceCreateWithoutControlsInput, FrameworkInstanceUncheckedCreateWithoutControlsInput>
  }

  export type FrameworkInstanceUpdateWithWhereUniqueWithoutControlsInput = {
    where: FrameworkInstanceWhereUniqueInput
    data: XOR<FrameworkInstanceUpdateWithoutControlsInput, FrameworkInstanceUncheckedUpdateWithoutControlsInput>
  }

  export type FrameworkInstanceUpdateManyWithWhereWithoutControlsInput = {
    where: FrameworkInstanceScalarWhereInput
    data: XOR<FrameworkInstanceUpdateManyMutationInput, FrameworkInstanceUncheckedUpdateManyWithoutControlsInput>
  }

  export type FrameworkInstanceScalarWhereInput = {
    AND?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
    OR?: FrameworkInstanceScalarWhereInput[]
    NOT?: FrameworkInstanceScalarWhereInput | FrameworkInstanceScalarWhereInput[]
    id?: StringFilter<"FrameworkInstance"> | string
    organizationId?: StringFilter<"FrameworkInstance"> | string
    frameworkId?: EnumFrameworkIdFilter<"FrameworkInstance"> | $Enums.FrameworkId
  }

  export type OrganizationUpsertWithoutControlsInput = {
    update: XOR<OrganizationUpdateWithoutControlsInput, OrganizationUncheckedUpdateWithoutControlsInput>
    create: XOR<OrganizationCreateWithoutControlsInput, OrganizationUncheckedCreateWithoutControlsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutControlsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutControlsInput, OrganizationUncheckedUpdateWithoutControlsInput>
  }

  export type OrganizationUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ArtifactUpsertWithWhereUniqueWithoutControlsInput = {
    where: ArtifactWhereUniqueInput
    update: XOR<ArtifactUpdateWithoutControlsInput, ArtifactUncheckedUpdateWithoutControlsInput>
    create: XOR<ArtifactCreateWithoutControlsInput, ArtifactUncheckedCreateWithoutControlsInput>
  }

  export type ArtifactUpdateWithWhereUniqueWithoutControlsInput = {
    where: ArtifactWhereUniqueInput
    data: XOR<ArtifactUpdateWithoutControlsInput, ArtifactUncheckedUpdateWithoutControlsInput>
  }

  export type ArtifactUpdateManyWithWhereWithoutControlsInput = {
    where: ArtifactScalarWhereInput
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyWithoutControlsInput>
  }

  export type ArtifactScalarWhereInput = {
    AND?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
    OR?: ArtifactScalarWhereInput[]
    NOT?: ArtifactScalarWhereInput | ArtifactScalarWhereInput[]
    id?: StringFilter<"Artifact"> | string
    type?: EnumArtifactTypeFilter<"Artifact"> | $Enums.ArtifactType
    createdAt?: DateTimeFilter<"Artifact"> | Date | string
    updatedAt?: DateTimeFilter<"Artifact"> | Date | string
    organizationId?: StringFilter<"Artifact"> | string
    evidenceId?: StringNullableFilter<"Artifact"> | string | null
    policyId?: StringNullableFilter<"Artifact"> | string | null
  }

  export type RequirementMapUpsertWithWhereUniqueWithoutControlInput = {
    where: RequirementMapWhereUniqueInput
    update: XOR<RequirementMapUpdateWithoutControlInput, RequirementMapUncheckedUpdateWithoutControlInput>
    create: XOR<RequirementMapCreateWithoutControlInput, RequirementMapUncheckedCreateWithoutControlInput>
  }

  export type RequirementMapUpdateWithWhereUniqueWithoutControlInput = {
    where: RequirementMapWhereUniqueInput
    data: XOR<RequirementMapUpdateWithoutControlInput, RequirementMapUncheckedUpdateWithoutControlInput>
  }

  export type RequirementMapUpdateManyWithWhereWithoutControlInput = {
    where: RequirementMapScalarWhereInput
    data: XOR<RequirementMapUpdateManyMutationInput, RequirementMapUncheckedUpdateManyWithoutControlInput>
  }

  export type RequirementMapScalarWhereInput = {
    AND?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
    OR?: RequirementMapScalarWhereInput[]
    NOT?: RequirementMapScalarWhereInput | RequirementMapScalarWhereInput[]
    id?: StringFilter<"RequirementMap"> | string
    requirementId?: EnumRequirementIdFilter<"RequirementMap"> | $Enums.RequirementId
    controlId?: StringFilter<"RequirementMap"> | string
    frameworkInstanceId?: StringFilter<"RequirementMap"> | string
  }

  export type MemberCreateWithoutEvidenceInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutEvidenceInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutEvidenceInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutEvidenceInput, MemberUncheckedCreateWithoutEvidenceInput>
  }

  export type OrganizationCreateWithoutEvidenceInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEvidenceInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEvidenceInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEvidenceInput, OrganizationUncheckedCreateWithoutEvidenceInput>
  }

  export type ArtifactCreateWithoutEvidenceInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    controls?: ControlCreateNestedManyWithoutArtifactsInput
    organization: OrganizationCreateNestedOneWithoutArtifactsInput
    policy?: PolicyCreateNestedOneWithoutArtifactsInput
  }

  export type ArtifactUncheckedCreateWithoutEvidenceInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    policyId?: string | null
    controls?: ControlUncheckedCreateNestedManyWithoutArtifactsInput
  }

  export type ArtifactCreateOrConnectWithoutEvidenceInput = {
    where: ArtifactWhereUniqueInput
    create: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput>
  }

  export type ArtifactCreateManyEvidenceInputEnvelope = {
    data: ArtifactCreateManyEvidenceInput | ArtifactCreateManyEvidenceInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithoutEvidenceInput = {
    update: XOR<MemberUpdateWithoutEvidenceInput, MemberUncheckedUpdateWithoutEvidenceInput>
    create: XOR<MemberCreateWithoutEvidenceInput, MemberUncheckedCreateWithoutEvidenceInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutEvidenceInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutEvidenceInput, MemberUncheckedUpdateWithoutEvidenceInput>
  }

  export type MemberUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type OrganizationUpsertWithoutEvidenceInput = {
    update: XOR<OrganizationUpdateWithoutEvidenceInput, OrganizationUncheckedUpdateWithoutEvidenceInput>
    create: XOR<OrganizationCreateWithoutEvidenceInput, OrganizationUncheckedCreateWithoutEvidenceInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutEvidenceInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutEvidenceInput, OrganizationUncheckedUpdateWithoutEvidenceInput>
  }

  export type OrganizationUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ArtifactUpsertWithWhereUniqueWithoutEvidenceInput = {
    where: ArtifactWhereUniqueInput
    update: XOR<ArtifactUpdateWithoutEvidenceInput, ArtifactUncheckedUpdateWithoutEvidenceInput>
    create: XOR<ArtifactCreateWithoutEvidenceInput, ArtifactUncheckedCreateWithoutEvidenceInput>
  }

  export type ArtifactUpdateWithWhereUniqueWithoutEvidenceInput = {
    where: ArtifactWhereUniqueInput
    data: XOR<ArtifactUpdateWithoutEvidenceInput, ArtifactUncheckedUpdateWithoutEvidenceInput>
  }

  export type ArtifactUpdateManyWithWhereWithoutEvidenceInput = {
    where: ArtifactScalarWhereInput
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyWithoutEvidenceInput>
  }

  export type ControlCreateWithoutFrameworkInstancesInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutControlsInput
    artifacts?: ArtifactCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutControlInput
  }

  export type ControlUncheckedCreateWithoutFrameworkInstancesInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organizationId: string
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutControlInput
  }

  export type ControlCreateOrConnectWithoutFrameworkInstancesInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput>
  }

  export type OrganizationCreateWithoutFrameworkInstancesInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutFrameworkInstancesInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutFrameworkInstancesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutFrameworkInstancesInput, OrganizationUncheckedCreateWithoutFrameworkInstancesInput>
  }

  export type RequirementMapCreateWithoutFrameworkInstanceInput = {
    id?: string
    requirementId: $Enums.RequirementId
    control: ControlCreateNestedOneWithoutRequirementsMappedInput
  }

  export type RequirementMapUncheckedCreateWithoutFrameworkInstanceInput = {
    id?: string
    requirementId: $Enums.RequirementId
    controlId: string
  }

  export type RequirementMapCreateOrConnectWithoutFrameworkInstanceInput = {
    where: RequirementMapWhereUniqueInput
    create: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput>
  }

  export type RequirementMapCreateManyFrameworkInstanceInputEnvelope = {
    data: RequirementMapCreateManyFrameworkInstanceInput | RequirementMapCreateManyFrameworkInstanceInput[]
    skipDuplicates?: boolean
  }

  export type ControlUpsertWithWhereUniqueWithoutFrameworkInstancesInput = {
    where: ControlWhereUniqueInput
    update: XOR<ControlUpdateWithoutFrameworkInstancesInput, ControlUncheckedUpdateWithoutFrameworkInstancesInput>
    create: XOR<ControlCreateWithoutFrameworkInstancesInput, ControlUncheckedCreateWithoutFrameworkInstancesInput>
  }

  export type ControlUpdateWithWhereUniqueWithoutFrameworkInstancesInput = {
    where: ControlWhereUniqueInput
    data: XOR<ControlUpdateWithoutFrameworkInstancesInput, ControlUncheckedUpdateWithoutFrameworkInstancesInput>
  }

  export type ControlUpdateManyWithWhereWithoutFrameworkInstancesInput = {
    where: ControlScalarWhereInput
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyWithoutFrameworkInstancesInput>
  }

  export type OrganizationUpsertWithoutFrameworkInstancesInput = {
    update: XOR<OrganizationUpdateWithoutFrameworkInstancesInput, OrganizationUncheckedUpdateWithoutFrameworkInstancesInput>
    create: XOR<OrganizationCreateWithoutFrameworkInstancesInput, OrganizationUncheckedCreateWithoutFrameworkInstancesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutFrameworkInstancesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutFrameworkInstancesInput, OrganizationUncheckedUpdateWithoutFrameworkInstancesInput>
  }

  export type OrganizationUpdateWithoutFrameworkInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutFrameworkInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type RequirementMapUpsertWithWhereUniqueWithoutFrameworkInstanceInput = {
    where: RequirementMapWhereUniqueInput
    update: XOR<RequirementMapUpdateWithoutFrameworkInstanceInput, RequirementMapUncheckedUpdateWithoutFrameworkInstanceInput>
    create: XOR<RequirementMapCreateWithoutFrameworkInstanceInput, RequirementMapUncheckedCreateWithoutFrameworkInstanceInput>
  }

  export type RequirementMapUpdateWithWhereUniqueWithoutFrameworkInstanceInput = {
    where: RequirementMapWhereUniqueInput
    data: XOR<RequirementMapUpdateWithoutFrameworkInstanceInput, RequirementMapUncheckedUpdateWithoutFrameworkInstanceInput>
  }

  export type RequirementMapUpdateManyWithWhereWithoutFrameworkInstanceInput = {
    where: RequirementMapScalarWhereInput
    data: XOR<RequirementMapUpdateManyMutationInput, RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceInput>
  }

  export type OrganizationCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutIntegrationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
  }

  export type IntegrationResultCreateWithoutIntegrationInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    organizationId: string
    assignedUser?: UserCreateNestedOneWithoutIntegrationResultsInput
  }

  export type IntegrationResultUncheckedCreateWithoutIntegrationInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    organizationId: string
    assignedUserId?: string | null
  }

  export type IntegrationResultCreateOrConnectWithoutIntegrationInput = {
    where: IntegrationResultWhereUniqueInput
    create: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput>
  }

  export type IntegrationResultCreateManyIntegrationInputEnvelope = {
    data: IntegrationResultCreateManyIntegrationInput | IntegrationResultCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutIntegrationsInput = {
    update: XOR<OrganizationUpdateWithoutIntegrationsInput, OrganizationUncheckedUpdateWithoutIntegrationsInput>
    create: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutIntegrationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutIntegrationsInput, OrganizationUncheckedUpdateWithoutIntegrationsInput>
  }

  export type OrganizationUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type IntegrationResultUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: IntegrationResultWhereUniqueInput
    update: XOR<IntegrationResultUpdateWithoutIntegrationInput, IntegrationResultUncheckedUpdateWithoutIntegrationInput>
    create: XOR<IntegrationResultCreateWithoutIntegrationInput, IntegrationResultUncheckedCreateWithoutIntegrationInput>
  }

  export type IntegrationResultUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: IntegrationResultWhereUniqueInput
    data: XOR<IntegrationResultUpdateWithoutIntegrationInput, IntegrationResultUncheckedUpdateWithoutIntegrationInput>
  }

  export type IntegrationResultUpdateManyWithWhereWithoutIntegrationInput = {
    where: IntegrationResultScalarWhereInput
    data: XOR<IntegrationResultUpdateManyMutationInput, IntegrationResultUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type UserCreateWithoutIntegrationResultsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLog?: AuditLogCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutIntegrationResultsInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutIntegrationResultsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIntegrationResultsInput, UserUncheckedCreateWithoutIntegrationResultsInput>
  }

  export type IntegrationCreateWithoutResultsInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    lastRunAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
  }

  export type IntegrationUncheckedCreateWithoutResultsInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    organizationId: string
    lastRunAt?: Date | string | null
  }

  export type IntegrationCreateOrConnectWithoutResultsInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutResultsInput, IntegrationUncheckedCreateWithoutResultsInput>
  }

  export type UserUpsertWithoutIntegrationResultsInput = {
    update: XOR<UserUpdateWithoutIntegrationResultsInput, UserUncheckedUpdateWithoutIntegrationResultsInput>
    create: XOR<UserCreateWithoutIntegrationResultsInput, UserUncheckedCreateWithoutIntegrationResultsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIntegrationResultsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIntegrationResultsInput, UserUncheckedUpdateWithoutIntegrationResultsInput>
  }

  export type UserUpdateWithoutIntegrationResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutIntegrationResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IntegrationUpsertWithoutResultsInput = {
    update: XOR<IntegrationUpdateWithoutResultsInput, IntegrationUncheckedUpdateWithoutResultsInput>
    create: XOR<IntegrationCreateWithoutResultsInput, IntegrationUncheckedCreateWithoutResultsInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutResultsInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutResultsInput, IntegrationUncheckedUpdateWithoutResultsInput>
  }

  export type IntegrationUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    organizationId?: StringFieldUpdateOperationsInput | string
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyCreateWithoutOrganizationInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
  }

  export type ApiKeyUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
  }

  export type ApiKeyCreateOrConnectWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput>
  }

  export type ApiKeyCreateManyOrganizationInputEnvelope = {
    data: ApiKeyCreateManyOrganizationInput | ApiKeyCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ArtifactCreateWithoutOrganizationInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    controls?: ControlCreateNestedManyWithoutArtifactsInput
    evidence?: EvidenceCreateNestedOneWithoutArtifactsInput
    policy?: PolicyCreateNestedOneWithoutArtifactsInput
  }

  export type ArtifactUncheckedCreateWithoutOrganizationInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    evidenceId?: string | null
    policyId?: string | null
    controls?: ControlUncheckedCreateNestedManyWithoutArtifactsInput
  }

  export type ArtifactCreateOrConnectWithoutOrganizationInput = {
    where: ArtifactWhereUniqueInput
    create: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput>
  }

  export type ArtifactCreateManyOrganizationInputEnvelope = {
    data: ArtifactCreateManyOrganizationInput | ArtifactCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutOrganizationInput = {
    id?: string
    timestamp?: Date | string
    data: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutAuditLogInput
  }

  export type AuditLogUncheckedCreateWithoutOrganizationInput = {
    id?: string
    timestamp?: Date | string
    userId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateOrConnectWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput>
  }

  export type AuditLogCreateManyOrganizationInputEnvelope = {
    data: AuditLogCreateManyOrganizationInput | AuditLogCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ControlCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutControlsInput
    artifacts?: ArtifactCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutControlInput
  }

  export type ControlUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutControlsInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutControlsInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutControlInput
  }

  export type ControlCreateOrConnectWithoutOrganizationInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput>
  }

  export type ControlCreateManyOrganizationInputEnvelope = {
    data: ControlCreateManyOrganizationInput | ControlCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type EvidenceCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assignee?: MemberCreateNestedOneWithoutEvidenceInput
    artifacts?: ArtifactCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutEvidenceInput
  }

  export type EvidenceCreateOrConnectWithoutOrganizationInput = {
    where: EvidenceWhereUniqueInput
    create: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput>
  }

  export type EvidenceCreateManyOrganizationInputEnvelope = {
    data: EvidenceCreateManyOrganizationInput | EvidenceCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type FrameworkInstanceCreateWithoutOrganizationInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlCreateNestedManyWithoutFrameworkInstancesInput
    requirementsMapped?: RequirementMapCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceUncheckedCreateWithoutOrganizationInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlUncheckedCreateNestedManyWithoutFrameworkInstancesInput
    requirementsMapped?: RequirementMapUncheckedCreateNestedManyWithoutFrameworkInstanceInput
  }

  export type FrameworkInstanceCreateOrConnectWithoutOrganizationInput = {
    where: FrameworkInstanceWhereUniqueInput
    create: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput>
  }

  export type FrameworkInstanceCreateManyOrganizationInputEnvelope = {
    data: FrameworkInstanceCreateManyOrganizationInput | FrameworkInstanceCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationCreateWithoutOrganizationInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    lastRunAt?: Date | string | null
    results?: IntegrationResultCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    lastRunAt?: Date | string | null
    results?: IntegrationResultUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationCreateManyOrganizationInputEnvelope = {
    data: IntegrationCreateManyOrganizationInput | IntegrationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationCreateOrConnectWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationCreateManyOrganizationInputEnvelope = {
    data: InvitationCreateManyOrganizationInput | InvitationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type MemberCreateWithoutOrganizationInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
  }

  export type MemberCreateManyOrganizationInputEnvelope = {
    data: MemberCreateManyOrganizationInput | MemberCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type PolicyCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    assignee?: MemberCreateNestedOneWithoutPolicyInput
    artifacts?: ArtifactCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyCreateOrConnectWithoutOrganizationInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput>
  }

  export type PolicyCreateManyOrganizationInputEnvelope = {
    data: PolicyCreateManyOrganizationInput | PolicyCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type RiskCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    assignee?: MemberCreateNestedOneWithoutRiskInput
  }

  export type RiskUncheckedCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
  }

  export type RiskCreateOrConnectWithoutOrganizationInput = {
    where: RiskWhereUniqueInput
    create: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput>
  }

  export type RiskCreateManyOrganizationInputEnvelope = {
    data: RiskCreateManyOrganizationInput | RiskCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    contacts?: VendorContactCreateNestedManyWithoutVendorInput
    assignee?: MemberCreateNestedOneWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
    contacts?: VendorContactUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutOrganizationInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput>
  }

  export type VendorCreateManyOrganizationInputEnvelope = {
    data: VendorCreateManyOrganizationInput | VendorCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assignee?: MemberCreateNestedOneWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutOrganizationInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assigneeId?: string | null
  }

  export type TaskCreateOrConnectWithoutOrganizationInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput>
  }

  export type TaskCreateManyOrganizationInputEnvelope = {
    data: TaskCreateManyOrganizationInput | TaskCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutOrganizationInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    author: MemberCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutOrganizationInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    authorId: string
  }

  export type CommentCreateOrConnectWithoutOrganizationInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput>
  }

  export type CommentCreateManyOrganizationInputEnvelope = {
    data: CommentCreateManyOrganizationInput | CommentCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutOrganizationInput, ApiKeyUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutOrganizationInput, ApiKeyUncheckedUpdateWithoutOrganizationInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutOrganizationInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    OR?: ApiKeyScalarWhereInput[]
    NOT?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    key?: StringFilter<"ApiKey"> | string
    salt?: StringNullableFilter<"ApiKey"> | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    isActive?: BoolFilter<"ApiKey"> | boolean
    organizationId?: StringFilter<"ApiKey"> | string
  }

  export type ArtifactUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ArtifactWhereUniqueInput
    update: XOR<ArtifactUpdateWithoutOrganizationInput, ArtifactUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ArtifactCreateWithoutOrganizationInput, ArtifactUncheckedCreateWithoutOrganizationInput>
  }

  export type ArtifactUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ArtifactWhereUniqueInput
    data: XOR<ArtifactUpdateWithoutOrganizationInput, ArtifactUncheckedUpdateWithoutOrganizationInput>
  }

  export type ArtifactUpdateManyWithWhereWithoutOrganizationInput = {
    where: ArtifactScalarWhereInput
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutOrganizationInput, AuditLogUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutOrganizationInput, AuditLogUncheckedUpdateWithoutOrganizationInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutOrganizationInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ControlUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ControlWhereUniqueInput
    update: XOR<ControlUpdateWithoutOrganizationInput, ControlUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ControlCreateWithoutOrganizationInput, ControlUncheckedCreateWithoutOrganizationInput>
  }

  export type ControlUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ControlWhereUniqueInput
    data: XOR<ControlUpdateWithoutOrganizationInput, ControlUncheckedUpdateWithoutOrganizationInput>
  }

  export type ControlUpdateManyWithWhereWithoutOrganizationInput = {
    where: ControlScalarWhereInput
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type EvidenceUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EvidenceWhereUniqueInput
    update: XOR<EvidenceUpdateWithoutOrganizationInput, EvidenceUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EvidenceCreateWithoutOrganizationInput, EvidenceUncheckedCreateWithoutOrganizationInput>
  }

  export type EvidenceUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EvidenceWhereUniqueInput
    data: XOR<EvidenceUpdateWithoutOrganizationInput, EvidenceUncheckedUpdateWithoutOrganizationInput>
  }

  export type EvidenceUpdateManyWithWhereWithoutOrganizationInput = {
    where: EvidenceScalarWhereInput
    data: XOR<EvidenceUpdateManyMutationInput, EvidenceUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type FrameworkInstanceUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: FrameworkInstanceWhereUniqueInput
    update: XOR<FrameworkInstanceUpdateWithoutOrganizationInput, FrameworkInstanceUncheckedUpdateWithoutOrganizationInput>
    create: XOR<FrameworkInstanceCreateWithoutOrganizationInput, FrameworkInstanceUncheckedCreateWithoutOrganizationInput>
  }

  export type FrameworkInstanceUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: FrameworkInstanceWhereUniqueInput
    data: XOR<FrameworkInstanceUpdateWithoutOrganizationInput, FrameworkInstanceUncheckedUpdateWithoutOrganizationInput>
  }

  export type FrameworkInstanceUpdateManyWithWhereWithoutOrganizationInput = {
    where: FrameworkInstanceScalarWhereInput
    data: XOR<FrameworkInstanceUpdateManyMutationInput, FrameworkInstanceUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type IntegrationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    update: XOR<IntegrationUpdateWithoutOrganizationInput, IntegrationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    data: XOR<IntegrationUpdateWithoutOrganizationInput, IntegrationUncheckedUpdateWithoutOrganizationInput>
  }

  export type IntegrationUpdateManyWithWhereWithoutOrganizationInput = {
    where: IntegrationScalarWhereInput
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type IntegrationScalarWhereInput = {
    AND?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    OR?: IntegrationScalarWhereInput[]
    NOT?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    id?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    integrationId?: StringFilter<"Integration"> | string
    settings?: JsonFilter<"Integration">
    userSettings?: JsonFilter<"Integration">
    organizationId?: StringFilter<"Integration"> | string
    lastRunAt?: DateTimeNullableFilter<"Integration"> | Date | string | null
  }

  export type InvitationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
  }

  export type InvitationUpdateManyWithWhereWithoutOrganizationInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type MemberUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
    create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
  }

  export type MemberUpdateManyWithWhereWithoutOrganizationInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PolicyUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PolicyWhereUniqueInput
    update: XOR<PolicyUpdateWithoutOrganizationInput, PolicyUncheckedUpdateWithoutOrganizationInput>
    create: XOR<PolicyCreateWithoutOrganizationInput, PolicyUncheckedCreateWithoutOrganizationInput>
  }

  export type PolicyUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PolicyWhereUniqueInput
    data: XOR<PolicyUpdateWithoutOrganizationInput, PolicyUncheckedUpdateWithoutOrganizationInput>
  }

  export type PolicyUpdateManyWithWhereWithoutOrganizationInput = {
    where: PolicyScalarWhereInput
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type RiskUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: RiskWhereUniqueInput
    update: XOR<RiskUpdateWithoutOrganizationInput, RiskUncheckedUpdateWithoutOrganizationInput>
    create: XOR<RiskCreateWithoutOrganizationInput, RiskUncheckedCreateWithoutOrganizationInput>
  }

  export type RiskUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: RiskWhereUniqueInput
    data: XOR<RiskUpdateWithoutOrganizationInput, RiskUncheckedUpdateWithoutOrganizationInput>
  }

  export type RiskUpdateManyWithWhereWithoutOrganizationInput = {
    where: RiskScalarWhereInput
    data: XOR<RiskUpdateManyMutationInput, RiskUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type VendorUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutOrganizationInput, VendorUncheckedUpdateWithoutOrganizationInput>
    create: XOR<VendorCreateWithoutOrganizationInput, VendorUncheckedCreateWithoutOrganizationInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutOrganizationInput, VendorUncheckedUpdateWithoutOrganizationInput>
  }

  export type VendorUpdateManyWithWhereWithoutOrganizationInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutOrganizationInput, TaskUncheckedUpdateWithoutOrganizationInput>
    create: XOR<TaskCreateWithoutOrganizationInput, TaskUncheckedCreateWithoutOrganizationInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutOrganizationInput, TaskUncheckedUpdateWithoutOrganizationInput>
  }

  export type TaskUpdateManyWithWhereWithoutOrganizationInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutOrganizationInput, CommentUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CommentCreateWithoutOrganizationInput, CommentUncheckedCreateWithoutOrganizationInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutOrganizationInput, CommentUncheckedUpdateWithoutOrganizationInput>
  }

  export type CommentUpdateManyWithWhereWithoutOrganizationInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationCreateWithoutPolicyInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutPolicyInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutPolicyInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPolicyInput, OrganizationUncheckedCreateWithoutPolicyInput>
  }

  export type MemberCreateWithoutPolicyInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutPolicyInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutPolicyInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPolicyInput, MemberUncheckedCreateWithoutPolicyInput>
  }

  export type ArtifactCreateWithoutPolicyInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    controls?: ControlCreateNestedManyWithoutArtifactsInput
    organization: OrganizationCreateNestedOneWithoutArtifactsInput
    evidence?: EvidenceCreateNestedOneWithoutArtifactsInput
  }

  export type ArtifactUncheckedCreateWithoutPolicyInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    evidenceId?: string | null
    controls?: ControlUncheckedCreateNestedManyWithoutArtifactsInput
  }

  export type ArtifactCreateOrConnectWithoutPolicyInput = {
    where: ArtifactWhereUniqueInput
    create: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput>
  }

  export type ArtifactCreateManyPolicyInputEnvelope = {
    data: ArtifactCreateManyPolicyInput | ArtifactCreateManyPolicyInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutPolicyInput = {
    update: XOR<OrganizationUpdateWithoutPolicyInput, OrganizationUncheckedUpdateWithoutPolicyInput>
    create: XOR<OrganizationCreateWithoutPolicyInput, OrganizationUncheckedCreateWithoutPolicyInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutPolicyInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutPolicyInput, OrganizationUncheckedUpdateWithoutPolicyInput>
  }

  export type OrganizationUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type MemberUpsertWithoutPolicyInput = {
    update: XOR<MemberUpdateWithoutPolicyInput, MemberUncheckedUpdateWithoutPolicyInput>
    create: XOR<MemberCreateWithoutPolicyInput, MemberUncheckedCreateWithoutPolicyInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPolicyInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPolicyInput, MemberUncheckedUpdateWithoutPolicyInput>
  }

  export type MemberUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ArtifactUpsertWithWhereUniqueWithoutPolicyInput = {
    where: ArtifactWhereUniqueInput
    update: XOR<ArtifactUpdateWithoutPolicyInput, ArtifactUncheckedUpdateWithoutPolicyInput>
    create: XOR<ArtifactCreateWithoutPolicyInput, ArtifactUncheckedCreateWithoutPolicyInput>
  }

  export type ArtifactUpdateWithWhereUniqueWithoutPolicyInput = {
    where: ArtifactWhereUniqueInput
    data: XOR<ArtifactUpdateWithoutPolicyInput, ArtifactUncheckedUpdateWithoutPolicyInput>
  }

  export type ArtifactUpdateManyWithWhereWithoutPolicyInput = {
    where: ArtifactScalarWhereInput
    data: XOR<ArtifactUpdateManyMutationInput, ArtifactUncheckedUpdateManyWithoutPolicyInput>
  }

  export type ControlCreateWithoutRequirementsMappedInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutControlsInput
    organization: OrganizationCreateNestedOneWithoutControlsInput
    artifacts?: ArtifactCreateNestedManyWithoutControlsInput
  }

  export type ControlUncheckedCreateWithoutRequirementsMappedInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
    organizationId: string
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutControlsInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutControlsInput
  }

  export type ControlCreateOrConnectWithoutRequirementsMappedInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutRequirementsMappedInput, ControlUncheckedCreateWithoutRequirementsMappedInput>
  }

  export type FrameworkInstanceCreateWithoutRequirementsMappedInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlCreateNestedManyWithoutFrameworkInstancesInput
    organization: OrganizationCreateNestedOneWithoutFrameworkInstancesInput
  }

  export type FrameworkInstanceUncheckedCreateWithoutRequirementsMappedInput = {
    id?: string
    organizationId: string
    frameworkId: $Enums.FrameworkId
    controls?: ControlUncheckedCreateNestedManyWithoutFrameworkInstancesInput
  }

  export type FrameworkInstanceCreateOrConnectWithoutRequirementsMappedInput = {
    where: FrameworkInstanceWhereUniqueInput
    create: XOR<FrameworkInstanceCreateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedCreateWithoutRequirementsMappedInput>
  }

  export type ControlUpsertWithoutRequirementsMappedInput = {
    update: XOR<ControlUpdateWithoutRequirementsMappedInput, ControlUncheckedUpdateWithoutRequirementsMappedInput>
    create: XOR<ControlCreateWithoutRequirementsMappedInput, ControlUncheckedCreateWithoutRequirementsMappedInput>
    where?: ControlWhereInput
  }

  export type ControlUpdateToOneWithWhereWithoutRequirementsMappedInput = {
    where?: ControlWhereInput
    data: XOR<ControlUpdateWithoutRequirementsMappedInput, ControlUncheckedUpdateWithoutRequirementsMappedInput>
  }

  export type ControlUpdateWithoutRequirementsMappedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutControlsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutControlsNestedInput
    artifacts?: ArtifactUpdateManyWithoutControlsNestedInput
  }

  export type ControlUncheckedUpdateWithoutRequirementsMappedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutControlsNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutControlsNestedInput
  }

  export type FrameworkInstanceUpsertWithoutRequirementsMappedInput = {
    update: XOR<FrameworkInstanceUpdateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedUpdateWithoutRequirementsMappedInput>
    create: XOR<FrameworkInstanceCreateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedCreateWithoutRequirementsMappedInput>
    where?: FrameworkInstanceWhereInput
  }

  export type FrameworkInstanceUpdateToOneWithWhereWithoutRequirementsMappedInput = {
    where?: FrameworkInstanceWhereInput
    data: XOR<FrameworkInstanceUpdateWithoutRequirementsMappedInput, FrameworkInstanceUncheckedUpdateWithoutRequirementsMappedInput>
  }

  export type FrameworkInstanceUpdateWithoutRequirementsMappedInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUpdateManyWithoutFrameworkInstancesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutFrameworkInstancesNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateWithoutRequirementsMappedInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUncheckedUpdateManyWithoutFrameworkInstancesNestedInput
  }

  export type OrganizationCreateWithoutRiskInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutRiskInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutRiskInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutRiskInput, OrganizationUncheckedCreateWithoutRiskInput>
  }

  export type MemberCreateWithoutRiskInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutRiskInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutRiskInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutRiskInput, MemberUncheckedCreateWithoutRiskInput>
  }

  export type OrganizationUpsertWithoutRiskInput = {
    update: XOR<OrganizationUpdateWithoutRiskInput, OrganizationUncheckedUpdateWithoutRiskInput>
    create: XOR<OrganizationCreateWithoutRiskInput, OrganizationUncheckedCreateWithoutRiskInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutRiskInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutRiskInput, OrganizationUncheckedUpdateWithoutRiskInput>
  }

  export type OrganizationUpdateWithoutRiskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutRiskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type MemberUpsertWithoutRiskInput = {
    update: XOR<MemberUpdateWithoutRiskInput, MemberUncheckedUpdateWithoutRiskInput>
    create: XOR<MemberCreateWithoutRiskInput, MemberUncheckedCreateWithoutRiskInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutRiskInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutRiskInput, MemberUncheckedUpdateWithoutRiskInput>
  }

  export type MemberUpdateWithoutRiskInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutRiskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type OrganizationCreateWithoutApiKeysInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutApiKeysInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutApiKeysInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
  }

  export type OrganizationUpsertWithoutApiKeysInput = {
    update: XOR<OrganizationUpdateWithoutApiKeysInput, OrganizationUncheckedUpdateWithoutApiKeysInput>
    create: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutApiKeysInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutApiKeysInput, OrganizationUncheckedUpdateWithoutApiKeysInput>
  }

  export type OrganizationUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutAuditLogInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAuditLogInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAuditLogInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAuditLogInput, OrganizationUncheckedCreateWithoutAuditLogInput>
  }

  export type UserCreateWithoutAuditLogInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogInput = {
    id?: string
    name: string
    email: string
    emailVerified: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    integrationResults?: IntegrationResultUncheckedCreateNestedManyWithoutAssignedUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
  }

  export type OrganizationUpsertWithoutAuditLogInput = {
    update: XOR<OrganizationUpdateWithoutAuditLogInput, OrganizationUncheckedUpdateWithoutAuditLogInput>
    create: XOR<OrganizationCreateWithoutAuditLogInput, OrganizationUncheckedCreateWithoutAuditLogInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAuditLogInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAuditLogInput, OrganizationUncheckedUpdateWithoutAuditLogInput>
  }

  export type OrganizationUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutAuditLogInput = {
    update: XOR<UserUpdateWithoutAuditLogInput, UserUncheckedUpdateWithoutAuditLogInput>
    create: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogInput, UserUncheckedUpdateWithoutAuditLogInput>
  }

  export type UserUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    integrationResults?: IntegrationResultUncheckedUpdateManyWithoutAssignedUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemberCreateWithoutTaskInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutTaskInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutTaskInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutTaskInput, MemberUncheckedCreateWithoutTaskInput>
  }

  export type OrganizationCreateWithoutTasksInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    vendors?: VendorCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    vendors?: VendorUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTasksInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTasksInput, OrganizationUncheckedCreateWithoutTasksInput>
  }

  export type MemberUpsertWithoutTaskInput = {
    update: XOR<MemberUpdateWithoutTaskInput, MemberUncheckedUpdateWithoutTaskInput>
    create: XOR<MemberCreateWithoutTaskInput, MemberUncheckedCreateWithoutTaskInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutTaskInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutTaskInput, MemberUncheckedUpdateWithoutTaskInput>
  }

  export type MemberUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type OrganizationUpsertWithoutTasksInput = {
    update: XOR<OrganizationUpdateWithoutTasksInput, OrganizationUncheckedUpdateWithoutTasksInput>
    create: XOR<OrganizationCreateWithoutTasksInput, OrganizationUncheckedCreateWithoutTasksInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutTasksInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutTasksInput, OrganizationUncheckedUpdateWithoutTasksInput>
  }

  export type OrganizationUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    vendors?: VendorUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type VendorContactCreateWithoutVendorInput = {
    id?: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorContactUncheckedCreateWithoutVendorInput = {
    id?: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorContactCreateOrConnectWithoutVendorInput = {
    where: VendorContactWhereUniqueInput
    create: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput>
  }

  export type VendorContactCreateManyVendorInputEnvelope = {
    data: VendorContactCreateManyVendorInput | VendorContactCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutVendorsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogCreateNestedManyWithoutOrganizationInput
    controls?: ControlCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    members?: MemberCreateNestedManyWithoutOrganizationInput
    policy?: PolicyCreateNestedManyWithoutOrganizationInput
    risk?: RiskCreateNestedManyWithoutOrganizationInput
    tasks?: TaskCreateNestedManyWithoutOrganizationInput
    comments?: CommentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutVendorsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    createdAt: Date | string
    metadata?: string | null
    stripeCustomerId?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    artifacts?: ArtifactUncheckedCreateNestedManyWithoutOrganizationInput
    auditLog?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    controls?: ControlUncheckedCreateNestedManyWithoutOrganizationInput
    evidence?: EvidenceUncheckedCreateNestedManyWithoutOrganizationInput
    frameworkInstances?: FrameworkInstanceUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    policy?: PolicyUncheckedCreateNestedManyWithoutOrganizationInput
    risk?: RiskUncheckedCreateNestedManyWithoutOrganizationInput
    tasks?: TaskUncheckedCreateNestedManyWithoutOrganizationInput
    comments?: CommentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutVendorsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutVendorsInput, OrganizationUncheckedCreateWithoutVendorsInput>
  }

  export type MemberCreateWithoutVendorInput = {
    id?: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyCreateNestedManyWithoutAssigneeInput
    Risk?: RiskCreateNestedManyWithoutAssigneeInput
    Task?: TaskCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
  }

  export type MemberUncheckedCreateWithoutVendorInput = {
    id?: string
    organizationId: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedCreateNestedManyWithoutMemberInput
    Evidence?: EvidenceUncheckedCreateNestedManyWithoutAssigneeInput
    Policy?: PolicyUncheckedCreateNestedManyWithoutAssigneeInput
    Risk?: RiskUncheckedCreateNestedManyWithoutAssigneeInput
    Task?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type MemberCreateOrConnectWithoutVendorInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutVendorInput, MemberUncheckedCreateWithoutVendorInput>
  }

  export type VendorContactUpsertWithWhereUniqueWithoutVendorInput = {
    where: VendorContactWhereUniqueInput
    update: XOR<VendorContactUpdateWithoutVendorInput, VendorContactUncheckedUpdateWithoutVendorInput>
    create: XOR<VendorContactCreateWithoutVendorInput, VendorContactUncheckedCreateWithoutVendorInput>
  }

  export type VendorContactUpdateWithWhereUniqueWithoutVendorInput = {
    where: VendorContactWhereUniqueInput
    data: XOR<VendorContactUpdateWithoutVendorInput, VendorContactUncheckedUpdateWithoutVendorInput>
  }

  export type VendorContactUpdateManyWithWhereWithoutVendorInput = {
    where: VendorContactScalarWhereInput
    data: XOR<VendorContactUpdateManyMutationInput, VendorContactUncheckedUpdateManyWithoutVendorInput>
  }

  export type VendorContactScalarWhereInput = {
    AND?: VendorContactScalarWhereInput | VendorContactScalarWhereInput[]
    OR?: VendorContactScalarWhereInput[]
    NOT?: VendorContactScalarWhereInput | VendorContactScalarWhereInput[]
    id?: StringFilter<"VendorContact"> | string
    vendorId?: StringFilter<"VendorContact"> | string
    name?: StringFilter<"VendorContact"> | string
    email?: StringFilter<"VendorContact"> | string
    phone?: StringFilter<"VendorContact"> | string
    createdAt?: DateTimeFilter<"VendorContact"> | Date | string
    updatedAt?: DateTimeFilter<"VendorContact"> | Date | string
  }

  export type OrganizationUpsertWithoutVendorsInput = {
    update: XOR<OrganizationUpdateWithoutVendorsInput, OrganizationUncheckedUpdateWithoutVendorsInput>
    create: XOR<OrganizationCreateWithoutVendorsInput, OrganizationUncheckedCreateWithoutVendorsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutVendorsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutVendorsInput, OrganizationUncheckedUpdateWithoutVendorsInput>
  }

  export type OrganizationUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLog?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    controls?: ControlUncheckedUpdateManyWithoutOrganizationNestedInput
    evidence?: EvidenceUncheckedUpdateManyWithoutOrganizationNestedInput
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    policy?: PolicyUncheckedUpdateManyWithoutOrganizationNestedInput
    risk?: RiskUncheckedUpdateManyWithoutOrganizationNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutOrganizationNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type MemberUpsertWithoutVendorInput = {
    update: XOR<MemberUpdateWithoutVendorInput, MemberUncheckedUpdateWithoutVendorInput>
    create: XOR<MemberCreateWithoutVendorInput, MemberUncheckedCreateWithoutVendorInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutVendorInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutVendorInput, MemberUncheckedUpdateWithoutVendorInput>
  }

  export type MemberUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type VendorCreateWithoutContactsInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutVendorsInput
    assignee?: MemberCreateNestedOneWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutContactsInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    assigneeId?: string | null
  }

  export type VendorCreateOrConnectWithoutContactsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutContactsInput, VendorUncheckedCreateWithoutContactsInput>
  }

  export type VendorUpsertWithoutContactsInput = {
    update: XOR<VendorUpdateWithoutContactsInput, VendorUncheckedUpdateWithoutContactsInput>
    create: XOR<VendorCreateWithoutContactsInput, VendorUncheckedCreateWithoutContactsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutContactsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutContactsInput, VendorUncheckedUpdateWithoutContactsInput>
  }

  export type VendorUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutVendorsNestedInput
    assignee?: MemberUpdateOneWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ControlUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutControlsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateManyWithoutArtifactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt: Date | string
    updatedAt: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    timestamp?: Date | string
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type IntegrationResultCreateManyAssignedUserInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    integrationId: string
    organizationId: string
  }

  export type InvitationCreateManyUserInput = {
    id?: string
    organizationId: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
  }

  export type MemberCreateManyUserInput = {
    id?: string
    organizationId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
  }

  export type SessionCreateManyUserInput = {
    id?: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    activeOrganizationId?: string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutAuditLogNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type IntegrationResultUpdateWithoutAssignedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutResultsNestedInput
  }

  export type IntegrationResultUncheckedUpdateWithoutAssignedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationResultUncheckedUpdateManyWithoutAssignedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeTrainingVideoCompletionCreateManyMemberInput = {
    id?: string
    completedAt?: Date | string | null
    videoId: string
  }

  export type EvidenceCreateManyAssigneeInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    organizationId: string
  }

  export type PolicyCreateManyAssigneeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    organizationId: string
  }

  export type RiskCreateManyAssigneeInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type TaskCreateManyAssigneeInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    organizationId: string
  }

  export type VendorCreateManyAssigneeInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    organizationId: string
  }

  export type EmployeeTrainingVideoCompletionUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeTrainingVideoCompletionUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type EvidenceUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutEvidenceNestedInput
    artifacts?: ArtifactUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    artifacts?: ArtifactUncheckedUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type PolicyUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutPolicyNestedInput
    artifacts?: ArtifactUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    artifacts?: ArtifactUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutRiskNestedInput
  }

  export type RiskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type VendorUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contacts?: VendorContactUpdateManyWithoutVendorNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutVendorsNestedInput
  }

  export type VendorUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    contacts?: VendorContactUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementMapCreateManyControlInput = {
    id?: string
    requirementId: $Enums.RequirementId
    frameworkInstanceId: string
  }

  export type FrameworkInstanceUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    organization?: OrganizationUpdateOneRequiredWithoutFrameworkInstancesNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateManyWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
  }

  export type ArtifactUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutArtifactsNestedInput
    evidence?: EvidenceUpdateOneWithoutArtifactsNestedInput
    policy?: PolicyUpdateOneWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtifactUncheckedUpdateManyWithoutControlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RequirementMapUpdateWithoutControlInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    frameworkInstance?: FrameworkInstanceUpdateOneRequiredWithoutRequirementsMappedNestedInput
  }

  export type RequirementMapUncheckedUpdateWithoutControlInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    frameworkInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementMapUncheckedUpdateManyWithoutControlInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    frameworkInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtifactCreateManyEvidenceInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    policyId?: string | null
  }

  export type ArtifactUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    controls?: ControlUpdateManyWithoutArtifactsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutArtifactsNestedInput
    policy?: PolicyUpdateOneWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: ControlUncheckedUpdateManyWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateManyWithoutEvidenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RequirementMapCreateManyFrameworkInstanceInput = {
    id?: string
    requirementId: $Enums.RequirementId
    controlId: string
  }

  export type ControlUpdateWithoutFrameworkInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutControlsNestedInput
    artifacts?: ArtifactUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateWithoutFrameworkInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    artifacts?: ArtifactUncheckedUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateManyWithoutFrameworkInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementMapUpdateWithoutFrameworkInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    control?: ControlUpdateOneRequiredWithoutRequirementsMappedNestedInput
  }

  export type RequirementMapUncheckedUpdateWithoutFrameworkInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    controlId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: EnumRequirementIdFieldUpdateOperationsInput | $Enums.RequirementId
    controlId?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationResultCreateManyIntegrationInput = {
    id?: string
    title?: string | null
    description?: string | null
    remediation?: string | null
    status?: string | null
    severity?: string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string | null
    organizationId: string
    assignedUserId?: string | null
  }

  export type IntegrationResultUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUser?: UserUpdateOneWithoutIntegrationResultsNestedInput
  }

  export type IntegrationResultUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntegrationResultUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    remediation?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    resultDetails?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    assignedUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyCreateManyOrganizationInput = {
    id?: string
    name: string
    key: string
    salt?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    isActive?: boolean
  }

  export type ArtifactCreateManyOrganizationInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    evidenceId?: string | null
    policyId?: string | null
  }

  export type AuditLogCreateManyOrganizationInput = {
    id?: string
    timestamp?: Date | string
    userId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type ControlCreateManyOrganizationInput = {
    id?: string
    name: string
    description: string
    lastReviewDate?: Date | string | null
    nextReviewDate?: Date | string | null
  }

  export type EvidenceCreateManyOrganizationInput = {
    id?: string
    name: string
    description: string
    isNotRelevant?: boolean
    additionalUrls?: EvidenceCreateadditionalUrlsInput | string[]
    fileUrls?: EvidenceCreatefileUrlsInput | string[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments
    status?: $Enums.EvidenceStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
  }

  export type FrameworkInstanceCreateManyOrganizationInput = {
    id?: string
    frameworkId: $Enums.FrameworkId
  }

  export type IntegrationCreateManyOrganizationInput = {
    id?: string
    name: string
    integrationId: string
    settings: JsonNullValueInput | InputJsonValue
    userSettings: JsonNullValueInput | InputJsonValue
    lastRunAt?: Date | string | null
  }

  export type InvitationCreateManyOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.Role | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type MemberCreateManyOrganizationInput = {
    id?: string
    userId: string
    role: $Enums.Role
    createdAt?: Date | string
    department?: $Enums.Departments
    isActive?: boolean
  }

  export type PolicyCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.PolicyStatus
    content?: PolicyCreatecontentInput | InputJsonValue[]
    frequency?: $Enums.Frequency | null
    department?: $Enums.Departments | null
    isRequiredToSign?: boolean
    signedBy?: PolicyCreatesignedByInput | string[]
    reviewDate?: Date | string | null
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastArchivedAt?: Date | string | null
    lastPublishedAt?: Date | string | null
    assigneeId?: string | null
  }

  export type RiskCreateManyOrganizationInput = {
    id?: string
    title: string
    description: string
    category: $Enums.RiskCategory
    department?: $Enums.Departments | null
    status?: $Enums.RiskStatus
    likelihood?: $Enums.Likelihood
    impact?: $Enums.Impact
    residualLikelihood?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    treatmentStrategyDescription?: string | null
    treatmentStrategy?: $Enums.RiskTreatmentType
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
  }

  export type VendorCreateManyOrganizationInput = {
    id?: string
    name: string
    description: string
    category?: $Enums.VendorCategory
    status?: $Enums.VendorStatus
    inherentProbability?: $Enums.Likelihood
    inherentImpact?: $Enums.Impact
    residualProbability?: $Enums.Likelihood
    residualImpact?: $Enums.Impact
    createdAt?: Date | string
    updatedAt?: Date | string
    assigneeId?: string | null
  }

  export type TaskCreateManyOrganizationInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.TaskStatus
    relatedId: string
    relatedType: $Enums.TaskType
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate: Date | string
    assigneeId?: string | null
  }

  export type CommentCreateManyOrganizationInput = {
    id?: string
    content: string
    entityId: string
    createdAt?: Date | string
    authorId: string
  }

  export type ApiKeyUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArtifactUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    controls?: ControlUpdateManyWithoutArtifactsNestedInput
    evidence?: EvidenceUpdateOneWithoutArtifactsNestedInput
    policy?: PolicyUpdateOneWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: ControlUncheckedUpdateManyWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    policyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutAuditLogNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type ControlUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frameworkInstances?: FrameworkInstanceUpdateManyWithoutControlsNestedInput
    artifacts?: ArtifactUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frameworkInstances?: FrameworkInstanceUncheckedUpdateManyWithoutControlsNestedInput
    artifacts?: ArtifactUncheckedUpdateManyWithoutControlsNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutControlNestedInput
  }

  export type ControlUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    lastReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvidenceUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: MemberUpdateOneWithoutEvidenceNestedInput
    artifacts?: ArtifactUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    artifacts?: ArtifactUncheckedUpdateManyWithoutEvidenceNestedInput
  }

  export type EvidenceUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isNotRelevant?: BoolFieldUpdateOperationsInput | boolean
    additionalUrls?: EvidenceUpdateadditionalUrlsInput | string[]
    fileUrls?: EvidenceUpdatefileUrlsInput | string[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    status?: NullableEnumEvidenceStatusFieldUpdateOperationsInput | $Enums.EvidenceStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrameworkInstanceUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUpdateManyWithoutFrameworkInstancesNestedInput
    requirementsMapped?: RequirementMapUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
    controls?: ControlUncheckedUpdateManyWithoutFrameworkInstancesNestedInput
    requirementsMapped?: RequirementMapUncheckedUpdateManyWithoutFrameworkInstanceNestedInput
  }

  export type FrameworkInstanceUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frameworkId?: EnumFrameworkIdFieldUpdateOperationsInput | $Enums.FrameworkId
  }

  export type IntegrationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: IntegrationResultUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: IntegrationResultUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    userSettings?: JsonNullValueInput | InputJsonValue
    lastRunAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvitationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
    EmployeeTrainingVideoCompletion?: EmployeeTrainingVideoCompletionUncheckedUpdateManyWithoutMemberNestedInput
    Evidence?: EvidenceUncheckedUpdateManyWithoutAssigneeNestedInput
    Policy?: PolicyUncheckedUpdateManyWithoutAssigneeNestedInput
    Risk?: RiskUncheckedUpdateManyWithoutAssigneeNestedInput
    Task?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type MemberUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: EnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PolicyUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: MemberUpdateOneWithoutPolicyNestedInput
    artifacts?: ArtifactUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    artifacts?: ArtifactUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPolicyStatusFieldUpdateOperationsInput | $Enums.PolicyStatus
    content?: PolicyUpdatecontentInput | InputJsonValue[]
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    isRequiredToSign?: BoolFieldUpdateOperationsInput | boolean
    signedBy?: PolicyUpdatesignedByInput | string[]
    reviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastArchivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPublishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: MemberUpdateOneWithoutRiskNestedInput
  }

  export type RiskUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumRiskCategoryFieldUpdateOperationsInput | $Enums.RiskCategory
    department?: NullableEnumDepartmentsFieldUpdateOperationsInput | $Enums.Departments | null
    status?: EnumRiskStatusFieldUpdateOperationsInput | $Enums.RiskStatus
    likelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    impact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualLikelihood?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    treatmentStrategyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentStrategy?: EnumRiskTreatmentTypeFieldUpdateOperationsInput | $Enums.RiskTreatmentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VendorUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contacts?: VendorContactUpdateManyWithoutVendorNestedInput
    assignee?: MemberUpdateOneWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: VendorContactUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumVendorCategoryFieldUpdateOperationsInput | $Enums.VendorCategory
    status?: EnumVendorStatusFieldUpdateOperationsInput | $Enums.VendorStatus
    inherentProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    inherentImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    residualProbability?: EnumLikelihoodFieldUpdateOperationsInput | $Enums.Likelihood
    residualImpact?: EnumImpactFieldUpdateOperationsInput | $Enums.Impact
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: MemberUpdateOneWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    relatedId?: StringFieldUpdateOperationsInput | string
    relatedType?: EnumTaskTypeFieldUpdateOperationsInput | $Enums.TaskType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: MemberUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtifactCreateManyPolicyInput = {
    id?: string
    type: $Enums.ArtifactType
    createdAt?: Date | string
    updatedAt?: Date | string
    organizationId: string
    evidenceId?: string | null
  }

  export type ArtifactUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    controls?: ControlUpdateManyWithoutArtifactsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutArtifactsNestedInput
    evidence?: EvidenceUpdateOneWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: ControlUncheckedUpdateManyWithoutArtifactsNestedInput
  }

  export type ArtifactUncheckedUpdateManyWithoutPolicyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumArtifactTypeFieldUpdateOperationsInput | $Enums.ArtifactType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    evidenceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VendorContactCreateManyVendorInput = {
    id?: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorContactUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorContactUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorContactUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}