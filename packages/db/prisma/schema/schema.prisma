generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "prismaSchemaFolder"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                      String  @id @default(cuid())
  userId                  String
  type                    String
  provider                String
  providerAccountId       String
  refreshToken            String?
  accessToken             String?
  expiresAt               Int?
  tokenType               String?
  scope                   String?
  idToken                 String?
  sessionState            String?
  refreshTokenExpiresIn   Int?
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model User {
  id                      String                @id @default(cuid())
  name                    String?
  fullName                String?
  email                   String?               @unique
  emailVerified          DateTime?
  image                   String?
  lastLogin              DateTime?
  organizationId         String?
  accounts               Account[]
  auditLog               AuditLog[]
  employee               Employee[]
  assignedEvidence       Evidence[]
  organizationMemberships OrganizationMember[]
  risk                   Risk[]
  riskAttachment         RiskAttachment[]
  riskComment            RiskComment[]
  riskMitigationTask     RiskMitigationTask[]
  sessions               Session[]
  taskAttachment         TaskAttachment[]
  organization           Organization?          @relation("CurrentOrganization", fields: [organizationId], references: [id])
  policy                 Policy[]
  integrationResults     IntegrationResult[]
  vendor                 Vendor[]
  vendorAttachment       VendorAttachment[]
  vendorTask             VendorTask[]
  vendorTaskAttachment   VendorTaskAttachment[]

  @@index([email])
  @@index([organizationId])
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model ApiKey {
  id             String       @id @default(cuid())
  name           String
  key            String       @unique
  salt           String?
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isActive       Boolean      @default(true)

  @@index([organizationId])
  @@index([key])
}

model AuditLog {
  id             String       @id @default(cuid())
  timestamp      DateTime     @default(now())
  userId         String
  organizationId String
  data           Json
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

enum Tier {
  free
  pro
}

enum Role {
  member
  admin
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum RequirementType {
  policy
  file
  link
  procedure
  evidence
  training
}

enum Frequency {
  monthly
  quarterly
  yearly
}

enum FrameworkStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ComplianceStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ArtifactType {
  policy
  evidence
  procedure
  training
}

enum RiskLevel {
  low
  medium
  high
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum TreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

enum RiskTaskStatus {
  open
  pending
  closed
}

enum RiskAttachmentType {
  file
  url
}

enum MembershipRole {
  owner
  admin
  member
  viewer
}

enum EmployeeTaskStatus {
  assigned
  in_progress
  completed
  overdue
}

enum PolicyStatus {
  draft
  published
  needs_review
}

enum RiskLikelihood {
  very_low
  low
  medium
  high
  very_high
}

enum RiskImpact {
  very_low
  low
  medium
  high
  very_high
}

enum VendorCategory {
  cloud
  infrastructure
  software_as_a_service
  finance
  marketing
  sales
  hr
  other
}

enum VendorStatus {
  not_assessed
  in_progress
  assessed
}

enum VendorInherentRisk {
  low
  medium
  high
  unknown
}

enum VendorResidualRisk {
  low
  medium
  high
  unknown
}

enum VendorTaskStatus {
  open
  in_progress
  completed
  cancelled
}

enum VendorAttachmentType {
  file
  image
  document
  other
}
