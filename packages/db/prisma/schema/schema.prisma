generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "prismaSchemaFolder"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  lastLogin     DateTime?

  accounts             Account[]
  assignedEvidence     Evidence[]
  auditLog             AuditLog[]
  employee             Employee[]
  integrationResults   IntegrationResult[]
  invitations          Invitation[]
  members              Member[]
  policy               Policy[]
  risk                 Risk[]
  riskAttachment       RiskAttachment[]
  riskComment          RiskComment[]
  riskMitigationTask   RiskMitigationTask[]
  sessions             Session[]
  taskAttachment       TaskAttachment[]
  vendor               Vendor[]
  vendorAttachment     VendorAttachment[]
  vendorTask           VendorTask[]
  vendorTaskAttachment VendorTaskAttachment[]

  @@unique([email])
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model ApiKey {
  id             String       @id @default(cuid())
  name           String
  key            String       @unique
  salt           String?
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isActive       Boolean      @default(true)

  @@index([organizationId])
  @@index([key])
}

model AuditLog {
  id             String       @id @default(cuid())
  timestamp      DateTime     @default(now())
  userId         String
  organizationId String
  data           Json
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

enum Tier {
  free
  pro
}

enum Role {
  member
  admin
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum RequirementType {
  policy
  file
  link
  procedure
  evidence
  training
}

enum Frequency {
  monthly
  quarterly
  yearly
}

enum FrameworkStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ComplianceStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ArtifactType {
  policy
  evidence
  procedure
  training
}

enum RiskLevel {
  low
  medium
  high
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum TreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

enum RiskTaskStatus {
  open
  pending
  closed
}

enum RiskAttachmentType {
  file
  url
}

enum MembershipRole {
  owner
  admin
  member
  viewer
}

enum EmployeeTaskStatus {
  assigned
  in_progress
  completed
  overdue
}

enum PolicyStatus {
  draft
  published
  needs_review
  archived
}

enum RiskLikelihood {
  very_low
  low
  medium
  high
  very_high
}

enum RiskImpact {
  very_low
  low
  medium
  high
  very_high
}

enum VendorCategory {
  cloud
  infrastructure
  software_as_a_service
  finance
  marketing
  sales
  hr
  other
}

enum VendorStatus {
  not_assessed
  in_progress
  assessed
}

enum VendorInherentRisk {
  low
  medium
  high
  unknown
}

enum VendorResidualRisk {
  low
  medium
  high
  unknown
}

enum VendorTaskStatus {
  open
  in_progress
  completed
  cancelled
}

enum VendorAttachmentType {
  file
  image
  document
  other
}
